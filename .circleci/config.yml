version: 2.1

commands:
  influxdb-onboarding:
    steps:
      - run:
          name: "Post onBoarding request to InfluxDB 2"
          command: ./Scripts/influxdb-onboarding.sh
  prepare:
    description: "Prepare environment to tests"
    steps:
      - checkout
      - influxdb-onboarding
  client-test:
    parameters:
      code-coverage-report:
        type: boolean
        default: false
    steps:
      - run:
          name: "Running tests"
          command: ./Scripts/ci-test.sh << parameters.code-coverage-report >>
      - run:
          name: "Converting test results to Junit format"
          when: on_fail
          command: ./trx2junit/trx2junit ./**/TestResults/*.trx
  
  storing-test-results:
    steps:
      - run:
          name: "Copying test results"
          when: always
          command: |
            mkdir test-results
            mkdir test-results/client-legacy
            cp -r Client.Legacy.Test/TestResults/*.xml test-results/client-legacy || true
            mkdir test-results/client-linq
            cp -r Client.Linq.Test/TestResults/*.xml test-results/client-linq || true
            mkdir test-results/client
            cp -r Client.Test/TestResults/*.xml test-results/client || true
            mkdir test-results/client-core
            cp -r Client.Core.Test/TestResults/*.xml test-results/client-core || true
      - store_test_results:
          path: test-results
  
  storing-artifacts:
    steps:
      - run:
          name: "Copying artifacts"
          command: |
            mkdir artifacts
            cp -r Client.Core/bin/Debug/*/*.dll artifacts/
            cp -r Client.Legacy/bin/Debug/*/*.dll artifacts/
            cp -r Client.Linq/bin/Debug/*/*.dll artifacts/
            cp -r Client/bin/Debug/*/*.dll artifacts/
      - store_artifacts:
          path: artifacts

jobs:
  tests-dotnet:
    parameters:
      dotnet-image:
        type: string
        default: &default-dotnet-image "mcr.microsoft.com/dotnet/sdk:6.0"
      dotnet-target-version:
        type: string
        default: "netstandard2.1"
      influxdb-image:
        type: string
        default: &default-influxdb-image "influxdb:latest"
      code-coverage-report:
        type: boolean
        default: false
    docker:
      - image: << parameters.dotnet-image >>
        environment:
          NET_TARGET_VERSION: << parameters.dotnet-target-version >>
      - image: &influx-image << parameters.influxdb-image >>
        environment:
          INFLUXD_HTTP_BIND_ADDRESS: :9999
      - image: &influx-image << parameters.influxdb-image >>
        name: influxdb_v2_onboarding
        environment:
          INFLUXD_HTTP_BIND_ADDRESS: :9999
      - image: influxdb:1.8
        environment:
          INFLUXDB_HTTP_FLUX_ENABLED: true
    environment:
      INFLUXDB_2_ONBOARDING_IP: influxdb_v2_onboarding
      INFLUXDB_2_ONBOARDING_PORT: 9999
    steps:
      - prepare
      - client-test:
          code-coverage-report: << parameters.code-coverage-report >>
      - storing-test-results
      - storing-artifacts
      - when:
          condition:
            and:
              - equal: [ true, << parameters.code-coverage-report >> ]
          steps:
              - run:
                  name: Install GPG
                  command: |
                      apt-get update
                      apt-get install gpg -y
              - run:
                  name: Collecting coverage reports
                  command: |
                      curl -Os https://uploader.codecov.io/latest/linux/codecov
                      curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
                      curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
                      curl -s https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
                      gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
                      shasum -a 256 -c codecov.SHA256SUM
                      chmod +x ./codecov
                      ./codecov

  tests-windows:
    machine:
      image: "windows-server-2019-vs2019:stable"
      resource_class: windows.medium
      shell: bash
    steps:
      - checkout
      - run: choco install influxdb1 --version=1.8.0
      - run: export INFLUXDB_HTTP_FLUX_ENABLED=true 
      - run:
          name: "Start InfluxDB"
          command: /c/influxdata/influxdb-1.8.0-1/influxd.exe -config "Scripts/influxdb.conf"
          background: true
      - run: |
          sed -i '/<TargetFrameworks>netcoreapp3.1;netcoreapp5.0;netcoreapp6.0<\/TargetFrameworks>/c\<TargetFramework>'netcoreapp5.0'<\/TargetFramework>' Client.Core.Test/Client.Core.Test.csproj
          sed -i '/<TargetFrameworks>netcoreapp3.1;netcoreapp5.0;netcoreapp6.0<\/TargetFrameworks>/c\<TargetFramework>'netcoreapp5.0'<\/TargetFramework>' Client.Test/Client.Test.csproj
          sed -i '/<TargetFrameworks>netcoreapp3.1;netcoreapp5.0;netcoreapp6.0<\/TargetFrameworks>/c\<TargetFramework>'netcoreapp5.0'<\/TargetFramework>' Client.Legacy.Test/Client.Legacy.Test.csproj
          sed -i '/<TargetFrameworks>netcoreapp3.1;netcoreapp5.0;netcoreapp6.0<\/TargetFrameworks>/c\<TargetFramework>'netcoreapp5.0'<\/TargetFramework>' Client.Linq.Test/Client.Linq.Test.csproj
          sed -i '/<TargetFrameworks>netcoreapp3.1;netcoreapp5.0;netcoreapp6.0<\/TargetFrameworks>/c\<TargetFramework>'netcoreapp5.0'<\/TargetFramework>' Examples/Examples.csproj
      - run: dotnet nuget locals --clear all
      - run: dotnet restore --no-cache --force -s https://api.nuget.org/v3/index.json
      - run: dotnet build
      - run: dotnet test Client.Legacy.Test/Client.Legacy.Test.csproj --no-build
      
  check-compilation-warnings:
    docker:
      - image: *default-dotnet-image
    steps:
      - checkout
      - run:
          name: Check compilation warnings
          command: |
            dotnet clean --configuration Release
            dotnet build --configuration Release -warnAsError -warnAsMessage:CS0618
      
  check-code-formatting:
    docker:
      - image: *default-dotnet-image
    steps:
      - checkout
      - restore_cache:
          name: Restoring reSharper Cache
          keys:
              - &cache-key reSharper-cache-2022_1_0
      - run:
          name: Check code formatting
          command: |
            ./Scripts/reformat-code.sh
            git diff --exit-code
      - save_cache:
            name: Saving reSharper Cache
            key: *cache-key
            paths:
                - ./reSharperCLI
  
  deploy-preview:
    parameters:
      influxdb-image:
        type: string
        default: *default-influxdb-image
    docker:
      - image: *default-dotnet-image
    steps:
      - run:
          name: Early return if this build is from a forked repository
          command: |
            if [[ $CIRCLE_PROJECT_USERNAME != "influxdata" ]]; then
              echo "Nothing to do for forked repositories, so marking this step successful"
              circleci step halt
            fi
      - checkout
      - run:
          name: Deploying To Preview repository
          command: ./Scripts/ci-deploy-snapshot.sh

workflows:
  version: 2
  build:
    jobs:
      - check-compilation-warnings
      - check-code-formatting
      - tests-dotnet:
          name: dotnet-3.1-nightly
          influxdb-image: "quay.io/influxdb/influxdb:nightly"
          dotnet-image: "mcr.microsoft.com/dotnet/core/sdk:3.1"
      - tests-dotnet:
          name: dotnet-3.1
          dotnet-image: "mcr.microsoft.com/dotnet/core/sdk:3.1"
      - tests-dotnet:
          name: dotnet-5.0
          code-coverage-report: true
          dotnet-image: "mcr.microsoft.com/dotnet/sdk:5.0"
      - tests-dotnet:
          name: dotnet-6.0
      - tests-windows:
          name: dotnet-windows
      - deploy-preview:
          requires:
            - check-compilation-warnings
            - check-code-formatting
            - dotnet-3.1-nightly
            - dotnet-3.1
            - dotnet-5.0
            - dotnet-6.0
            - dotnet-windows
          filters:
            branches:
              only: master

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - tests-dotnet