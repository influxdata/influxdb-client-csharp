/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// CreateCell
    /// </summary>
    [DataContract]
    public partial class CreateCell : IEquatable<CreateCell>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCell" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="x">x.</param>
        /// <param name="y">y.</param>
        /// <param name="w">w.</param>
        /// <param name="h">h.</param>
        /// <param name="usingView">Makes a copy of the provided view..</param>
        public CreateCell(string name = default, int? x = default, int? y = default, int? w = default, int? h = default,
            string usingView = default)
        {
            Name = name;
            X = x;
            Y = y;
            W = w;
            H = h;
            UsingView = usingView;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets X
        /// </summary>
        [DataMember(Name = "x", EmitDefaultValue = false)]
        public int? X { get; set; }

        /// <summary>
        /// Gets or Sets Y
        /// </summary>
        [DataMember(Name = "y", EmitDefaultValue = false)]
        public int? Y { get; set; }

        /// <summary>
        /// Gets or Sets W
        /// </summary>
        [DataMember(Name = "w", EmitDefaultValue = false)]
        public int? W { get; set; }

        /// <summary>
        /// Gets or Sets H
        /// </summary>
        [DataMember(Name = "h", EmitDefaultValue = false)]
        public int? H { get; set; }

        /// <summary>
        /// Makes a copy of the provided view.
        /// </summary>
        /// <value>Makes a copy of the provided view.</value>
        [DataMember(Name = "usingView", EmitDefaultValue = false)]
        public string UsingView { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateCell {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  W: ").Append(W).Append("\n");
            sb.Append("  H: ").Append(H).Append("\n");
            sb.Append("  UsingView: ").Append(UsingView).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CreateCell);
        }

        /// <summary>
        /// Returns true if CreateCell instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateCell to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCell input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Name == input.Name ||
                    Name != null && Name.Equals(input.Name)
                ) &&
                (
                    X == input.X ||
                    X != null && X.Equals(input.X)
                ) &&
                (
                    Y == input.Y ||
                    Y != null && Y.Equals(input.Y)
                ) &&
                (
                    W == input.W ||
                    W != null && W.Equals(input.W)
                ) &&
                (
                    H == input.H ||
                    H != null && H.Equals(input.H)
                ) &&
                (
                    UsingView == input.UsingView ||
                    UsingView != null && UsingView.Equals(input.UsingView)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                if (Name != null)
                {
                    hashCode = hashCode * 59 + Name.GetHashCode();
                }

                if (X != null)
                {
                    hashCode = hashCode * 59 + X.GetHashCode();
                }

                if (Y != null)
                {
                    hashCode = hashCode * 59 + Y.GetHashCode();
                }

                if (W != null)
                {
                    hashCode = hashCode * 59 + W.GetHashCode();
                }

                if (H != null)
                {
                    hashCode = hashCode * 59 + H.GetHashCode();
                }

                if (UsingView != null)
                {
                    hashCode = hashCode * 59 + UsingView.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}