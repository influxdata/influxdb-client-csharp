/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// Represents a complete package source tree.
    /// </summary>
    [DataContract]
    public partial class Package : IEquatable<Package>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Package" /> class.
        /// </summary>
        /// <param name="type">Type of AST node.</param>
        /// <param name="path">Package import path.</param>
        /// <param name="package">Package name.</param>
        /// <param name="files">Package files.</param>
        public Package(string type = default, string path = default, string package = default,
            List<File> files = default)
        {
            Type = type;
            Path = path;
            _Package = package;
            Files = files;
        }

        /// <summary>
        /// Type of AST node
        /// </summary>
        /// <value>Type of AST node</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Package import path
        /// </summary>
        /// <value>Package import path</value>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Package name
        /// </summary>
        /// <value>Package name</value>
        [DataMember(Name = "package", EmitDefaultValue = false)]
        public string _Package { get; set; }

        /// <summary>
        /// Package files
        /// </summary>
        /// <value>Package files</value>
        [DataMember(Name = "files", EmitDefaultValue = false)]
        public List<File> Files { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Package {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  _Package: ").Append(_Package).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Package);
        }

        /// <summary>
        /// Returns true if Package instances are equal
        /// </summary>
        /// <param name="input">Instance of Package to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Package input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Type == input.Type ||
                    Type != null && Type.Equals(input.Type)
                ) &&
                (
                    Path == input.Path ||
                    Path != null && Path.Equals(input.Path)
                ) &&
                (
                    _Package == input._Package ||
                    _Package != null && _Package.Equals(input._Package)
                ) &&
                (
                    Files == input.Files ||
                    Files != null &&
                    Files.SequenceEqual(input.Files)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                if (Type != null)
                {
                    hashCode = hashCode * 59 + Type.GetHashCode();
                }

                if (Path != null)
                {
                    hashCode = hashCode * 59 + Path.GetHashCode();
                }

                if (_Package != null)
                {
                    hashCode = hashCode * 59 + _Package.GetHashCode();
                }

                if (Files != null)
                {
                    hashCode = hashCode * 59 + Files.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}