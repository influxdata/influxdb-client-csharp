/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// BuilderConfig
    /// </summary>
    [DataContract]
    public partial class BuilderConfig : IEquatable<BuilderConfig>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuilderConfig" /> class.
        /// </summary>
        /// <param name="buckets">buckets.</param>
        /// <param name="tags">tags.</param>
        /// <param name="functions">functions.</param>
        /// <param name="aggregateWindow">aggregateWindow.</param>
        public BuilderConfig(List<string> buckets = default, List<BuilderTagsType> tags = default,
            List<BuilderFunctionsType> functions = default, BuilderConfigAggregateWindow aggregateWindow = default)
        {
            Buckets = buckets;
            Tags = tags;
            Functions = functions;
            AggregateWindow = aggregateWindow;
        }

        /// <summary>
        /// Gets or Sets Buckets
        /// </summary>
        [DataMember(Name = "buckets", EmitDefaultValue = false)]
        public List<string> Buckets { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<BuilderTagsType> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Functions
        /// </summary>
        [DataMember(Name = "functions", EmitDefaultValue = false)]
        public List<BuilderFunctionsType> Functions { get; set; }

        /// <summary>
        /// Gets or Sets AggregateWindow
        /// </summary>
        [DataMember(Name = "aggregateWindow", EmitDefaultValue = false)]
        public BuilderConfigAggregateWindow AggregateWindow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuilderConfig {\n");
            sb.Append("  Buckets: ").Append(Buckets).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Functions: ").Append(Functions).Append("\n");
            sb.Append("  AggregateWindow: ").Append(AggregateWindow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as BuilderConfig);
        }

        /// <summary>
        /// Returns true if BuilderConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of BuilderConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuilderConfig input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Buckets == input.Buckets ||
                    Buckets != null &&
                    Buckets.SequenceEqual(input.Buckets)
                ) &&
                (
                    Tags == input.Tags ||
                    Tags != null &&
                    Tags.SequenceEqual(input.Tags)
                ) &&
                (
                    Functions == input.Functions ||
                    Functions != null &&
                    Functions.SequenceEqual(input.Functions)
                ) && AggregateWindow != null && AggregateWindow.Equals(input.AggregateWindow);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                if (Buckets != null)
                {
                    hashCode = hashCode * 59 + Buckets.GetHashCode();
                }

                if (Tags != null)
                {
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                }

                if (Functions != null)
                {
                    hashCode = hashCode * 59 + Functions.GetHashCode();
                }

                if (AggregateWindow != null)
                {
                    hashCode = hashCode * 59 + AggregateWindow.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}