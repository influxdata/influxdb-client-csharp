/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// Authorization
    /// </summary>
    [DataContract]
    public partial class Authorization : AuthorizationUpdateRequest, IEquatable<Authorization>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Authorization" /> class.
        /// </summary>
        /// <param name="orgID">ID of the organization that the authorization is scoped to..</param>
        /// <param name="permissions">List of permissions for an authorization.  An authorization must have at least one permission..</param>
        /// <param name="links">links.</param>
        public Authorization(string orgID = default, List<Permission> permissions = default,
            AuthorizationLinks links = default, StatusEnum? status = StatusEnum.Active, string description = default) :
            base(status, description)
        {
            OrgID = orgID;
            Permissions = permissions;
            Links = links;
        }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime? CreatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// ID of the organization that the authorization is scoped to.
        /// </summary>
        /// <value>ID of the organization that the authorization is scoped to.</value>
        [DataMember(Name = "orgID", EmitDefaultValue = false)]
        public string OrgID { get; set; }

        /// <summary>
        /// List of permissions for an authorization.  An authorization must have at least one permission.
        /// </summary>
        /// <value>List of permissions for an authorization.  An authorization must have at least one permission.</value>
        [DataMember(Name = "permissions", EmitDefaultValue = false)]
        public List<Permission> Permissions { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Token used to authenticate API requests.
        /// </summary>
        /// <value>Token used to authenticate API requests.</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; private set; }

        /// <summary>
        /// ID of the user that created and owns the token.
        /// </summary>
        /// <value>ID of the user that created and owns the token.</value>
        [DataMember(Name = "userID", EmitDefaultValue = false)]
        public string UserID { get; private set; }

        /// <summary>
        /// Name of the user that created and owns the token.
        /// </summary>
        /// <value>Name of the user that created and owns the token.</value>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public string User { get; private set; }

        /// <summary>
        /// Name of the organization that the token is scoped to.
        /// </summary>
        /// <value>Name of the organization that the token is scoped to.</value>
        [DataMember(Name = "org", EmitDefaultValue = false)]
        public string Org { get; private set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public AuthorizationLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Authorization {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  OrgID: ").Append(OrgID).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Org: ").Append(Org).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Authorization);
        }

        /// <summary>
        /// Returns true if Authorization instances are equal
        /// </summary>
        /// <param name="input">Instance of Authorization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Authorization input)
        {
            if (input == null)
            {
                return false;
            }

            return base.Equals(input) &&
                   (
                       CreatedAt == input.CreatedAt ||
                       CreatedAt != null && CreatedAt.Equals(input.CreatedAt)
                   ) && base.Equals(input) &&
                   (
                       UpdatedAt == input.UpdatedAt ||
                       UpdatedAt != null && UpdatedAt.Equals(input.UpdatedAt)
                   ) && base.Equals(input) &&
                   (
                       OrgID == input.OrgID ||
                       OrgID != null && OrgID.Equals(input.OrgID)
                   ) && base.Equals(input) &&
                   (
                       Permissions == input.Permissions ||
                       Permissions != null &&
                       Permissions.SequenceEqual(input.Permissions)
                   ) && base.Equals(input) &&
                   (
                       Id == input.Id ||
                       Id != null && Id.Equals(input.Id)
                   ) && base.Equals(input) &&
                   (
                       Token == input.Token ||
                       Token != null && Token.Equals(input.Token)
                   ) && base.Equals(input) &&
                   (
                       UserID == input.UserID ||
                       UserID != null && UserID.Equals(input.UserID)
                   ) && base.Equals(input) &&
                   (
                       User == input.User ||
                       User != null && User.Equals(input.User)
                   ) && base.Equals(input) &&
                   (
                       Org == input.Org ||
                       Org != null && Org.Equals(input.Org)
                   ) && base.Equals(input) && Links != null && Links.Equals(input.Links);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();

                if (CreatedAt != null)
                {
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                }

                if (UpdatedAt != null)
                {
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                }

                if (OrgID != null)
                {
                    hashCode = hashCode * 59 + OrgID.GetHashCode();
                }

                if (Permissions != null)
                {
                    hashCode = hashCode * 59 + Permissions.GetHashCode();
                }

                if (Id != null)
                {
                    hashCode = hashCode * 59 + Id.GetHashCode();
                }

                if (Token != null)
                {
                    hashCode = hashCode * 59 + Token.GetHashCode();
                }

                if (UserID != null)
                {
                    hashCode = hashCode * 59 + UserID.GetHashCode();
                }

                if (User != null)
                {
                    hashCode = hashCode * 59 + User.GetHashCode();
                }

                if (Org != null)
                {
                    hashCode = hashCode * 59 + Org.GetHashCode();
                }

                if (Links != null)
                {
                    hashCode = hashCode * 59 + Links.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}