/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// Axis used in a visualization.
    /// </summary>
    [DataContract]
    public partial class Axis : IEquatable<Axis>
    {
        /// <summary>
        /// Radix for formatting axis values.
        /// </summary>
        /// <value>Radix for formatting axis values.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BaseEnum
        {
            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")] Empty = 1,

            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")] _2 = 2,

            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")] _10 = 3
        }

        /// <summary>
        /// Radix for formatting axis values.
        /// </summary>
        /// <value>Radix for formatting axis values.</value>
        [DataMember(Name = "base", EmitDefaultValue = false)]
        public BaseEnum? Base { get; set; }

        /// <summary>
        /// Gets or Sets Scale
        /// </summary>
        [DataMember(Name = "scale", EmitDefaultValue = false)]
        public AxisScale? Scale { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="Axis" /> class.
        /// </summary>
        /// <param name="bounds">The extents of the axis in the form [lower, upper]. Clients determine whether bounds are inclusive or exclusive of their limits..</param>
        /// <param name="label">Description of the axis..</param>
        /// <param name="prefix">Label prefix for formatting axis values..</param>
        /// <param name="suffix">Label suffix for formatting axis values..</param>
        /// <param name="_base">Radix for formatting axis values..</param>
        /// <param name="scale">scale.</param>
        public Axis(List<string> bounds = default, string label = default, string prefix = default,
            string suffix = default, BaseEnum? _base = default, AxisScale? scale = default)
        {
            Bounds = bounds;
            Label = label;
            Prefix = prefix;
            Suffix = suffix;
            Base = _base;
            Scale = scale;
        }

        /// <summary>
        /// The extents of the axis in the form [lower, upper]. Clients determine whether bounds are inclusive or exclusive of their limits.
        /// </summary>
        /// <value>The extents of the axis in the form [lower, upper]. Clients determine whether bounds are inclusive or exclusive of their limits.</value>
        [DataMember(Name = "bounds", EmitDefaultValue = false)]
        public List<string> Bounds { get; set; }

        /// <summary>
        /// Description of the axis.
        /// </summary>
        /// <value>Description of the axis.</value>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// Label prefix for formatting axis values.
        /// </summary>
        /// <value>Label prefix for formatting axis values.</value>
        [DataMember(Name = "prefix", EmitDefaultValue = false)]
        public string Prefix { get; set; }

        /// <summary>
        /// Label suffix for formatting axis values.
        /// </summary>
        /// <value>Label suffix for formatting axis values.</value>
        [DataMember(Name = "suffix", EmitDefaultValue = false)]
        public string Suffix { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Axis {\n");
            sb.Append("  Bounds: ").Append(Bounds).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("  Base: ").Append(Base).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Axis);
        }

        /// <summary>
        /// Returns true if Axis instances are equal
        /// </summary>
        /// <param name="input">Instance of Axis to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Axis input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Bounds == input.Bounds ||
                    Bounds != null &&
                    Bounds.SequenceEqual(input.Bounds)
                ) &&
                (
                    Label == input.Label ||
                    Label != null && Label.Equals(input.Label)
                ) &&
                (
                    Prefix == input.Prefix ||
                    Prefix != null && Prefix.Equals(input.Prefix)
                ) &&
                (
                    Suffix == input.Suffix ||
                    Suffix != null && Suffix.Equals(input.Suffix)
                ) &&
                (
                    Base == input.Base ||
                    Base.Equals(input.Base)
                ) &&
                (
                    Scale == input.Scale ||
                    Scale.Equals(input.Scale)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                if (Bounds != null)
                {
                    hashCode = hashCode * 59 + Bounds.GetHashCode();
                }

                if (Label != null)
                {
                    hashCode = hashCode * 59 + Label.GetHashCode();
                }

                if (Prefix != null)
                {
                    hashCode = hashCode * 59 + Prefix.GetHashCode();
                }

                if (Suffix != null)
                {
                    hashCode = hashCode * 59 + Suffix.GetHashCode();
                }

                hashCode = hashCode * 59 + Base.GetHashCode();
                hashCode = hashCode * 59 + Scale.GetHashCode();
                return hashCode;
            }
        }
    }
}