/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// OnboardingRequest
    /// </summary>
    [DataContract]
    public partial class OnboardingRequest : IEquatable<OnboardingRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OnboardingRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OnboardingRequest()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnboardingRequest" /> class.
        /// </summary>
        /// <param name="username">username (required).</param>
        /// <param name="password">password.</param>
        /// <param name="org">org (required).</param>
        /// <param name="bucket">bucket (required).</param>
        /// <param name="retentionPeriodSeconds">retentionPeriodSeconds.</param>
        /// <param name="retentionPeriodHrs">Retention period *in nanoseconds* for the new bucket. This key&#39;s name has been misleading since OSS 2.0 GA, please transition to use &#x60;retentionPeriodSeconds&#x60;.</param>
        /// <param name="token">Authentication token to set on the initial user. If not specified, the server will generate a token..</param>
        public OnboardingRequest(string username = default, string password = default, string org = default,
            string bucket = default, long? retentionPeriodSeconds = default, int? retentionPeriodHrs = default,
            string token = default)
        {
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException(
                    "username is a required property for OnboardingRequest and cannot be null");
            }

            Username = username;
            // to ensure "org" is required (not null)
            if (org == null)
            {
                throw new InvalidDataException("org is a required property for OnboardingRequest and cannot be null");
            }

            Org = org;
            // to ensure "bucket" is required (not null)
            if (bucket == null)
            {
                throw new InvalidDataException(
                    "bucket is a required property for OnboardingRequest and cannot be null");
            }

            Bucket = bucket;
            Password = password;
            RetentionPeriodSeconds = retentionPeriodSeconds;
            RetentionPeriodHrs = retentionPeriodHrs;
            Token = token;
        }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Org
        /// </summary>
        [DataMember(Name = "org", EmitDefaultValue = false)]
        public string Org { get; set; }

        /// <summary>
        /// Gets or Sets Bucket
        /// </summary>
        [DataMember(Name = "bucket", EmitDefaultValue = false)]
        public string Bucket { get; set; }

        /// <summary>
        /// Gets or Sets RetentionPeriodSeconds
        /// </summary>
        [DataMember(Name = "retentionPeriodSeconds", EmitDefaultValue = false)]
        public long? RetentionPeriodSeconds { get; set; }

        /// <summary>
        /// Retention period *in nanoseconds* for the new bucket. This key&#39;s name has been misleading since OSS 2.0 GA, please transition to use &#x60;retentionPeriodSeconds&#x60;
        /// </summary>
        /// <value>Retention period *in nanoseconds* for the new bucket. This key&#39;s name has been misleading since OSS 2.0 GA, please transition to use &#x60;retentionPeriodSeconds&#x60;</value>
        [DataMember(Name = "retentionPeriodHrs", EmitDefaultValue = false)]
        public int? RetentionPeriodHrs { get; set; }

        /// <summary>
        /// Authentication token to set on the initial user. If not specified, the server will generate a token.
        /// </summary>
        /// <value>Authentication token to set on the initial user. If not specified, the server will generate a token.</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OnboardingRequest {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Org: ").Append(Org).Append("\n");
            sb.Append("  Bucket: ").Append(Bucket).Append("\n");
            sb.Append("  RetentionPeriodSeconds: ").Append(RetentionPeriodSeconds).Append("\n");
            sb.Append("  RetentionPeriodHrs: ").Append(RetentionPeriodHrs).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as OnboardingRequest);
        }

        /// <summary>
        /// Returns true if OnboardingRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of OnboardingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OnboardingRequest input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Username == input.Username ||
                    Username != null && Username.Equals(input.Username)
                ) &&
                (
                    Password == input.Password ||
                    Password != null && Password.Equals(input.Password)
                ) &&
                (
                    Org == input.Org ||
                    Org != null && Org.Equals(input.Org)
                ) &&
                (
                    Bucket == input.Bucket ||
                    Bucket != null && Bucket.Equals(input.Bucket)
                ) &&
                (
                    RetentionPeriodSeconds == input.RetentionPeriodSeconds ||
                    RetentionPeriodSeconds != null && RetentionPeriodSeconds.Equals(input.RetentionPeriodSeconds)
                ) &&
                (
                    RetentionPeriodHrs == input.RetentionPeriodHrs ||
                    RetentionPeriodHrs != null && RetentionPeriodHrs.Equals(input.RetentionPeriodHrs)
                ) &&
                (
                    Token == input.Token ||
                    Token != null && Token.Equals(input.Token)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                if (Username != null)
                {
                    hashCode = hashCode * 59 + Username.GetHashCode();
                }

                if (Password != null)
                {
                    hashCode = hashCode * 59 + Password.GetHashCode();
                }

                if (Org != null)
                {
                    hashCode = hashCode * 59 + Org.GetHashCode();
                }

                if (Bucket != null)
                {
                    hashCode = hashCode * 59 + Bucket.GetHashCode();
                }

                if (RetentionPeriodSeconds != null)
                {
                    hashCode = hashCode * 59 + RetentionPeriodSeconds.GetHashCode();
                }

                if (RetentionPeriodHrs != null)
                {
                    hashCode = hashCode * 59 + RetentionPeriodHrs.GetHashCode();
                }

                if (Token != null)
                {
                    hashCode = hashCode * 59 + Token.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}