/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// StackEvents
    /// </summary>
    [DataContract]
    public partial class StackEvents : IEquatable<StackEvents>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StackEvents" /> class.
        /// </summary>
        /// <param name="eventType">eventType.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="sources">sources.</param>
        /// <param name="resources">resources.</param>
        /// <param name="urls">urls.</param>
        public StackEvents(string eventType = default, string name = default, string description = default,
            List<string> sources = default, List<StackResources> resources = default, List<string> urls = default)
        {
            EventType = eventType;
            Name = name;
            Description = description;
            Sources = sources;
            Resources = resources;
            Urls = urls;
        }

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name = "eventType", EmitDefaultValue = false)]
        public string EventType { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Sources
        /// </summary>
        [DataMember(Name = "sources", EmitDefaultValue = false)]
        public List<string> Sources { get; set; }

        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name = "resources", EmitDefaultValue = false)]
        public List<StackResources> Resources { get; set; }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [DataMember(Name = "urls", EmitDefaultValue = false)]
        public List<string> Urls { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StackEvents {\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Sources: ").Append(Sources).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as StackEvents);
        }

        /// <summary>
        /// Returns true if StackEvents instances are equal
        /// </summary>
        /// <param name="input">Instance of StackEvents to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StackEvents input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    EventType == input.EventType ||
                    EventType != null && EventType.Equals(input.EventType)
                ) &&
                (
                    Name == input.Name ||
                    Name != null && Name.Equals(input.Name)
                ) &&
                (
                    Description == input.Description ||
                    Description != null && Description.Equals(input.Description)
                ) &&
                (
                    Sources == input.Sources ||
                    Sources != null &&
                    Sources.SequenceEqual(input.Sources)
                ) &&
                (
                    Resources == input.Resources ||
                    Resources != null &&
                    Resources.SequenceEqual(input.Resources)
                ) &&
                (
                    Urls == input.Urls ||
                    Urls != null &&
                    Urls.SequenceEqual(input.Urls)
                ) &&
                (
                    UpdatedAt == input.UpdatedAt ||
                    UpdatedAt != null && UpdatedAt.Equals(input.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                if (EventType != null)
                {
                    hashCode = hashCode * 59 + EventType.GetHashCode();
                }

                if (Name != null)
                {
                    hashCode = hashCode * 59 + Name.GetHashCode();
                }

                if (Description != null)
                {
                    hashCode = hashCode * 59 + Description.GetHashCode();
                }

                if (Sources != null)
                {
                    hashCode = hashCode * 59 + Sources.GetHashCode();
                }

                if (Resources != null)
                {
                    hashCode = hashCode * 59 + Resources.GetHashCode();
                }

                if (Urls != null)
                {
                    hashCode = hashCode * 59 + Urls.GetHashCode();
                }

                if (UpdatedAt != null)
                {
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}