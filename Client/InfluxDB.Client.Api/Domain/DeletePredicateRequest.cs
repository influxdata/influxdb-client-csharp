/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// The delete predicate request.
    /// </summary>
    [DataContract]
    public partial class DeletePredicateRequest : IEquatable<DeletePredicateRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeletePredicateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeletePredicateRequest()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeletePredicateRequest" /> class.
        /// </summary>
        /// <param name="start">RFC3339Nano (required).</param>
        /// <param name="stop">RFC3339Nano (required).</param>
        /// <param name="predicate">InfluxQL-like delete statement.</param>
        public DeletePredicateRequest(DateTime? start = default, DateTime? stop = default, string predicate = default)
        {
            // to ensure "start" is required (not null)
            if (start == null)
            {
                throw new InvalidDataException(
                    "start is a required property for DeletePredicateRequest and cannot be null");
            }

            Start = start;
            // to ensure "stop" is required (not null)
            if (stop == null)
            {
                throw new InvalidDataException(
                    "stop is a required property for DeletePredicateRequest and cannot be null");
            }

            Stop = stop;
            Predicate = predicate;
        }

        /// <summary>
        /// RFC3339Nano
        /// </summary>
        /// <value>RFC3339Nano</value>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public DateTime? Start { get; set; }

        /// <summary>
        /// RFC3339Nano
        /// </summary>
        /// <value>RFC3339Nano</value>
        [DataMember(Name = "stop", EmitDefaultValue = false)]
        public DateTime? Stop { get; set; }

        /// <summary>
        /// InfluxQL-like delete statement
        /// </summary>
        /// <value>InfluxQL-like delete statement</value>
        [DataMember(Name = "predicate", EmitDefaultValue = false)]
        public string Predicate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeletePredicateRequest {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Stop: ").Append(Stop).Append("\n");
            sb.Append("  Predicate: ").Append(Predicate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as DeletePredicateRequest);
        }

        /// <summary>
        /// Returns true if DeletePredicateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DeletePredicateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeletePredicateRequest input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Start == input.Start ||
                    Start != null && Start.Equals(input.Start)
                ) &&
                (
                    Stop == input.Stop ||
                    Stop != null && Stop.Equals(input.Stop)
                ) &&
                (
                    Predicate == input.Predicate ||
                    Predicate != null && Predicate.Equals(input.Predicate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                if (Start != null)
                {
                    hashCode = hashCode * 59 + Start.GetHashCode();
                }

                if (Stop != null)
                {
                    hashCode = hashCode * 59 + Stop.GetHashCode();
                }

                if (Predicate != null)
                {
                    hashCode = hashCode * 59 + Predicate.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}