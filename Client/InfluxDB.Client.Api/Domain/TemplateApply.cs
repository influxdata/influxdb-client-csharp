/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// TemplateApply
    /// </summary>
    [DataContract]
    public partial class TemplateApply :  IEquatable<TemplateApply>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApply" /> class.
        /// </summary>
        /// <param name="dryRun">dryRun.</param>
        /// <param name="orgID">orgID.</param>
        /// <param name="stackID">stackID.</param>
        /// <param name="template">template.</param>
        /// <param name="templates">templates.</param>
        /// <param name="envRefs">envRefs.</param>
        /// <param name="secrets">secrets.</param>
        /// <param name="remotes">remotes.</param>
        /// <param name="actions">actions.</param>
        public TemplateApply(bool? dryRun = default(bool?), string orgID = default(string), string stackID = default(string), TemplateApplyTemplate template = default(TemplateApplyTemplate), List<TemplateApplyTemplate> templates = default(List<TemplateApplyTemplate>), Dictionary<string, Object> envRefs = default(Dictionary<string, Object>), Dictionary<string, string> secrets = default(Dictionary<string, string>), List<TemplateApplyRemotes> remotes = default(List<TemplateApplyRemotes>), List<Object> actions = default(List<Object>))
        {
            this.DryRun = dryRun;
            this.OrgID = orgID;
            this.StackID = stackID;
            this.Template = template;
            this.Templates = templates;
            this.EnvRefs = envRefs;
            this.Secrets = secrets;
            this.Remotes = remotes;
            this.Actions = actions;
        }

        /// <summary>
        /// Gets or Sets DryRun
        /// </summary>
        [DataMember(Name="dryRun", EmitDefaultValue=false)]
        public bool? DryRun { get; set; }

        /// <summary>
        /// Gets or Sets OrgID
        /// </summary>
        [DataMember(Name="orgID", EmitDefaultValue=false)]
        public string OrgID { get; set; }

        /// <summary>
        /// Gets or Sets StackID
        /// </summary>
        [DataMember(Name="stackID", EmitDefaultValue=false)]
        public string StackID { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public TemplateApplyTemplate Template { get; set; }

        /// <summary>
        /// Gets or Sets Templates
        /// </summary>
        [DataMember(Name="templates", EmitDefaultValue=false)]
        public List<TemplateApplyTemplate> Templates { get; set; }

        /// <summary>
        /// Gets or Sets EnvRefs
        /// </summary>
        [DataMember(Name="envRefs", EmitDefaultValue=false)]
        public Dictionary<string, Object> EnvRefs { get; set; }

        /// <summary>
        /// Gets or Sets Secrets
        /// </summary>
        [DataMember(Name="secrets", EmitDefaultValue=false)]
        public Dictionary<string, string> Secrets { get; set; }

        /// <summary>
        /// Gets or Sets Remotes
        /// </summary>
        [DataMember(Name="remotes", EmitDefaultValue=false)]
        public List<TemplateApplyRemotes> Remotes { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name="actions", EmitDefaultValue=false)]
        public List<Object> Actions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemplateApply {\n");
            sb.Append("  DryRun: ").Append(DryRun).Append("\n");
            sb.Append("  OrgID: ").Append(OrgID).Append("\n");
            sb.Append("  StackID: ").Append(StackID).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Templates: ").Append(Templates).Append("\n");
            sb.Append("  EnvRefs: ").Append(EnvRefs).Append("\n");
            sb.Append("  Secrets: ").Append(Secrets).Append("\n");
            sb.Append("  Remotes: ").Append(Remotes).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemplateApply);
        }

        /// <summary>
        /// Returns true if TemplateApply instances are equal
        /// </summary>
        /// <param name="input">Instance of TemplateApply to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplateApply input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DryRun == input.DryRun ||
                    (this.DryRun != null && this.DryRun.Equals(input.DryRun))
                ) && 
                (
                    this.OrgID == input.OrgID ||
                    (this.OrgID != null && this.OrgID.Equals(input.OrgID))
                ) && 
                (
                    this.StackID == input.StackID ||
                    (this.StackID != null && this.StackID.Equals(input.StackID))
                ) && 
                (
                    
                    (this.Template != null && this.Template.Equals(input.Template))
                ) && 
                (
                    this.Templates == input.Templates ||
                    this.Templates != null &&
                    this.Templates.SequenceEqual(input.Templates)
                ) && 
                (
                    this.EnvRefs == input.EnvRefs ||
                    this.EnvRefs != null &&
                    this.EnvRefs.SequenceEqual(input.EnvRefs)
                ) && 
                (
                    this.Secrets == input.Secrets ||
                    this.Secrets != null &&
                    this.Secrets.SequenceEqual(input.Secrets)
                ) && 
                (
                    this.Remotes == input.Remotes ||
                    this.Remotes != null &&
                    this.Remotes.SequenceEqual(input.Remotes)
                ) && 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.DryRun != null)
                    hashCode = hashCode * 59 + this.DryRun.GetHashCode();
                if (this.OrgID != null)
                    hashCode = hashCode * 59 + this.OrgID.GetHashCode();
                if (this.StackID != null)
                    hashCode = hashCode * 59 + this.StackID.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.Templates != null)
                    hashCode = hashCode * 59 + this.Templates.GetHashCode();
                if (this.EnvRefs != null)
                    hashCode = hashCode * 59 + this.EnvRefs.GetHashCode();
                if (this.Secrets != null)
                    hashCode = hashCode * 59 + this.Secrets.GetHashCode();
                if (this.Remotes != null)
                    hashCode = hashCode * 59 + this.Remotes.GetHashCode();
                if (this.Actions != null)
                    hashCode = hashCode * 59 + this.Actions.GetHashCode();
                return hashCode;
            }
        }

    }

}
