/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// TemplateApply
    /// </summary>
    [DataContract]
    public partial class TemplateApply : IEquatable<TemplateApply>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApply" /> class.
        /// </summary>
        /// <param name="dryRun">dryRun.</param>
        /// <param name="orgID">orgID.</param>
        /// <param name="stackID">stackID.</param>
        /// <param name="template">template.</param>
        /// <param name="templates">templates.</param>
        /// <param name="envRefs">envRefs.</param>
        /// <param name="secrets">secrets.</param>
        /// <param name="remotes">remotes.</param>
        /// <param name="actions">actions.</param>
        public TemplateApply(bool? dryRun = default, string orgID = default, string stackID = default,
            TemplateApplyTemplate template = default, List<TemplateApplyTemplate> templates = default,
            Dictionary<string, object> envRefs = default, Dictionary<string, string> secrets = default,
            List<TemplateApplyRemotes> remotes = default, List<object> actions = default)
        {
            DryRun = dryRun;
            OrgID = orgID;
            StackID = stackID;
            Template = template;
            Templates = templates;
            EnvRefs = envRefs;
            Secrets = secrets;
            Remotes = remotes;
            Actions = actions;
        }

        /// <summary>
        /// Gets or Sets DryRun
        /// </summary>
        [DataMember(Name = "dryRun", EmitDefaultValue = false)]
        public bool? DryRun { get; set; }

        /// <summary>
        /// Gets or Sets OrgID
        /// </summary>
        [DataMember(Name = "orgID", EmitDefaultValue = false)]
        public string OrgID { get; set; }

        /// <summary>
        /// Gets or Sets StackID
        /// </summary>
        [DataMember(Name = "stackID", EmitDefaultValue = false)]
        public string StackID { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", EmitDefaultValue = false)]
        public TemplateApplyTemplate Template { get; set; }

        /// <summary>
        /// Gets or Sets Templates
        /// </summary>
        [DataMember(Name = "templates", EmitDefaultValue = false)]
        public List<TemplateApplyTemplate> Templates { get; set; }

        /// <summary>
        /// Gets or Sets EnvRefs
        /// </summary>
        [DataMember(Name = "envRefs", EmitDefaultValue = false)]
        public Dictionary<string, object> EnvRefs { get; set; }

        /// <summary>
        /// Gets or Sets Secrets
        /// </summary>
        [DataMember(Name = "secrets", EmitDefaultValue = false)]
        public Dictionary<string, string> Secrets { get; set; }

        /// <summary>
        /// Gets or Sets Remotes
        /// </summary>
        [DataMember(Name = "remotes", EmitDefaultValue = false)]
        public List<TemplateApplyRemotes> Remotes { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name = "actions", EmitDefaultValue = false)]
        public List<object> Actions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemplateApply {\n");
            sb.Append("  DryRun: ").Append(DryRun).Append("\n");
            sb.Append("  OrgID: ").Append(OrgID).Append("\n");
            sb.Append("  StackID: ").Append(StackID).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Templates: ").Append(Templates).Append("\n");
            sb.Append("  EnvRefs: ").Append(EnvRefs).Append("\n");
            sb.Append("  Secrets: ").Append(Secrets).Append("\n");
            sb.Append("  Remotes: ").Append(Remotes).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TemplateApply);
        }

        /// <summary>
        /// Returns true if TemplateApply instances are equal
        /// </summary>
        /// <param name="input">Instance of TemplateApply to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplateApply input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    DryRun == input.DryRun ||
                    DryRun != null && DryRun.Equals(input.DryRun)
                ) &&
                (
                    OrgID == input.OrgID ||
                    OrgID != null && OrgID.Equals(input.OrgID)
                ) &&
                (
                    StackID == input.StackID ||
                    StackID != null && StackID.Equals(input.StackID)
                ) && Template != null && Template.Equals(input.Template) && (
                    Templates == input.Templates ||
                    Templates != null &&
                    Templates.SequenceEqual(input.Templates)
                ) && (
                    EnvRefs == input.EnvRefs ||
                    EnvRefs != null &&
                    EnvRefs.SequenceEqual(input.EnvRefs)
                ) && (
                    Secrets == input.Secrets ||
                    Secrets != null &&
                    Secrets.SequenceEqual(input.Secrets)
                ) && (
                    Remotes == input.Remotes ||
                    Remotes != null &&
                    Remotes.SequenceEqual(input.Remotes)
                ) && (
                    Actions == input.Actions ||
                    Actions != null &&
                    Actions.SequenceEqual(input.Actions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                if (DryRun != null)
                {
                    hashCode = hashCode * 59 + DryRun.GetHashCode();
                }

                if (OrgID != null)
                {
                    hashCode = hashCode * 59 + OrgID.GetHashCode();
                }

                if (StackID != null)
                {
                    hashCode = hashCode * 59 + StackID.GetHashCode();
                }

                if (Template != null)
                {
                    hashCode = hashCode * 59 + Template.GetHashCode();
                }

                if (Templates != null)
                {
                    hashCode = hashCode * 59 + Templates.GetHashCode();
                }

                if (EnvRefs != null)
                {
                    hashCode = hashCode * 59 + EnvRefs.GetHashCode();
                }

                if (Secrets != null)
                {
                    hashCode = hashCode * 59 + Secrets.GetHashCode();
                }

                if (Remotes != null)
                {
                    hashCode = hashCode * 59 + Remotes.GetHashCode();
                }

                if (Actions != null)
                {
                    hashCode = hashCode * 59 + Actions.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}