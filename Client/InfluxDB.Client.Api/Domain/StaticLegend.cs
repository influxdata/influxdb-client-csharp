/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// StaticLegend represents the options specific to the static legend
    /// </summary>
    [DataContract]
    public partial class StaticLegend :  IEquatable<StaticLegend>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StaticLegend" /> class.
        /// </summary>
        /// <param name="colorizeRows">colorizeRows.</param>
        /// <param name="heightRatio">heightRatio.</param>
        /// <param name="show">show.</param>
        /// <param name="opacity">opacity.</param>
        /// <param name="orientationThreshold">orientationThreshold.</param>
        /// <param name="valueAxis">valueAxis.</param>
        /// <param name="widthRatio">widthRatio.</param>
        public StaticLegend(bool? colorizeRows = default(bool?), float? heightRatio = default(float?), bool? show = default(bool?), float? opacity = default(float?), int? orientationThreshold = default(int?), string valueAxis = default(string), float? widthRatio = default(float?))
        {
            this.ColorizeRows = colorizeRows;
            this.HeightRatio = heightRatio;
            this.Show = show;
            this.Opacity = opacity;
            this.OrientationThreshold = orientationThreshold;
            this.ValueAxis = valueAxis;
            this.WidthRatio = widthRatio;
        }

        /// <summary>
        /// Gets or Sets ColorizeRows
        /// </summary>
        [DataMember(Name="colorizeRows", EmitDefaultValue=false)]
        public bool? ColorizeRows { get; set; }

        /// <summary>
        /// Gets or Sets HeightRatio
        /// </summary>
        [DataMember(Name="heightRatio", EmitDefaultValue=false)]
        public float? HeightRatio { get; set; }

        /// <summary>
        /// Gets or Sets Show
        /// </summary>
        [DataMember(Name="show", EmitDefaultValue=false)]
        public bool? Show { get; set; }

        /// <summary>
        /// Gets or Sets Opacity
        /// </summary>
        [DataMember(Name="opacity", EmitDefaultValue=false)]
        public float? Opacity { get; set; }

        /// <summary>
        /// Gets or Sets OrientationThreshold
        /// </summary>
        [DataMember(Name="orientationThreshold", EmitDefaultValue=false)]
        public int? OrientationThreshold { get; set; }

        /// <summary>
        /// Gets or Sets ValueAxis
        /// </summary>
        [DataMember(Name="valueAxis", EmitDefaultValue=false)]
        public string ValueAxis { get; set; }

        /// <summary>
        /// Gets or Sets WidthRatio
        /// </summary>
        [DataMember(Name="widthRatio", EmitDefaultValue=false)]
        public float? WidthRatio { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StaticLegend {\n");
            sb.Append("  ColorizeRows: ").Append(ColorizeRows).Append("\n");
            sb.Append("  HeightRatio: ").Append(HeightRatio).Append("\n");
            sb.Append("  Show: ").Append(Show).Append("\n");
            sb.Append("  Opacity: ").Append(Opacity).Append("\n");
            sb.Append("  OrientationThreshold: ").Append(OrientationThreshold).Append("\n");
            sb.Append("  ValueAxis: ").Append(ValueAxis).Append("\n");
            sb.Append("  WidthRatio: ").Append(WidthRatio).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StaticLegend);
        }

        /// <summary>
        /// Returns true if StaticLegend instances are equal
        /// </summary>
        /// <param name="input">Instance of StaticLegend to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StaticLegend input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ColorizeRows == input.ColorizeRows ||
                    (this.ColorizeRows != null && this.ColorizeRows.Equals(input.ColorizeRows))
                ) && 
                (
                    this.HeightRatio == input.HeightRatio ||
                    (this.HeightRatio != null && this.HeightRatio.Equals(input.HeightRatio))
                ) && 
                (
                    this.Show == input.Show ||
                    (this.Show != null && this.Show.Equals(input.Show))
                ) && 
                (
                    this.Opacity == input.Opacity ||
                    (this.Opacity != null && this.Opacity.Equals(input.Opacity))
                ) && 
                (
                    this.OrientationThreshold == input.OrientationThreshold ||
                    (this.OrientationThreshold != null && this.OrientationThreshold.Equals(input.OrientationThreshold))
                ) && 
                (
                    this.ValueAxis == input.ValueAxis ||
                    (this.ValueAxis != null && this.ValueAxis.Equals(input.ValueAxis))
                ) && 
                (
                    this.WidthRatio == input.WidthRatio ||
                    (this.WidthRatio != null && this.WidthRatio.Equals(input.WidthRatio))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.ColorizeRows != null)
                    hashCode = hashCode * 59 + this.ColorizeRows.GetHashCode();
                if (this.HeightRatio != null)
                    hashCode = hashCode * 59 + this.HeightRatio.GetHashCode();
                if (this.Show != null)
                    hashCode = hashCode * 59 + this.Show.GetHashCode();
                if (this.Opacity != null)
                    hashCode = hashCode * 59 + this.Opacity.GetHashCode();
                if (this.OrientationThreshold != null)
                    hashCode = hashCode * 59 + this.OrientationThreshold.GetHashCode();
                if (this.ValueAxis != null)
                    hashCode = hashCode * 59 + this.ValueAxis.GetHashCode();
                if (this.WidthRatio != null)
                    hashCode = hashCode * 59 + this.WidthRatio.GetHashCode();
                return hashCode;
            }
        }

    }

}
