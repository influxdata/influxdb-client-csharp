/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// GaugeViewProperties
    /// </summary>
    [DataContract]
    public partial class GaugeViewProperties : ViewProperties, IEquatable<GaugeViewProperties>
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Gauge for value: gauge
            /// </summary>
            [EnumMember(Value = "gauge")] Gauge = 1
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Defines Shape
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShapeEnum
        {
            /// <summary>
            /// Enum ChronografV2 for value: chronograf-v2
            /// </summary>
            [EnumMember(Value = "chronograf-v2")] ChronografV2 = 1
        }

        /// <summary>
        /// Gets or Sets Shape
        /// </summary>
        [DataMember(Name = "shape", EmitDefaultValue = false)]
        public ShapeEnum Shape { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="GaugeViewProperties" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GaugeViewProperties()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GaugeViewProperties" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to TypeEnum.Gauge).</param>
        /// <param name="queries">queries (required).</param>
        /// <param name="colors">Colors define color encoding of data into a visualization (required).</param>
        /// <param name="shape">shape (required) (default to ShapeEnum.ChronografV2).</param>
        /// <param name="note">note (required).</param>
        /// <param name="showNoteWhenEmpty">If true, will display note when empty (required).</param>
        /// <param name="prefix">prefix (required).</param>
        /// <param name="tickPrefix">tickPrefix (required).</param>
        /// <param name="suffix">suffix (required).</param>
        /// <param name="tickSuffix">tickSuffix (required).</param>
        /// <param name="decimalPlaces">decimalPlaces (required).</param>
        public GaugeViewProperties(TypeEnum type = TypeEnum.Gauge, List<DashboardQuery> queries = default,
            List<DashboardColor> colors = default, ShapeEnum shape = ShapeEnum.ChronografV2, string note = default,
            bool? showNoteWhenEmpty = default, string prefix = default, string tickPrefix = default,
            string suffix = default, string tickSuffix = default, DecimalPlaces decimalPlaces = default) : base()
        {
            // to ensure "type" is required (not null)
            Type = type;
            // to ensure "queries" is required (not null)
            if (queries == null)
            {
                throw new InvalidDataException(
                    "queries is a required property for GaugeViewProperties and cannot be null");
            }

            Queries = queries;
            // to ensure "colors" is required (not null)
            if (colors == null)
            {
                throw new InvalidDataException(
                    "colors is a required property for GaugeViewProperties and cannot be null");
            }

            Colors = colors;
            // to ensure "shape" is required (not null)
            Shape = shape;
            // to ensure "note" is required (not null)
            if (note == null)
            {
                throw new InvalidDataException(
                    "note is a required property for GaugeViewProperties and cannot be null");
            }

            Note = note;
            // to ensure "showNoteWhenEmpty" is required (not null)
            if (showNoteWhenEmpty == null)
            {
                throw new InvalidDataException(
                    "showNoteWhenEmpty is a required property for GaugeViewProperties and cannot be null");
            }

            ShowNoteWhenEmpty = showNoteWhenEmpty;
            // to ensure "prefix" is required (not null)
            if (prefix == null)
            {
                throw new InvalidDataException(
                    "prefix is a required property for GaugeViewProperties and cannot be null");
            }

            Prefix = prefix;
            // to ensure "tickPrefix" is required (not null)
            if (tickPrefix == null)
            {
                throw new InvalidDataException(
                    "tickPrefix is a required property for GaugeViewProperties and cannot be null");
            }

            TickPrefix = tickPrefix;
            // to ensure "suffix" is required (not null)
            if (suffix == null)
            {
                throw new InvalidDataException(
                    "suffix is a required property for GaugeViewProperties and cannot be null");
            }

            Suffix = suffix;
            // to ensure "tickSuffix" is required (not null)
            if (tickSuffix == null)
            {
                throw new InvalidDataException(
                    "tickSuffix is a required property for GaugeViewProperties and cannot be null");
            }

            TickSuffix = tickSuffix;
            // to ensure "decimalPlaces" is required (not null)
            if (decimalPlaces == null)
            {
                throw new InvalidDataException(
                    "decimalPlaces is a required property for GaugeViewProperties and cannot be null");
            }

            DecimalPlaces = decimalPlaces;
        }


        /// <summary>
        /// Gets or Sets Queries
        /// </summary>
        [DataMember(Name = "queries", EmitDefaultValue = false)]
        public List<DashboardQuery> Queries { get; set; }

        /// <summary>
        /// Colors define color encoding of data into a visualization
        /// </summary>
        /// <value>Colors define color encoding of data into a visualization</value>
        [DataMember(Name = "colors", EmitDefaultValue = false)]
        public List<DashboardColor> Colors { get; set; }


        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name = "note", EmitDefaultValue = false)]
        public string Note { get; set; }

        /// <summary>
        /// If true, will display note when empty
        /// </summary>
        /// <value>If true, will display note when empty</value>
        [DataMember(Name = "showNoteWhenEmpty", EmitDefaultValue = false)]
        public bool? ShowNoteWhenEmpty { get; set; }

        /// <summary>
        /// Gets or Sets Prefix
        /// </summary>
        [DataMember(Name = "prefix", EmitDefaultValue = false)]
        public string Prefix { get; set; }

        /// <summary>
        /// Gets or Sets TickPrefix
        /// </summary>
        [DataMember(Name = "tickPrefix", EmitDefaultValue = false)]
        public string TickPrefix { get; set; }

        /// <summary>
        /// Gets or Sets Suffix
        /// </summary>
        [DataMember(Name = "suffix", EmitDefaultValue = false)]
        public string Suffix { get; set; }

        /// <summary>
        /// Gets or Sets TickSuffix
        /// </summary>
        [DataMember(Name = "tickSuffix", EmitDefaultValue = false)]
        public string TickSuffix { get; set; }

        /// <summary>
        /// Gets or Sets DecimalPlaces
        /// </summary>
        [DataMember(Name = "decimalPlaces", EmitDefaultValue = false)]
        public DecimalPlaces DecimalPlaces { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GaugeViewProperties {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Queries: ").Append(Queries).Append("\n");
            sb.Append("  Colors: ").Append(Colors).Append("\n");
            sb.Append("  Shape: ").Append(Shape).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  ShowNoteWhenEmpty: ").Append(ShowNoteWhenEmpty).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  TickPrefix: ").Append(TickPrefix).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("  TickSuffix: ").Append(TickSuffix).Append("\n");
            sb.Append("  DecimalPlaces: ").Append(DecimalPlaces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as GaugeViewProperties);
        }

        /// <summary>
        /// Returns true if GaugeViewProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of GaugeViewProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GaugeViewProperties input)
        {
            if (input == null)
            {
                return false;
            }

            return base.Equals(input) &&
                   (
                       Type == input.Type ||
                       Type.Equals(input.Type)
                   ) && base.Equals(input) &&
                   (
                       Queries == input.Queries ||
                       Queries != null &&
                       Queries.SequenceEqual(input.Queries)
                   ) && base.Equals(input) &&
                   (
                       Colors == input.Colors ||
                       Colors != null &&
                       Colors.SequenceEqual(input.Colors)
                   ) && base.Equals(input) &&
                   (
                       Shape == input.Shape ||
                       Shape.Equals(input.Shape)
                   ) && base.Equals(input) &&
                   (
                       Note == input.Note ||
                       Note != null && Note.Equals(input.Note)
                   ) && base.Equals(input) &&
                   (
                       ShowNoteWhenEmpty == input.ShowNoteWhenEmpty ||
                       ShowNoteWhenEmpty != null && ShowNoteWhenEmpty.Equals(input.ShowNoteWhenEmpty)
                   ) && base.Equals(input) &&
                   (
                       Prefix == input.Prefix ||
                       Prefix != null && Prefix.Equals(input.Prefix)
                   ) && base.Equals(input) &&
                   (
                       TickPrefix == input.TickPrefix ||
                       TickPrefix != null && TickPrefix.Equals(input.TickPrefix)
                   ) && base.Equals(input) &&
                   (
                       Suffix == input.Suffix ||
                       Suffix != null && Suffix.Equals(input.Suffix)
                   ) && base.Equals(input) &&
                   (
                       TickSuffix == input.TickSuffix ||
                       TickSuffix != null && TickSuffix.Equals(input.TickSuffix)
                   ) && base.Equals(input) && DecimalPlaces != null && DecimalPlaces.Equals(input.DecimalPlaces);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();

                hashCode = hashCode * 59 + Type.GetHashCode();
                if (Queries != null)
                {
                    hashCode = hashCode * 59 + Queries.GetHashCode();
                }

                if (Colors != null)
                {
                    hashCode = hashCode * 59 + Colors.GetHashCode();
                }

                hashCode = hashCode * 59 + Shape.GetHashCode();
                if (Note != null)
                {
                    hashCode = hashCode * 59 + Note.GetHashCode();
                }

                if (ShowNoteWhenEmpty != null)
                {
                    hashCode = hashCode * 59 + ShowNoteWhenEmpty.GetHashCode();
                }

                if (Prefix != null)
                {
                    hashCode = hashCode * 59 + Prefix.GetHashCode();
                }

                if (TickPrefix != null)
                {
                    hashCode = hashCode * 59 + TickPrefix.GetHashCode();
                }

                if (Suffix != null)
                {
                    hashCode = hashCode * 59 + Suffix.GetHashCode();
                }

                if (TickSuffix != null)
                {
                    hashCode = hashCode * 59 + TickSuffix.GetHashCode();
                }

                if (DecimalPlaces != null)
                {
                    hashCode = hashCode * 59 + DecimalPlaces.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}