/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// PatchStackRequestAdditionalResources
    /// </summary>
    [DataContract]
    public partial class PatchStackRequestAdditionalResources : IEquatable<PatchStackRequestAdditionalResources>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatchStackRequestAdditionalResources" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PatchStackRequestAdditionalResources()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PatchStackRequestAdditionalResources" /> class.
        /// </summary>
        /// <param name="resourceID">resourceID (required).</param>
        /// <param name="kind">kind (required).</param>
        /// <param name="templateMetaName">templateMetaName.</param>
        public PatchStackRequestAdditionalResources(string resourceID = default, string kind = default,
            string templateMetaName = default)
        {
            // to ensure "resourceID" is required (not null)
            if (resourceID == null)
            {
                throw new InvalidDataException(
                    "resourceID is a required property for PatchStackRequestAdditionalResources and cannot be null");
            }

            ResourceID = resourceID;
            // to ensure "kind" is required (not null)
            if (kind == null)
            {
                throw new InvalidDataException(
                    "kind is a required property for PatchStackRequestAdditionalResources and cannot be null");
            }

            Kind = kind;
            TemplateMetaName = templateMetaName;
        }

        /// <summary>
        /// Gets or Sets ResourceID
        /// </summary>
        [DataMember(Name = "resourceID", EmitDefaultValue = false)]
        public string ResourceID { get; set; }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name = "kind", EmitDefaultValue = false)]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or Sets TemplateMetaName
        /// </summary>
        [DataMember(Name = "templateMetaName", EmitDefaultValue = false)]
        public string TemplateMetaName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatchStackRequestAdditionalResources {\n");
            sb.Append("  ResourceID: ").Append(ResourceID).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  TemplateMetaName: ").Append(TemplateMetaName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as PatchStackRequestAdditionalResources);
        }

        /// <summary>
        /// Returns true if PatchStackRequestAdditionalResources instances are equal
        /// </summary>
        /// <param name="input">Instance of PatchStackRequestAdditionalResources to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatchStackRequestAdditionalResources input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    ResourceID == input.ResourceID ||
                    ResourceID != null && ResourceID.Equals(input.ResourceID)
                ) &&
                (
                    Kind == input.Kind ||
                    Kind != null && Kind.Equals(input.Kind)
                ) &&
                (
                    TemplateMetaName == input.TemplateMetaName ||
                    TemplateMetaName != null && TemplateMetaName.Equals(input.TemplateMetaName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                if (ResourceID != null)
                {
                    hashCode = hashCode * 59 + ResourceID.GetHashCode();
                }

                if (Kind != null)
                {
                    hashCode = hashCode * 59 + Kind.GetHashCode();
                }

                if (TemplateMetaName != null)
                {
                    hashCode = hashCode * 59 + TemplateMetaName.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}