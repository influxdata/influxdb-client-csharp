/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// CheckViewProperties
    /// </summary>
    [DataContract]
    public partial class CheckViewProperties : ViewProperties, IEquatable<CheckViewProperties>
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Check for value: check
            /// </summary>
            [EnumMember(Value = "check")] Check = 1
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Defines Shape
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShapeEnum
        {
            /// <summary>
            /// Enum ChronografV2 for value: chronograf-v2
            /// </summary>
            [EnumMember(Value = "chronograf-v2")] ChronografV2 = 1
        }

        /// <summary>
        /// Gets or Sets Shape
        /// </summary>
        [DataMember(Name = "shape", EmitDefaultValue = false)]
        public ShapeEnum Shape { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckViewProperties" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CheckViewProperties()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckViewProperties" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to TypeEnum.Check).</param>
        /// <param name="shape">shape (required) (default to ShapeEnum.ChronografV2).</param>
        /// <param name="checkID">checkID (required).</param>
        /// <param name="check">check.</param>
        /// <param name="queries">queries (required).</param>
        /// <param name="colors">Colors define color encoding of data into a visualization (required).</param>
        /// <param name="legendColorizeRows">legendColorizeRows.</param>
        /// <param name="legendHide">legendHide.</param>
        /// <param name="legendOpacity">legendOpacity.</param>
        /// <param name="legendOrientationThreshold">legendOrientationThreshold.</param>
        public CheckViewProperties(TypeEnum type = TypeEnum.Check, ShapeEnum shape = ShapeEnum.ChronografV2,
            string checkID = default, Check check = default, List<DashboardQuery> queries = default,
            List<DashboardColor> colors = default, bool? legendColorizeRows = default, bool? legendHide = default,
            float? legendOpacity = default, int? legendOrientationThreshold = default) : base()
        {
            // to ensure "type" is required (not null)
            Type = type;
            // to ensure "shape" is required (not null)
            Shape = shape;
            // to ensure "checkID" is required (not null)
            if (checkID == null)
            {
                throw new InvalidDataException(
                    "checkID is a required property for CheckViewProperties and cannot be null");
            }

            CheckID = checkID;
            // to ensure "queries" is required (not null)
            if (queries == null)
            {
                throw new InvalidDataException(
                    "queries is a required property for CheckViewProperties and cannot be null");
            }

            Queries = queries;
            // to ensure "colors" is required (not null)
            if (colors == null)
            {
                throw new InvalidDataException(
                    "colors is a required property for CheckViewProperties and cannot be null");
            }

            Colors = colors;
            Check = check;
            LegendColorizeRows = legendColorizeRows;
            LegendHide = legendHide;
            LegendOpacity = legendOpacity;
            LegendOrientationThreshold = legendOrientationThreshold;
        }


        /// <summary>
        /// Gets or Sets CheckID
        /// </summary>
        [DataMember(Name = "checkID", EmitDefaultValue = false)]
        public string CheckID { get; set; }

        /// <summary>
        /// Gets or Sets Check
        /// </summary>
        [DataMember(Name = "check", EmitDefaultValue = false)]
        public Check Check { get; set; }

        /// <summary>
        /// Gets or Sets Queries
        /// </summary>
        [DataMember(Name = "queries", EmitDefaultValue = false)]
        public List<DashboardQuery> Queries { get; set; }

        /// <summary>
        /// Colors define color encoding of data into a visualization
        /// </summary>
        /// <value>Colors define color encoding of data into a visualization</value>
        [DataMember(Name = "colors", EmitDefaultValue = false)]
        public List<DashboardColor> Colors { get; set; }

        /// <summary>
        /// Gets or Sets LegendColorizeRows
        /// </summary>
        [DataMember(Name = "legendColorizeRows", EmitDefaultValue = false)]
        public bool? LegendColorizeRows { get; set; }

        /// <summary>
        /// Gets or Sets LegendHide
        /// </summary>
        [DataMember(Name = "legendHide", EmitDefaultValue = false)]
        public bool? LegendHide { get; set; }

        /// <summary>
        /// Gets or Sets LegendOpacity
        /// </summary>
        [DataMember(Name = "legendOpacity", EmitDefaultValue = false)]
        public float? LegendOpacity { get; set; }

        /// <summary>
        /// Gets or Sets LegendOrientationThreshold
        /// </summary>
        [DataMember(Name = "legendOrientationThreshold", EmitDefaultValue = false)]
        public int? LegendOrientationThreshold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckViewProperties {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Shape: ").Append(Shape).Append("\n");
            sb.Append("  CheckID: ").Append(CheckID).Append("\n");
            sb.Append("  Check: ").Append(Check).Append("\n");
            sb.Append("  Queries: ").Append(Queries).Append("\n");
            sb.Append("  Colors: ").Append(Colors).Append("\n");
            sb.Append("  LegendColorizeRows: ").Append(LegendColorizeRows).Append("\n");
            sb.Append("  LegendHide: ").Append(LegendHide).Append("\n");
            sb.Append("  LegendOpacity: ").Append(LegendOpacity).Append("\n");
            sb.Append("  LegendOrientationThreshold: ").Append(LegendOrientationThreshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CheckViewProperties);
        }

        /// <summary>
        /// Returns true if CheckViewProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckViewProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckViewProperties input)
        {
            if (input == null)
            {
                return false;
            }

            return base.Equals(input) &&
                   (
                       Type == input.Type ||
                       Type.Equals(input.Type)
                   ) && base.Equals(input) &&
                   (
                       Shape == input.Shape ||
                       Shape.Equals(input.Shape)
                   ) && base.Equals(input) &&
                   (
                       CheckID == input.CheckID ||
                       CheckID != null && CheckID.Equals(input.CheckID)
                   ) && base.Equals(input) && Check != null && Check.Equals(input.Check) && base.Equals(input) && (
                       Queries == input.Queries ||
                       Queries != null &&
                       Queries.SequenceEqual(input.Queries)
                   ) && base.Equals(input) && (
                       Colors == input.Colors ||
                       Colors != null &&
                       Colors.SequenceEqual(input.Colors)
                   ) && base.Equals(input) && (
                       LegendColorizeRows == input.LegendColorizeRows ||
                       LegendColorizeRows != null && LegendColorizeRows.Equals(input.LegendColorizeRows)
                   ) && base.Equals(input) && (
                       LegendHide == input.LegendHide ||
                       LegendHide != null && LegendHide.Equals(input.LegendHide)
                   ) && base.Equals(input) && (
                       LegendOpacity == input.LegendOpacity ||
                       LegendOpacity != null && LegendOpacity.Equals(input.LegendOpacity)
                   ) && base.Equals(input) && (
                       LegendOrientationThreshold == input.LegendOrientationThreshold ||
                       LegendOrientationThreshold != null &&
                       LegendOrientationThreshold.Equals(input.LegendOrientationThreshold)
                   );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();

                hashCode = hashCode * 59 + Type.GetHashCode();
                hashCode = hashCode * 59 + Shape.GetHashCode();
                if (CheckID != null)
                {
                    hashCode = hashCode * 59 + CheckID.GetHashCode();
                }

                if (Check != null)
                {
                    hashCode = hashCode * 59 + Check.GetHashCode();
                }

                if (Queries != null)
                {
                    hashCode = hashCode * 59 + Queries.GetHashCode();
                }

                if (Colors != null)
                {
                    hashCode = hashCode * 59 + Colors.GetHashCode();
                }

                if (LegendColorizeRows != null)
                {
                    hashCode = hashCode * 59 + LegendColorizeRows.GetHashCode();
                }

                if (LegendHide != null)
                {
                    hashCode = hashCode * 59 + LegendHide.GetHashCode();
                }

                if (LegendOpacity != null)
                {
                    hashCode = hashCode * 59 + LegendOpacity.GetHashCode();
                }

                if (LegendOrientationThreshold != null)
                {
                    hashCode = hashCode * 59 + LegendOrientationThreshold.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}