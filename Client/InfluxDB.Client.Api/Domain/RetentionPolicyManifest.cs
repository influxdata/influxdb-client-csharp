/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// RetentionPolicyManifest
    /// </summary>
    [DataContract]
    public partial class RetentionPolicyManifest :  IEquatable<RetentionPolicyManifest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetentionPolicyManifest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RetentionPolicyManifest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RetentionPolicyManifest" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="replicaN">replicaN (required).</param>
        /// <param name="duration">duration (required).</param>
        /// <param name="shardGroupDuration">shardGroupDuration (required).</param>
        /// <param name="shardGroups">shardGroups (required).</param>
        /// <param name="subscriptions">subscriptions (required).</param>
        public RetentionPolicyManifest(string name = default(string), int? replicaN = default(int?), long? duration = default(long?), long? shardGroupDuration = default(long?), List<ShardGroupManifest> shardGroups = default(List<ShardGroupManifest>), List<SubscriptionManifest> subscriptions = default(List<SubscriptionManifest>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for RetentionPolicyManifest and cannot be null");
            }
            this.Name = name;
            // to ensure "replicaN" is required (not null)
            if (replicaN == null)
            {
                throw new InvalidDataException("replicaN is a required property for RetentionPolicyManifest and cannot be null");
            }
            this.ReplicaN = replicaN;
            // to ensure "duration" is required (not null)
            if (duration == null)
            {
                throw new InvalidDataException("duration is a required property for RetentionPolicyManifest and cannot be null");
            }
            this.Duration = duration;
            // to ensure "shardGroupDuration" is required (not null)
            if (shardGroupDuration == null)
            {
                throw new InvalidDataException("shardGroupDuration is a required property for RetentionPolicyManifest and cannot be null");
            }
            this.ShardGroupDuration = shardGroupDuration;
            // to ensure "shardGroups" is required (not null)
            if (shardGroups == null)
            {
                throw new InvalidDataException("shardGroups is a required property for RetentionPolicyManifest and cannot be null");
            }
            this.ShardGroups = shardGroups;
            // to ensure "subscriptions" is required (not null)
            if (subscriptions == null)
            {
                throw new InvalidDataException("subscriptions is a required property for RetentionPolicyManifest and cannot be null");
            }
            this.Subscriptions = subscriptions;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ReplicaN
        /// </summary>
        [DataMember(Name="replicaN", EmitDefaultValue=false)]
        public int? ReplicaN { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public long? Duration { get; set; }

        /// <summary>
        /// Gets or Sets ShardGroupDuration
        /// </summary>
        [DataMember(Name="shardGroupDuration", EmitDefaultValue=false)]
        public long? ShardGroupDuration { get; set; }

        /// <summary>
        /// Gets or Sets ShardGroups
        /// </summary>
        [DataMember(Name="shardGroups", EmitDefaultValue=false)]
        public List<ShardGroupManifest> ShardGroups { get; set; }

        /// <summary>
        /// Gets or Sets Subscriptions
        /// </summary>
        [DataMember(Name="subscriptions", EmitDefaultValue=false)]
        public List<SubscriptionManifest> Subscriptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetentionPolicyManifest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReplicaN: ").Append(ReplicaN).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  ShardGroupDuration: ").Append(ShardGroupDuration).Append("\n");
            sb.Append("  ShardGroups: ").Append(ShardGroups).Append("\n");
            sb.Append("  Subscriptions: ").Append(Subscriptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RetentionPolicyManifest);
        }

        /// <summary>
        /// Returns true if RetentionPolicyManifest instances are equal
        /// </summary>
        /// <param name="input">Instance of RetentionPolicyManifest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetentionPolicyManifest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null && this.Name.Equals(input.Name))
                ) && 
                (
                    this.ReplicaN == input.ReplicaN ||
                    (this.ReplicaN != null && this.ReplicaN.Equals(input.ReplicaN))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null && this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.ShardGroupDuration == input.ShardGroupDuration ||
                    (this.ShardGroupDuration != null && this.ShardGroupDuration.Equals(input.ShardGroupDuration))
                ) && 
                (
                    this.ShardGroups == input.ShardGroups ||
                    this.ShardGroups != null &&
                    this.ShardGroups.SequenceEqual(input.ShardGroups)
                ) && 
                (
                    this.Subscriptions == input.Subscriptions ||
                    this.Subscriptions != null &&
                    this.Subscriptions.SequenceEqual(input.Subscriptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ReplicaN != null)
                    hashCode = hashCode * 59 + this.ReplicaN.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.ShardGroupDuration != null)
                    hashCode = hashCode * 59 + this.ShardGroupDuration.GetHashCode();
                if (this.ShardGroups != null)
                    hashCode = hashCode * 59 + this.ShardGroups.GetHashCode();
                if (this.Subscriptions != null)
                    hashCode = hashCode * 59 + this.Subscriptions.GetHashCode();
                return hashCode;
            }
        }

    }

}
