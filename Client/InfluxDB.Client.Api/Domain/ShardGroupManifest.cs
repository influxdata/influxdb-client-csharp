/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// ShardGroupManifest
    /// </summary>
    [DataContract]
    public partial class ShardGroupManifest : IEquatable<ShardGroupManifest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShardGroupManifest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShardGroupManifest()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShardGroupManifest" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="startTime">startTime (required).</param>
        /// <param name="endTime">endTime (required).</param>
        /// <param name="deletedAt">deletedAt.</param>
        /// <param name="truncatedAt">truncatedAt.</param>
        /// <param name="shards">shards (required).</param>
        public ShardGroupManifest(long? id = default, DateTime? startTime = default, DateTime? endTime = default,
            DateTime? deletedAt = default, DateTime? truncatedAt = default, List<ShardManifest> shards = default)
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ShardGroupManifest and cannot be null");
            }

            Id = id;
            // to ensure "startTime" is required (not null)
            if (startTime == null)
            {
                throw new InvalidDataException(
                    "startTime is a required property for ShardGroupManifest and cannot be null");
            }

            StartTime = startTime;
            // to ensure "endTime" is required (not null)
            if (endTime == null)
            {
                throw new InvalidDataException(
                    "endTime is a required property for ShardGroupManifest and cannot be null");
            }

            EndTime = endTime;
            // to ensure "shards" is required (not null)
            if (shards == null)
            {
                throw new InvalidDataException(
                    "shards is a required property for ShardGroupManifest and cannot be null");
            }

            Shards = shards;
            DeletedAt = deletedAt;
            TruncatedAt = truncatedAt;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [DataMember(Name = "deletedAt", EmitDefaultValue = false)]
        public DateTime? DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets TruncatedAt
        /// </summary>
        [DataMember(Name = "truncatedAt", EmitDefaultValue = false)]
        public DateTime? TruncatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Shards
        /// </summary>
        [DataMember(Name = "shards", EmitDefaultValue = false)]
        public List<ShardManifest> Shards { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShardGroupManifest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  TruncatedAt: ").Append(TruncatedAt).Append("\n");
            sb.Append("  Shards: ").Append(Shards).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ShardGroupManifest);
        }

        /// <summary>
        /// Returns true if ShardGroupManifest instances are equal
        /// </summary>
        /// <param name="input">Instance of ShardGroupManifest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShardGroupManifest input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Id == input.Id ||
                    Id != null && Id.Equals(input.Id)
                ) &&
                (
                    StartTime == input.StartTime ||
                    StartTime != null && StartTime.Equals(input.StartTime)
                ) &&
                (
                    EndTime == input.EndTime ||
                    EndTime != null && EndTime.Equals(input.EndTime)
                ) &&
                (
                    DeletedAt == input.DeletedAt ||
                    DeletedAt != null && DeletedAt.Equals(input.DeletedAt)
                ) &&
                (
                    TruncatedAt == input.TruncatedAt ||
                    TruncatedAt != null && TruncatedAt.Equals(input.TruncatedAt)
                ) &&
                (
                    Shards == input.Shards ||
                    Shards != null &&
                    Shards.SequenceEqual(input.Shards)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                if (Id != null)
                {
                    hashCode = hashCode * 59 + Id.GetHashCode();
                }

                if (StartTime != null)
                {
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                }

                if (EndTime != null)
                {
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                }

                if (DeletedAt != null)
                {
                    hashCode = hashCode * 59 + DeletedAt.GetHashCode();
                }

                if (TruncatedAt != null)
                {
                    hashCode = hashCode * 59 + TruncatedAt.GetHashCode();
                }

                if (Shards != null)
                {
                    hashCode = hashCode * 59 + Shards.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}