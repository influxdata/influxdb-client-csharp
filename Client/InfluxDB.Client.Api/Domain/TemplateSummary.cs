/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// TemplateSummary
    /// </summary>
    [DataContract]
    public partial class TemplateSummary : IEquatable<TemplateSummary>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateSummary" /> class.
        /// </summary>
        /// <param name="sources">sources.</param>
        /// <param name="stackID">stackID.</param>
        /// <param name="summary">summary.</param>
        /// <param name="diff">diff.</param>
        /// <param name="errors">errors.</param>
        public TemplateSummary(List<string> sources = default, string stackID = default,
            TemplateSummarySummary summary = default, TemplateSummaryDiff diff = default,
            List<TemplateSummaryErrors> errors = default)
        {
            Sources = sources;
            StackID = stackID;
            Summary = summary;
            Diff = diff;
            Errors = errors;
        }

        /// <summary>
        /// Gets or Sets Sources
        /// </summary>
        [DataMember(Name = "sources", EmitDefaultValue = false)]
        public List<string> Sources { get; set; }

        /// <summary>
        /// Gets or Sets StackID
        /// </summary>
        [DataMember(Name = "stackID", EmitDefaultValue = false)]
        public string StackID { get; set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name = "summary", EmitDefaultValue = false)]
        public TemplateSummarySummary Summary { get; set; }

        /// <summary>
        /// Gets or Sets Diff
        /// </summary>
        [DataMember(Name = "diff", EmitDefaultValue = false)]
        public TemplateSummaryDiff Diff { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name = "errors", EmitDefaultValue = false)]
        public List<TemplateSummaryErrors> Errors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemplateSummary {\n");
            sb.Append("  Sources: ").Append(Sources).Append("\n");
            sb.Append("  StackID: ").Append(StackID).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Diff: ").Append(Diff).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TemplateSummary);
        }

        /// <summary>
        /// Returns true if TemplateSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of TemplateSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplateSummary input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Sources == input.Sources ||
                    Sources != null &&
                    Sources.SequenceEqual(input.Sources)
                ) &&
                (
                    StackID == input.StackID ||
                    StackID != null && StackID.Equals(input.StackID)
                ) && Summary != null && Summary.Equals(input.Summary) && Diff != null && Diff.Equals(input.Diff) && (
                    Errors == input.Errors ||
                    Errors != null &&
                    Errors.SequenceEqual(input.Errors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                if (Sources != null)
                {
                    hashCode = hashCode * 59 + Sources.GetHashCode();
                }

                if (StackID != null)
                {
                    hashCode = hashCode * 59 + StackID.GetHashCode();
                }

                if (Summary != null)
                {
                    hashCode = hashCode * 59 + Summary.GetHashCode();
                }

                if (Diff != null)
                {
                    hashCode = hashCode * 59 + Diff.GetHashCode();
                }

                if (Errors != null)
                {
                    hashCode = hashCode * 59 + Errors.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}