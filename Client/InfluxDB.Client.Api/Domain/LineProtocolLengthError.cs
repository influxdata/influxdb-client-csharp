/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// LineProtocolLengthError
    /// </summary>
    [DataContract]
    public partial class LineProtocolLengthError : IEquatable<LineProtocolLengthError>
    {
        /// <summary>
        /// Code is the machine-readable error code.
        /// </summary>
        /// <value>Code is the machine-readable error code.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CodeEnum
        {
            /// <summary>
            /// Enum Invalid for value: invalid
            /// </summary>
            [EnumMember(Value = "invalid")] Invalid = 1
        }

        /// <summary>
        /// Code is the machine-readable error code.
        /// </summary>
        /// <value>Code is the machine-readable error code.</value>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public CodeEnum Code { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="LineProtocolLengthError" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public LineProtocolLengthError()
        {
        }


        /// <summary>
        /// Human-readable message.
        /// </summary>
        /// <value>Human-readable message.</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LineProtocolLengthError {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as LineProtocolLengthError);
        }

        /// <summary>
        /// Returns true if LineProtocolLengthError instances are equal
        /// </summary>
        /// <param name="input">Instance of LineProtocolLengthError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineProtocolLengthError input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Code == input.Code ||
                    Code.Equals(input.Code)
                ) &&
                (
                    Message == input.Message ||
                    Message != null && Message.Equals(input.Message)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                hashCode = hashCode * 59 + Code.GetHashCode();
                if (Message != null)
                {
                    hashCode = hashCode * 59 + Message.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}