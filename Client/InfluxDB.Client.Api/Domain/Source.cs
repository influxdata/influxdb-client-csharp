/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// Source
    /// </summary>
    [DataContract]
    public partial class Source : IEquatable<Source>
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum V1 for value: v1
            /// </summary>
            [EnumMember(Value = "v1")] V1 = 1,

            /// <summary>
            /// Enum V2 for value: v2
            /// </summary>
            [EnumMember(Value = "v2")] V2 = 2,

            /// <summary>
            /// Enum Self for value: self
            /// </summary>
            [EnumMember(Value = "self")] Self = 3
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Defines Languages
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguagesEnum
        {
            /// <summary>
            /// Enum Flux for value: flux
            /// </summary>
            [EnumMember(Value = "flux")] Flux = 1,

            /// <summary>
            /// Enum Influxql for value: influxql
            /// </summary>
            [EnumMember(Value = "influxql")] Influxql = 2
        }


        /// <summary>
        /// Gets or Sets Languages
        /// </summary>
        [DataMember(Name = "languages", EmitDefaultValue = false)]
        public List<LanguagesEnum> Languages { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="Source" /> class.
        /// </summary>
        /// <param name="links">links.</param>
        /// <param name="id">id.</param>
        /// <param name="orgID">orgID.</param>
        /// <param name="_default">_default.</param>
        /// <param name="name">name.</param>
        /// <param name="type">type.</param>
        /// <param name="url">url.</param>
        /// <param name="insecureSkipVerify">insecureSkipVerify.</param>
        /// <param name="telegraf">telegraf.</param>
        /// <param name="token">token.</param>
        /// <param name="username">username.</param>
        /// <param name="password">password.</param>
        /// <param name="sharedSecret">sharedSecret.</param>
        /// <param name="metaUrl">metaUrl.</param>
        /// <param name="defaultRP">defaultRP.</param>
        public Source(SourceLinks links = default, string id = default, string orgID = default,
            bool? _default = default, string name = default, TypeEnum? type = default, string url = default,
            bool? insecureSkipVerify = default, string telegraf = default, string token = default,
            string username = default, string password = default, string sharedSecret = default,
            string metaUrl = default, string defaultRP = default)
        {
            Links = links;
            Id = id;
            OrgID = orgID;
            Default = _default;
            Name = name;
            Type = type;
            Url = url;
            InsecureSkipVerify = insecureSkipVerify;
            Telegraf = telegraf;
            Token = token;
            Username = username;
            Password = password;
            SharedSecret = sharedSecret;
            MetaUrl = metaUrl;
            DefaultRP = defaultRP;
        }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public SourceLinks Links { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets OrgID
        /// </summary>
        [DataMember(Name = "orgID", EmitDefaultValue = false)]
        public string OrgID { get; set; }

        /// <summary>
        /// Gets or Sets Default
        /// </summary>
        [DataMember(Name = "default", EmitDefaultValue = false)]
        public bool? Default { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }


        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets InsecureSkipVerify
        /// </summary>
        [DataMember(Name = "insecureSkipVerify", EmitDefaultValue = false)]
        public bool? InsecureSkipVerify { get; set; }

        /// <summary>
        /// Gets or Sets Telegraf
        /// </summary>
        [DataMember(Name = "telegraf", EmitDefaultValue = false)]
        public string Telegraf { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets SharedSecret
        /// </summary>
        [DataMember(Name = "sharedSecret", EmitDefaultValue = false)]
        public string SharedSecret { get; set; }

        /// <summary>
        /// Gets or Sets MetaUrl
        /// </summary>
        [DataMember(Name = "metaUrl", EmitDefaultValue = false)]
        public string MetaUrl { get; set; }

        /// <summary>
        /// Gets or Sets DefaultRP
        /// </summary>
        [DataMember(Name = "defaultRP", EmitDefaultValue = false)]
        public string DefaultRP { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Source {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrgID: ").Append(OrgID).Append("\n");
            sb.Append("  Default: ").Append(Default).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  InsecureSkipVerify: ").Append(InsecureSkipVerify).Append("\n");
            sb.Append("  Telegraf: ").Append(Telegraf).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  SharedSecret: ").Append(SharedSecret).Append("\n");
            sb.Append("  MetaUrl: ").Append(MetaUrl).Append("\n");
            sb.Append("  DefaultRP: ").Append(DefaultRP).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Source);
        }

        /// <summary>
        /// Returns true if Source instances are equal
        /// </summary>
        /// <param name="input">Instance of Source to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Source input)
        {
            if (input == null)
            {
                return false;
            }

            return
                Links != null && Links.Equals(input.Links) &&
                (
                    Id == input.Id ||
                    Id != null && Id.Equals(input.Id)
                ) &&
                (
                    OrgID == input.OrgID ||
                    OrgID != null && OrgID.Equals(input.OrgID)
                ) &&
                (
                    Default == input.Default ||
                    Default != null && Default.Equals(input.Default)
                ) &&
                (
                    Name == input.Name ||
                    Name != null && Name.Equals(input.Name)
                ) &&
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) &&
                (
                    Url == input.Url ||
                    Url != null && Url.Equals(input.Url)
                ) &&
                (
                    InsecureSkipVerify == input.InsecureSkipVerify ||
                    InsecureSkipVerify != null && InsecureSkipVerify.Equals(input.InsecureSkipVerify)
                ) &&
                (
                    Telegraf == input.Telegraf ||
                    Telegraf != null && Telegraf.Equals(input.Telegraf)
                ) &&
                (
                    Token == input.Token ||
                    Token != null && Token.Equals(input.Token)
                ) &&
                (
                    Username == input.Username ||
                    Username != null && Username.Equals(input.Username)
                ) &&
                (
                    Password == input.Password ||
                    Password != null && Password.Equals(input.Password)
                ) &&
                (
                    SharedSecret == input.SharedSecret ||
                    SharedSecret != null && SharedSecret.Equals(input.SharedSecret)
                ) &&
                (
                    MetaUrl == input.MetaUrl ||
                    MetaUrl != null && MetaUrl.Equals(input.MetaUrl)
                ) &&
                (
                    DefaultRP == input.DefaultRP ||
                    DefaultRP != null && DefaultRP.Equals(input.DefaultRP)
                ) &&
                (
                    Languages == input.Languages ||
                    Languages != null &&
                    Languages.SequenceEqual(input.Languages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                if (Links != null)
                {
                    hashCode = hashCode * 59 + Links.GetHashCode();
                }

                if (Id != null)
                {
                    hashCode = hashCode * 59 + Id.GetHashCode();
                }

                if (OrgID != null)
                {
                    hashCode = hashCode * 59 + OrgID.GetHashCode();
                }

                if (Default != null)
                {
                    hashCode = hashCode * 59 + Default.GetHashCode();
                }

                if (Name != null)
                {
                    hashCode = hashCode * 59 + Name.GetHashCode();
                }

                hashCode = hashCode * 59 + Type.GetHashCode();
                if (Url != null)
                {
                    hashCode = hashCode * 59 + Url.GetHashCode();
                }

                if (InsecureSkipVerify != null)
                {
                    hashCode = hashCode * 59 + InsecureSkipVerify.GetHashCode();
                }

                if (Telegraf != null)
                {
                    hashCode = hashCode * 59 + Telegraf.GetHashCode();
                }

                if (Token != null)
                {
                    hashCode = hashCode * 59 + Token.GetHashCode();
                }

                if (Username != null)
                {
                    hashCode = hashCode * 59 + Username.GetHashCode();
                }

                if (Password != null)
                {
                    hashCode = hashCode * 59 + Password.GetHashCode();
                }

                if (SharedSecret != null)
                {
                    hashCode = hashCode * 59 + SharedSecret.GetHashCode();
                }

                if (MetaUrl != null)
                {
                    hashCode = hashCode * 59 + MetaUrl.GetHashCode();
                }

                if (DefaultRP != null)
                {
                    hashCode = hashCode * 59 + DefaultRP.GetHashCode();
                }

                hashCode = hashCode * 59 + Languages.GetHashCode();
                return hashCode;
            }
        }
    }
}