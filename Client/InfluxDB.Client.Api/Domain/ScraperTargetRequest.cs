/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// ScraperTargetRequest
    /// </summary>
    [DataContract]
    public partial class ScraperTargetRequest : IEquatable<ScraperTargetRequest>
    {
        /// <summary>
        /// The type of the metrics to be parsed.
        /// </summary>
        /// <value>The type of the metrics to be parsed.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Prometheus for value: prometheus
            /// </summary>
            [EnumMember(Value = "prometheus")] Prometheus = 1
        }

        /// <summary>
        /// The type of the metrics to be parsed.
        /// </summary>
        /// <value>The type of the metrics to be parsed.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScraperTargetRequest" /> class.
        /// </summary>
        /// <param name="name">The name of the scraper target..</param>
        /// <param name="type">The type of the metrics to be parsed..</param>
        /// <param name="url">The URL of the metrics endpoint..</param>
        /// <param name="orgID">The organization ID..</param>
        /// <param name="bucketID">The ID of the bucket to write to..</param>
        /// <param name="allowInsecure">Skip TLS verification on endpoint. (default to false).</param>
        public ScraperTargetRequest(string name = default, TypeEnum? type = default, string url = default,
            string orgID = default, string bucketID = default, bool? allowInsecure = false)
        {
            Name = name;
            Type = type;
            Url = url;
            OrgID = orgID;
            BucketID = bucketID;
            // use default value if no "allowInsecure" provided
            if (allowInsecure == null)
            {
                AllowInsecure = false;
            }
            else
            {
                AllowInsecure = allowInsecure;
            }
        }

        /// <summary>
        /// The name of the scraper target.
        /// </summary>
        /// <value>The name of the scraper target.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }


        /// <summary>
        /// The URL of the metrics endpoint.
        /// </summary>
        /// <value>The URL of the metrics endpoint.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// The organization ID.
        /// </summary>
        /// <value>The organization ID.</value>
        [DataMember(Name = "orgID", EmitDefaultValue = false)]
        public string OrgID { get; set; }

        /// <summary>
        /// The ID of the bucket to write to.
        /// </summary>
        /// <value>The ID of the bucket to write to.</value>
        [DataMember(Name = "bucketID", EmitDefaultValue = false)]
        public string BucketID { get; set; }

        /// <summary>
        /// Skip TLS verification on endpoint.
        /// </summary>
        /// <value>Skip TLS verification on endpoint.</value>
        [DataMember(Name = "allowInsecure", EmitDefaultValue = false)]
        public bool? AllowInsecure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScraperTargetRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  OrgID: ").Append(OrgID).Append("\n");
            sb.Append("  BucketID: ").Append(BucketID).Append("\n");
            sb.Append("  AllowInsecure: ").Append(AllowInsecure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ScraperTargetRequest);
        }

        /// <summary>
        /// Returns true if ScraperTargetRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ScraperTargetRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScraperTargetRequest input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Name == input.Name ||
                    Name != null && Name.Equals(input.Name)
                ) &&
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) &&
                (
                    Url == input.Url ||
                    Url != null && Url.Equals(input.Url)
                ) &&
                (
                    OrgID == input.OrgID ||
                    OrgID != null && OrgID.Equals(input.OrgID)
                ) &&
                (
                    BucketID == input.BucketID ||
                    BucketID != null && BucketID.Equals(input.BucketID)
                ) &&
                (
                    AllowInsecure == input.AllowInsecure ||
                    AllowInsecure != null && AllowInsecure.Equals(input.AllowInsecure)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                if (Name != null)
                {
                    hashCode = hashCode * 59 + Name.GetHashCode();
                }

                hashCode = hashCode * 59 + Type.GetHashCode();
                if (Url != null)
                {
                    hashCode = hashCode * 59 + Url.GetHashCode();
                }

                if (OrgID != null)
                {
                    hashCode = hashCode * 59 + OrgID.GetHashCode();
                }

                if (BucketID != null)
                {
                    hashCode = hashCode * 59 + BucketID.GetHashCode();
                }

                if (AllowInsecure != null)
                {
                    hashCode = hashCode * 59 + AllowInsecure.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}