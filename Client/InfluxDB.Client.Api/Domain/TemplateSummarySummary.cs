/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// TemplateSummarySummary
    /// </summary>
    [DataContract]
    public partial class TemplateSummarySummary : IEquatable<TemplateSummarySummary>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateSummarySummary" /> class.
        /// </summary>
        /// <param name="buckets">buckets.</param>
        /// <param name="checks">checks.</param>
        /// <param name="dashboards">dashboards.</param>
        /// <param name="labels">labels.</param>
        /// <param name="labelMappings">labelMappings.</param>
        /// <param name="missingEnvRefs">missingEnvRefs.</param>
        /// <param name="missingSecrets">missingSecrets.</param>
        /// <param name="notificationEndpoints">notificationEndpoints.</param>
        /// <param name="notificationRules">notificationRules.</param>
        /// <param name="tasks">tasks.</param>
        /// <param name="telegrafConfigs">telegrafConfigs.</param>
        /// <param name="variables">variables.</param>
        public TemplateSummarySummary(List<TemplateSummarySummaryBuckets> buckets = default,
            List<CheckDiscriminator> checks = default, List<TemplateSummarySummaryDashboards> dashboards = default,
            List<TemplateSummaryLabel> labels = default,
            List<TemplateSummarySummaryLabelMappings> labelMappings = default, List<string> missingEnvRefs = default,
            List<string> missingSecrets = default,
            List<NotificationEndpointDiscriminator> notificationEndpoints = default,
            List<TemplateSummarySummaryNotificationRules> notificationRules = default,
            List<TemplateSummarySummaryTasks> tasks = default, List<TelegrafRequest> telegrafConfigs = default,
            List<TemplateSummarySummaryVariables> variables = default)
        {
            Buckets = buckets;
            Checks = checks;
            Dashboards = dashboards;
            Labels = labels;
            LabelMappings = labelMappings;
            MissingEnvRefs = missingEnvRefs;
            MissingSecrets = missingSecrets;
            NotificationEndpoints = notificationEndpoints;
            NotificationRules = notificationRules;
            Tasks = tasks;
            TelegrafConfigs = telegrafConfigs;
            Variables = variables;
        }

        /// <summary>
        /// Gets or Sets Buckets
        /// </summary>
        [DataMember(Name = "buckets", EmitDefaultValue = false)]
        public List<TemplateSummarySummaryBuckets> Buckets { get; set; }

        /// <summary>
        /// Gets or Sets Checks
        /// </summary>
        [DataMember(Name = "checks", EmitDefaultValue = false)]
        public List<CheckDiscriminator> Checks { get; set; }

        /// <summary>
        /// Gets or Sets Dashboards
        /// </summary>
        [DataMember(Name = "dashboards", EmitDefaultValue = false)]
        public List<TemplateSummarySummaryDashboards> Dashboards { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name = "labels", EmitDefaultValue = false)]
        public List<TemplateSummaryLabel> Labels { get; set; }

        /// <summary>
        /// Gets or Sets LabelMappings
        /// </summary>
        [DataMember(Name = "labelMappings", EmitDefaultValue = false)]
        public List<TemplateSummarySummaryLabelMappings> LabelMappings { get; set; }

        /// <summary>
        /// Gets or Sets MissingEnvRefs
        /// </summary>
        [DataMember(Name = "missingEnvRefs", EmitDefaultValue = false)]
        public List<string> MissingEnvRefs { get; set; }

        /// <summary>
        /// Gets or Sets MissingSecrets
        /// </summary>
        [DataMember(Name = "missingSecrets", EmitDefaultValue = false)]
        public List<string> MissingSecrets { get; set; }

        /// <summary>
        /// Gets or Sets NotificationEndpoints
        /// </summary>
        [DataMember(Name = "notificationEndpoints", EmitDefaultValue = false)]
        public List<NotificationEndpointDiscriminator> NotificationEndpoints { get; set; }

        /// <summary>
        /// Gets or Sets NotificationRules
        /// </summary>
        [DataMember(Name = "notificationRules", EmitDefaultValue = false)]
        public List<TemplateSummarySummaryNotificationRules> NotificationRules { get; set; }

        /// <summary>
        /// Gets or Sets Tasks
        /// </summary>
        [DataMember(Name = "tasks", EmitDefaultValue = false)]
        public List<TemplateSummarySummaryTasks> Tasks { get; set; }

        /// <summary>
        /// Gets or Sets TelegrafConfigs
        /// </summary>
        [DataMember(Name = "telegrafConfigs", EmitDefaultValue = false)]
        public List<TelegrafRequest> TelegrafConfigs { get; set; }

        /// <summary>
        /// Gets or Sets Variables
        /// </summary>
        [DataMember(Name = "variables", EmitDefaultValue = false)]
        public List<TemplateSummarySummaryVariables> Variables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemplateSummarySummary {\n");
            sb.Append("  Buckets: ").Append(Buckets).Append("\n");
            sb.Append("  Checks: ").Append(Checks).Append("\n");
            sb.Append("  Dashboards: ").Append(Dashboards).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  LabelMappings: ").Append(LabelMappings).Append("\n");
            sb.Append("  MissingEnvRefs: ").Append(MissingEnvRefs).Append("\n");
            sb.Append("  MissingSecrets: ").Append(MissingSecrets).Append("\n");
            sb.Append("  NotificationEndpoints: ").Append(NotificationEndpoints).Append("\n");
            sb.Append("  NotificationRules: ").Append(NotificationRules).Append("\n");
            sb.Append("  Tasks: ").Append(Tasks).Append("\n");
            sb.Append("  TelegrafConfigs: ").Append(TelegrafConfigs).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TemplateSummarySummary);
        }

        /// <summary>
        /// Returns true if TemplateSummarySummary instances are equal
        /// </summary>
        /// <param name="input">Instance of TemplateSummarySummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplateSummarySummary input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Buckets == input.Buckets ||
                    Buckets != null &&
                    Buckets.SequenceEqual(input.Buckets)
                ) &&
                (
                    Checks == input.Checks ||
                    Checks != null &&
                    Checks.SequenceEqual(input.Checks)
                ) &&
                (
                    Dashboards == input.Dashboards ||
                    Dashboards != null &&
                    Dashboards.SequenceEqual(input.Dashboards)
                ) &&
                (
                    Labels == input.Labels ||
                    Labels != null &&
                    Labels.SequenceEqual(input.Labels)
                ) &&
                (
                    LabelMappings == input.LabelMappings ||
                    LabelMappings != null &&
                    LabelMappings.SequenceEqual(input.LabelMappings)
                ) &&
                (
                    MissingEnvRefs == input.MissingEnvRefs ||
                    MissingEnvRefs != null &&
                    MissingEnvRefs.SequenceEqual(input.MissingEnvRefs)
                ) &&
                (
                    MissingSecrets == input.MissingSecrets ||
                    MissingSecrets != null &&
                    MissingSecrets.SequenceEqual(input.MissingSecrets)
                ) &&
                (
                    NotificationEndpoints == input.NotificationEndpoints ||
                    NotificationEndpoints != null &&
                    NotificationEndpoints.SequenceEqual(input.NotificationEndpoints)
                ) &&
                (
                    NotificationRules == input.NotificationRules ||
                    NotificationRules != null &&
                    NotificationRules.SequenceEqual(input.NotificationRules)
                ) &&
                (
                    Tasks == input.Tasks ||
                    Tasks != null &&
                    Tasks.SequenceEqual(input.Tasks)
                ) &&
                (
                    TelegrafConfigs == input.TelegrafConfigs ||
                    TelegrafConfigs != null &&
                    TelegrafConfigs.SequenceEqual(input.TelegrafConfigs)
                ) &&
                (
                    Variables == input.Variables ||
                    Variables != null &&
                    Variables.SequenceEqual(input.Variables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                if (Buckets != null)
                {
                    hashCode = hashCode * 59 + Buckets.GetHashCode();
                }

                if (Checks != null)
                {
                    hashCode = hashCode * 59 + Checks.GetHashCode();
                }

                if (Dashboards != null)
                {
                    hashCode = hashCode * 59 + Dashboards.GetHashCode();
                }

                if (Labels != null)
                {
                    hashCode = hashCode * 59 + Labels.GetHashCode();
                }

                if (LabelMappings != null)
                {
                    hashCode = hashCode * 59 + LabelMappings.GetHashCode();
                }

                if (MissingEnvRefs != null)
                {
                    hashCode = hashCode * 59 + MissingEnvRefs.GetHashCode();
                }

                if (MissingSecrets != null)
                {
                    hashCode = hashCode * 59 + MissingSecrets.GetHashCode();
                }

                if (NotificationEndpoints != null)
                {
                    hashCode = hashCode * 59 + NotificationEndpoints.GetHashCode();
                }

                if (NotificationRules != null)
                {
                    hashCode = hashCode * 59 + NotificationRules.GetHashCode();
                }

                if (Tasks != null)
                {
                    hashCode = hashCode * 59 + Tasks.GetHashCode();
                }

                if (TelegrafConfigs != null)
                {
                    hashCode = hashCode * 59 + TelegrafConfigs.GetHashCode();
                }

                if (Variables != null)
                {
                    hashCode = hashCode * 59 + Variables.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}