/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// TemplateSummarySummary
    /// </summary>
    [DataContract]
    public partial class TemplateSummarySummary :  IEquatable<TemplateSummarySummary>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateSummarySummary" /> class.
        /// </summary>
        /// <param name="buckets">buckets.</param>
        /// <param name="checks">checks.</param>
        /// <param name="dashboards">dashboards.</param>
        /// <param name="labels">labels.</param>
        /// <param name="labelMappings">labelMappings.</param>
        /// <param name="missingEnvRefs">missingEnvRefs.</param>
        /// <param name="missingSecrets">missingSecrets.</param>
        /// <param name="notificationEndpoints">notificationEndpoints.</param>
        /// <param name="notificationRules">notificationRules.</param>
        /// <param name="tasks">tasks.</param>
        /// <param name="telegrafConfigs">telegrafConfigs.</param>
        /// <param name="variables">variables.</param>
        public TemplateSummarySummary(List<TemplateSummarySummaryBuckets> buckets = default(List<TemplateSummarySummaryBuckets>), List<CheckDiscriminator> checks = default(List<CheckDiscriminator>), List<TemplateSummarySummaryDashboards> dashboards = default(List<TemplateSummarySummaryDashboards>), List<TemplateSummaryLabel> labels = default(List<TemplateSummaryLabel>), List<TemplateSummarySummaryLabelMappings> labelMappings = default(List<TemplateSummarySummaryLabelMappings>), List<string> missingEnvRefs = default(List<string>), List<string> missingSecrets = default(List<string>), List<NotificationEndpointDiscriminator> notificationEndpoints = default(List<NotificationEndpointDiscriminator>), List<TemplateSummarySummaryNotificationRules> notificationRules = default(List<TemplateSummarySummaryNotificationRules>), List<TemplateSummarySummaryTasks> tasks = default(List<TemplateSummarySummaryTasks>), List<TelegrafRequest> telegrafConfigs = default(List<TelegrafRequest>), List<TemplateSummarySummaryVariables> variables = default(List<TemplateSummarySummaryVariables>))
        {
            this.Buckets = buckets;
            this.Checks = checks;
            this.Dashboards = dashboards;
            this.Labels = labels;
            this.LabelMappings = labelMappings;
            this.MissingEnvRefs = missingEnvRefs;
            this.MissingSecrets = missingSecrets;
            this.NotificationEndpoints = notificationEndpoints;
            this.NotificationRules = notificationRules;
            this.Tasks = tasks;
            this.TelegrafConfigs = telegrafConfigs;
            this.Variables = variables;
        }

        /// <summary>
        /// Gets or Sets Buckets
        /// </summary>
        [DataMember(Name="buckets", EmitDefaultValue=false)]
        public List<TemplateSummarySummaryBuckets> Buckets { get; set; }

        /// <summary>
        /// Gets or Sets Checks
        /// </summary>
        [DataMember(Name="checks", EmitDefaultValue=false)]
        public List<CheckDiscriminator> Checks { get; set; }

        /// <summary>
        /// Gets or Sets Dashboards
        /// </summary>
        [DataMember(Name="dashboards", EmitDefaultValue=false)]
        public List<TemplateSummarySummaryDashboards> Dashboards { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name="labels", EmitDefaultValue=false)]
        public List<TemplateSummaryLabel> Labels { get; set; }

        /// <summary>
        /// Gets or Sets LabelMappings
        /// </summary>
        [DataMember(Name="labelMappings", EmitDefaultValue=false)]
        public List<TemplateSummarySummaryLabelMappings> LabelMappings { get; set; }

        /// <summary>
        /// Gets or Sets MissingEnvRefs
        /// </summary>
        [DataMember(Name="missingEnvRefs", EmitDefaultValue=false)]
        public List<string> MissingEnvRefs { get; set; }

        /// <summary>
        /// Gets or Sets MissingSecrets
        /// </summary>
        [DataMember(Name="missingSecrets", EmitDefaultValue=false)]
        public List<string> MissingSecrets { get; set; }

        /// <summary>
        /// Gets or Sets NotificationEndpoints
        /// </summary>
        [DataMember(Name="notificationEndpoints", EmitDefaultValue=false)]
        public List<NotificationEndpointDiscriminator> NotificationEndpoints { get; set; }

        /// <summary>
        /// Gets or Sets NotificationRules
        /// </summary>
        [DataMember(Name="notificationRules", EmitDefaultValue=false)]
        public List<TemplateSummarySummaryNotificationRules> NotificationRules { get; set; }

        /// <summary>
        /// Gets or Sets Tasks
        /// </summary>
        [DataMember(Name="tasks", EmitDefaultValue=false)]
        public List<TemplateSummarySummaryTasks> Tasks { get; set; }

        /// <summary>
        /// Gets or Sets TelegrafConfigs
        /// </summary>
        [DataMember(Name="telegrafConfigs", EmitDefaultValue=false)]
        public List<TelegrafRequest> TelegrafConfigs { get; set; }

        /// <summary>
        /// Gets or Sets Variables
        /// </summary>
        [DataMember(Name="variables", EmitDefaultValue=false)]
        public List<TemplateSummarySummaryVariables> Variables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemplateSummarySummary {\n");
            sb.Append("  Buckets: ").Append(Buckets).Append("\n");
            sb.Append("  Checks: ").Append(Checks).Append("\n");
            sb.Append("  Dashboards: ").Append(Dashboards).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  LabelMappings: ").Append(LabelMappings).Append("\n");
            sb.Append("  MissingEnvRefs: ").Append(MissingEnvRefs).Append("\n");
            sb.Append("  MissingSecrets: ").Append(MissingSecrets).Append("\n");
            sb.Append("  NotificationEndpoints: ").Append(NotificationEndpoints).Append("\n");
            sb.Append("  NotificationRules: ").Append(NotificationRules).Append("\n");
            sb.Append("  Tasks: ").Append(Tasks).Append("\n");
            sb.Append("  TelegrafConfigs: ").Append(TelegrafConfigs).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemplateSummarySummary);
        }

        /// <summary>
        /// Returns true if TemplateSummarySummary instances are equal
        /// </summary>
        /// <param name="input">Instance of TemplateSummarySummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplateSummarySummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Buckets == input.Buckets ||
                    this.Buckets != null &&
                    this.Buckets.SequenceEqual(input.Buckets)
                ) && 
                (
                    this.Checks == input.Checks ||
                    this.Checks != null &&
                    this.Checks.SequenceEqual(input.Checks)
                ) && 
                (
                    this.Dashboards == input.Dashboards ||
                    this.Dashboards != null &&
                    this.Dashboards.SequenceEqual(input.Dashboards)
                ) && 
                (
                    this.Labels == input.Labels ||
                    this.Labels != null &&
                    this.Labels.SequenceEqual(input.Labels)
                ) && 
                (
                    this.LabelMappings == input.LabelMappings ||
                    this.LabelMappings != null &&
                    this.LabelMappings.SequenceEqual(input.LabelMappings)
                ) && 
                (
                    this.MissingEnvRefs == input.MissingEnvRefs ||
                    this.MissingEnvRefs != null &&
                    this.MissingEnvRefs.SequenceEqual(input.MissingEnvRefs)
                ) && 
                (
                    this.MissingSecrets == input.MissingSecrets ||
                    this.MissingSecrets != null &&
                    this.MissingSecrets.SequenceEqual(input.MissingSecrets)
                ) && 
                (
                    this.NotificationEndpoints == input.NotificationEndpoints ||
                    this.NotificationEndpoints != null &&
                    this.NotificationEndpoints.SequenceEqual(input.NotificationEndpoints)
                ) && 
                (
                    this.NotificationRules == input.NotificationRules ||
                    this.NotificationRules != null &&
                    this.NotificationRules.SequenceEqual(input.NotificationRules)
                ) && 
                (
                    this.Tasks == input.Tasks ||
                    this.Tasks != null &&
                    this.Tasks.SequenceEqual(input.Tasks)
                ) && 
                (
                    this.TelegrafConfigs == input.TelegrafConfigs ||
                    this.TelegrafConfigs != null &&
                    this.TelegrafConfigs.SequenceEqual(input.TelegrafConfigs)
                ) && 
                (
                    this.Variables == input.Variables ||
                    this.Variables != null &&
                    this.Variables.SequenceEqual(input.Variables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Buckets != null)
                    hashCode = hashCode * 59 + this.Buckets.GetHashCode();
                if (this.Checks != null)
                    hashCode = hashCode * 59 + this.Checks.GetHashCode();
                if (this.Dashboards != null)
                    hashCode = hashCode * 59 + this.Dashboards.GetHashCode();
                if (this.Labels != null)
                    hashCode = hashCode * 59 + this.Labels.GetHashCode();
                if (this.LabelMappings != null)
                    hashCode = hashCode * 59 + this.LabelMappings.GetHashCode();
                if (this.MissingEnvRefs != null)
                    hashCode = hashCode * 59 + this.MissingEnvRefs.GetHashCode();
                if (this.MissingSecrets != null)
                    hashCode = hashCode * 59 + this.MissingSecrets.GetHashCode();
                if (this.NotificationEndpoints != null)
                    hashCode = hashCode * 59 + this.NotificationEndpoints.GetHashCode();
                if (this.NotificationRules != null)
                    hashCode = hashCode * 59 + this.NotificationRules.GetHashCode();
                if (this.Tasks != null)
                    hashCode = hashCode * 59 + this.Tasks.GetHashCode();
                if (this.TelegrafConfigs != null)
                    hashCode = hashCode * 59 + this.TelegrafConfigs.GetHashCode();
                if (this.Variables != null)
                    hashCode = hashCode * 59 + this.Variables.GetHashCode();
                return hashCode;
            }
        }

    }

}
