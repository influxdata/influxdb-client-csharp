/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// Ready
    /// </summary>
    [DataContract]
    public partial class Ready : IEquatable<Ready>
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Ready for value: ready
            /// </summary>
            [EnumMember(Value = "ready")] Ready = 1
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="Ready" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="started">started.</param>
        /// <param name="up">up.</param>
        public Ready(StatusEnum? status = default, DateTime? started = default, string up = default)
        {
            Status = status;
            Started = started;
            Up = up;
        }


        /// <summary>
        /// Gets or Sets Started
        /// </summary>
        [DataMember(Name = "started", EmitDefaultValue = false)]
        public DateTime? Started { get; set; }

        /// <summary>
        /// Gets or Sets Up
        /// </summary>
        [DataMember(Name = "up", EmitDefaultValue = false)]
        public string Up { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ready {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Started: ").Append(Started).Append("\n");
            sb.Append("  Up: ").Append(Up).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Ready);
        }

        /// <summary>
        /// Returns true if Ready instances are equal
        /// </summary>
        /// <param name="input">Instance of Ready to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ready input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Status == input.Status ||
                    Status.Equals(input.Status)
                ) &&
                (
                    Started == input.Started ||
                    Started != null && Started.Equals(input.Started)
                ) &&
                (
                    Up == input.Up ||
                    Up != null && Up.Equals(input.Up)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                hashCode = hashCode * 59 + Status.GetHashCode();
                if (Started != null)
                {
                    hashCode = hashCode * 59 + Started.GetHashCode();
                }

                if (Up != null)
                {
                    hashCode = hashCode * 59 + Up.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}