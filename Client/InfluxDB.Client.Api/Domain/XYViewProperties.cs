/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// XYViewProperties
    /// </summary>
    [DataContract]
    public partial class XYViewProperties : ViewProperties, IEquatable<XYViewProperties>
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Xy for value: xy
            /// </summary>
            [EnumMember(Value = "xy")] Xy = 1
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Defines Shape
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShapeEnum
        {
            /// <summary>
            /// Enum ChronografV2 for value: chronograf-v2
            /// </summary>
            [EnumMember(Value = "chronograf-v2")] ChronografV2 = 1
        }

        /// <summary>
        /// Gets or Sets Shape
        /// </summary>
        [DataMember(Name = "shape", EmitDefaultValue = false)]
        public ShapeEnum Shape { get; set; }

        /// <summary>
        /// Defines HoverDimension
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HoverDimensionEnum
        {
            /// <summary>
            /// Enum Auto for value: auto
            /// </summary>
            [EnumMember(Value = "auto")] Auto = 1,

            /// <summary>
            /// Enum X for value: x
            /// </summary>
            [EnumMember(Value = "x")] X = 2,

            /// <summary>
            /// Enum Y for value: y
            /// </summary>
            [EnumMember(Value = "y")] Y = 3,

            /// <summary>
            /// Enum Xy for value: xy
            /// </summary>
            [EnumMember(Value = "xy")] Xy = 4
        }

        /// <summary>
        /// Gets or Sets HoverDimension
        /// </summary>
        [DataMember(Name = "hoverDimension", EmitDefaultValue = false)]
        public HoverDimensionEnum? HoverDimension { get; set; }

        /// <summary>
        /// Defines Position
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PositionEnum
        {
            /// <summary>
            /// Enum Overlaid for value: overlaid
            /// </summary>
            [EnumMember(Value = "overlaid")] Overlaid = 1,

            /// <summary>
            /// Enum Stacked for value: stacked
            /// </summary>
            [EnumMember(Value = "stacked")] Stacked = 2
        }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", EmitDefaultValue = false)]
        public PositionEnum Position { get; set; }

        /// <summary>
        /// Gets or Sets Geom
        /// </summary>
        [DataMember(Name = "geom", EmitDefaultValue = false)]
        public XYGeom Geom { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="XYViewProperties" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected XYViewProperties()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="XYViewProperties" /> class.
        /// </summary>
        /// <param name="timeFormat">timeFormat.</param>
        /// <param name="type">type (required) (default to TypeEnum.Xy).</param>
        /// <param name="queries">queries (required).</param>
        /// <param name="colors">Colors define color encoding of data into a visualization (required).</param>
        /// <param name="colorMapping">A color mapping is an object that maps time series data to a UI color scheme to allow the UI to render graphs consistent colors across reloads..</param>
        /// <param name="shape">shape (required) (default to ShapeEnum.ChronografV2).</param>
        /// <param name="note">note (required).</param>
        /// <param name="showNoteWhenEmpty">If true, will display note when empty (required).</param>
        /// <param name="axes">axes (required).</param>
        /// <param name="staticLegend">staticLegend.</param>
        /// <param name="xColumn">xColumn.</param>
        /// <param name="generateXAxisTicks">generateXAxisTicks.</param>
        /// <param name="xTotalTicks">xTotalTicks.</param>
        /// <param name="xTickStart">xTickStart.</param>
        /// <param name="xTickStep">xTickStep.</param>
        /// <param name="yColumn">yColumn.</param>
        /// <param name="generateYAxisTicks">generateYAxisTicks.</param>
        /// <param name="yTotalTicks">yTotalTicks.</param>
        /// <param name="yTickStart">yTickStart.</param>
        /// <param name="yTickStep">yTickStep.</param>
        /// <param name="shadeBelow">shadeBelow.</param>
        /// <param name="hoverDimension">hoverDimension.</param>
        /// <param name="position">position (required).</param>
        /// <param name="geom">geom (required).</param>
        /// <param name="legendColorizeRows">legendColorizeRows.</param>
        /// <param name="legendHide">legendHide.</param>
        /// <param name="legendOpacity">legendOpacity.</param>
        /// <param name="legendOrientationThreshold">legendOrientationThreshold.</param>
        public XYViewProperties(string timeFormat = default, TypeEnum type = TypeEnum.Xy,
            List<DashboardQuery> queries = default, List<DashboardColor> colors = default,
            Dictionary<string, string> colorMapping = default, ShapeEnum shape = ShapeEnum.ChronografV2,
            string note = default, bool? showNoteWhenEmpty = default, Axes axes = default,
            StaticLegend staticLegend = default, string xColumn = default, List<string> generateXAxisTicks = default,
            int? xTotalTicks = default, float? xTickStart = default, float? xTickStep = default,
            string yColumn = default, List<string> generateYAxisTicks = default, int? yTotalTicks = default,
            float? yTickStart = default, float? yTickStep = default, bool? shadeBelow = default,
            HoverDimensionEnum? hoverDimension = default, PositionEnum position = default, XYGeom geom = default,
            bool? legendColorizeRows = default, bool? legendHide = default, float? legendOpacity = default,
            int? legendOrientationThreshold = default) : base()
        {
            // to ensure "type" is required (not null)
            Type = type;
            // to ensure "queries" is required (not null)
            if (queries == null)
            {
                throw new InvalidDataException(
                    "queries is a required property for XYViewProperties and cannot be null");
            }

            Queries = queries;
            // to ensure "colors" is required (not null)
            if (colors == null)
            {
                throw new InvalidDataException("colors is a required property for XYViewProperties and cannot be null");
            }

            Colors = colors;
            // to ensure "shape" is required (not null)
            Shape = shape;
            // to ensure "note" is required (not null)
            if (note == null)
            {
                throw new InvalidDataException("note is a required property for XYViewProperties and cannot be null");
            }

            Note = note;
            // to ensure "showNoteWhenEmpty" is required (not null)
            if (showNoteWhenEmpty == null)
            {
                throw new InvalidDataException(
                    "showNoteWhenEmpty is a required property for XYViewProperties and cannot be null");
            }

            ShowNoteWhenEmpty = showNoteWhenEmpty;
            // to ensure "axes" is required (not null)
            if (axes == null)
            {
                throw new InvalidDataException("axes is a required property for XYViewProperties and cannot be null");
            }

            Axes = axes;
            // to ensure "position" is required (not null)
            Position = position;
            // to ensure "geom" is required (not null)
            Geom = geom;
            TimeFormat = timeFormat;
            ColorMapping = colorMapping;
            StaticLegend = staticLegend;
            XColumn = xColumn;
            GenerateXAxisTicks = generateXAxisTicks;
            XTotalTicks = xTotalTicks;
            XTickStart = xTickStart;
            XTickStep = xTickStep;
            YColumn = yColumn;
            GenerateYAxisTicks = generateYAxisTicks;
            YTotalTicks = yTotalTicks;
            YTickStart = yTickStart;
            YTickStep = yTickStep;
            ShadeBelow = shadeBelow;
            HoverDimension = hoverDimension;
            LegendColorizeRows = legendColorizeRows;
            LegendHide = legendHide;
            LegendOpacity = legendOpacity;
            LegendOrientationThreshold = legendOrientationThreshold;
        }

        /// <summary>
        /// Gets or Sets TimeFormat
        /// </summary>
        [DataMember(Name = "timeFormat", EmitDefaultValue = false)]
        public string TimeFormat { get; set; }


        /// <summary>
        /// Gets or Sets Queries
        /// </summary>
        [DataMember(Name = "queries", EmitDefaultValue = false)]
        public List<DashboardQuery> Queries { get; set; }

        /// <summary>
        /// Colors define color encoding of data into a visualization
        /// </summary>
        /// <value>Colors define color encoding of data into a visualization</value>
        [DataMember(Name = "colors", EmitDefaultValue = false)]
        public List<DashboardColor> Colors { get; set; }

        /// <summary>
        /// A color mapping is an object that maps time series data to a UI color scheme to allow the UI to render graphs consistent colors across reloads.
        /// </summary>
        /// <value>A color mapping is an object that maps time series data to a UI color scheme to allow the UI to render graphs consistent colors across reloads.</value>
        [DataMember(Name = "colorMapping", EmitDefaultValue = false)]
        public Dictionary<string, string> ColorMapping { get; set; }


        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name = "note", EmitDefaultValue = false)]
        public string Note { get; set; }

        /// <summary>
        /// If true, will display note when empty
        /// </summary>
        /// <value>If true, will display note when empty</value>
        [DataMember(Name = "showNoteWhenEmpty", EmitDefaultValue = false)]
        public bool? ShowNoteWhenEmpty { get; set; }

        /// <summary>
        /// Gets or Sets Axes
        /// </summary>
        [DataMember(Name = "axes", EmitDefaultValue = false)]
        public Axes Axes { get; set; }

        /// <summary>
        /// Gets or Sets StaticLegend
        /// </summary>
        [DataMember(Name = "staticLegend", EmitDefaultValue = false)]
        public StaticLegend StaticLegend { get; set; }

        /// <summary>
        /// Gets or Sets XColumn
        /// </summary>
        [DataMember(Name = "xColumn", EmitDefaultValue = false)]
        public string XColumn { get; set; }

        /// <summary>
        /// Gets or Sets GenerateXAxisTicks
        /// </summary>
        [DataMember(Name = "generateXAxisTicks", EmitDefaultValue = false)]
        public List<string> GenerateXAxisTicks { get; set; }

        /// <summary>
        /// Gets or Sets XTotalTicks
        /// </summary>
        [DataMember(Name = "xTotalTicks", EmitDefaultValue = false)]
        public int? XTotalTicks { get; set; }

        /// <summary>
        /// Gets or Sets XTickStart
        /// </summary>
        [DataMember(Name = "xTickStart", EmitDefaultValue = false)]
        public float? XTickStart { get; set; }

        /// <summary>
        /// Gets or Sets XTickStep
        /// </summary>
        [DataMember(Name = "xTickStep", EmitDefaultValue = false)]
        public float? XTickStep { get; set; }

        /// <summary>
        /// Gets or Sets YColumn
        /// </summary>
        [DataMember(Name = "yColumn", EmitDefaultValue = false)]
        public string YColumn { get; set; }

        /// <summary>
        /// Gets or Sets GenerateYAxisTicks
        /// </summary>
        [DataMember(Name = "generateYAxisTicks", EmitDefaultValue = false)]
        public List<string> GenerateYAxisTicks { get; set; }

        /// <summary>
        /// Gets or Sets YTotalTicks
        /// </summary>
        [DataMember(Name = "yTotalTicks", EmitDefaultValue = false)]
        public int? YTotalTicks { get; set; }

        /// <summary>
        /// Gets or Sets YTickStart
        /// </summary>
        [DataMember(Name = "yTickStart", EmitDefaultValue = false)]
        public float? YTickStart { get; set; }

        /// <summary>
        /// Gets or Sets YTickStep
        /// </summary>
        [DataMember(Name = "yTickStep", EmitDefaultValue = false)]
        public float? YTickStep { get; set; }

        /// <summary>
        /// Gets or Sets ShadeBelow
        /// </summary>
        [DataMember(Name = "shadeBelow", EmitDefaultValue = false)]
        public bool? ShadeBelow { get; set; }


        /// <summary>
        /// Gets or Sets LegendColorizeRows
        /// </summary>
        [DataMember(Name = "legendColorizeRows", EmitDefaultValue = false)]
        public bool? LegendColorizeRows { get; set; }

        /// <summary>
        /// Gets or Sets LegendHide
        /// </summary>
        [DataMember(Name = "legendHide", EmitDefaultValue = false)]
        public bool? LegendHide { get; set; }

        /// <summary>
        /// Gets or Sets LegendOpacity
        /// </summary>
        [DataMember(Name = "legendOpacity", EmitDefaultValue = false)]
        public float? LegendOpacity { get; set; }

        /// <summary>
        /// Gets or Sets LegendOrientationThreshold
        /// </summary>
        [DataMember(Name = "legendOrientationThreshold", EmitDefaultValue = false)]
        public int? LegendOrientationThreshold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XYViewProperties {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  TimeFormat: ").Append(TimeFormat).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Queries: ").Append(Queries).Append("\n");
            sb.Append("  Colors: ").Append(Colors).Append("\n");
            sb.Append("  ColorMapping: ").Append(ColorMapping).Append("\n");
            sb.Append("  Shape: ").Append(Shape).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  ShowNoteWhenEmpty: ").Append(ShowNoteWhenEmpty).Append("\n");
            sb.Append("  Axes: ").Append(Axes).Append("\n");
            sb.Append("  StaticLegend: ").Append(StaticLegend).Append("\n");
            sb.Append("  XColumn: ").Append(XColumn).Append("\n");
            sb.Append("  GenerateXAxisTicks: ").Append(GenerateXAxisTicks).Append("\n");
            sb.Append("  XTotalTicks: ").Append(XTotalTicks).Append("\n");
            sb.Append("  XTickStart: ").Append(XTickStart).Append("\n");
            sb.Append("  XTickStep: ").Append(XTickStep).Append("\n");
            sb.Append("  YColumn: ").Append(YColumn).Append("\n");
            sb.Append("  GenerateYAxisTicks: ").Append(GenerateYAxisTicks).Append("\n");
            sb.Append("  YTotalTicks: ").Append(YTotalTicks).Append("\n");
            sb.Append("  YTickStart: ").Append(YTickStart).Append("\n");
            sb.Append("  YTickStep: ").Append(YTickStep).Append("\n");
            sb.Append("  ShadeBelow: ").Append(ShadeBelow).Append("\n");
            sb.Append("  HoverDimension: ").Append(HoverDimension).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Geom: ").Append(Geom).Append("\n");
            sb.Append("  LegendColorizeRows: ").Append(LegendColorizeRows).Append("\n");
            sb.Append("  LegendHide: ").Append(LegendHide).Append("\n");
            sb.Append("  LegendOpacity: ").Append(LegendOpacity).Append("\n");
            sb.Append("  LegendOrientationThreshold: ").Append(LegendOrientationThreshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as XYViewProperties);
        }

        /// <summary>
        /// Returns true if XYViewProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of XYViewProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XYViewProperties input)
        {
            if (input == null)
            {
                return false;
            }

            return base.Equals(input) &&
                   (
                       TimeFormat == input.TimeFormat ||
                       TimeFormat != null && TimeFormat.Equals(input.TimeFormat)
                   ) && base.Equals(input) &&
                   (
                       Type == input.Type ||
                       Type.Equals(input.Type)
                   ) && base.Equals(input) &&
                   (
                       Queries == input.Queries ||
                       Queries != null &&
                       Queries.SequenceEqual(input.Queries)
                   ) && base.Equals(input) &&
                   (
                       Colors == input.Colors ||
                       Colors != null &&
                       Colors.SequenceEqual(input.Colors)
                   ) && base.Equals(input) &&
                   (
                       ColorMapping == input.ColorMapping ||
                       ColorMapping != null &&
                       ColorMapping.SequenceEqual(input.ColorMapping)
                   ) && base.Equals(input) &&
                   (
                       Shape == input.Shape ||
                       Shape.Equals(input.Shape)
                   ) && base.Equals(input) &&
                   (
                       Note == input.Note ||
                       Note != null && Note.Equals(input.Note)
                   ) && base.Equals(input) &&
                   (
                       ShowNoteWhenEmpty == input.ShowNoteWhenEmpty ||
                       ShowNoteWhenEmpty != null && ShowNoteWhenEmpty.Equals(input.ShowNoteWhenEmpty)
                   ) && base.Equals(input) && Axes != null && Axes.Equals(input.Axes) && base.Equals(input) &&
                   StaticLegend != null && StaticLegend.Equals(input.StaticLegend) && base.Equals(input) && (
                       XColumn == input.XColumn ||
                       XColumn != null && XColumn.Equals(input.XColumn)
                   ) && base.Equals(input) && (
                       GenerateXAxisTicks == input.GenerateXAxisTicks ||
                       GenerateXAxisTicks != null &&
                       GenerateXAxisTicks.SequenceEqual(input.GenerateXAxisTicks)
                   ) && base.Equals(input) && (
                       XTotalTicks == input.XTotalTicks ||
                       XTotalTicks != null && XTotalTicks.Equals(input.XTotalTicks)
                   ) && base.Equals(input) && (
                       XTickStart == input.XTickStart ||
                       XTickStart != null && XTickStart.Equals(input.XTickStart)
                   ) && base.Equals(input) && (
                       XTickStep == input.XTickStep ||
                       XTickStep != null && XTickStep.Equals(input.XTickStep)
                   ) && base.Equals(input) && (
                       YColumn == input.YColumn ||
                       YColumn != null && YColumn.Equals(input.YColumn)
                   ) && base.Equals(input) && (
                       GenerateYAxisTicks == input.GenerateYAxisTicks ||
                       GenerateYAxisTicks != null &&
                       GenerateYAxisTicks.SequenceEqual(input.GenerateYAxisTicks)
                   ) && base.Equals(input) && (
                       YTotalTicks == input.YTotalTicks ||
                       YTotalTicks != null && YTotalTicks.Equals(input.YTotalTicks)
                   ) && base.Equals(input) && (
                       YTickStart == input.YTickStart ||
                       YTickStart != null && YTickStart.Equals(input.YTickStart)
                   ) && base.Equals(input) && (
                       YTickStep == input.YTickStep ||
                       YTickStep != null && YTickStep.Equals(input.YTickStep)
                   ) && base.Equals(input) && (
                       ShadeBelow == input.ShadeBelow ||
                       ShadeBelow != null && ShadeBelow.Equals(input.ShadeBelow)
                   ) && base.Equals(input) && (
                       HoverDimension == input.HoverDimension ||
                       HoverDimension.Equals(input.HoverDimension)
                   ) && base.Equals(input) && (
                       Position == input.Position ||
                       Position.Equals(input.Position)
                   ) && base.Equals(input) && (
                       Geom == input.Geom ||
                       Geom.Equals(input.Geom)
                   ) && base.Equals(input) && (
                       LegendColorizeRows == input.LegendColorizeRows ||
                       LegendColorizeRows != null && LegendColorizeRows.Equals(input.LegendColorizeRows)
                   ) && base.Equals(input) && (
                       LegendHide == input.LegendHide ||
                       LegendHide != null && LegendHide.Equals(input.LegendHide)
                   ) && base.Equals(input) && (
                       LegendOpacity == input.LegendOpacity ||
                       LegendOpacity != null && LegendOpacity.Equals(input.LegendOpacity)
                   ) && base.Equals(input) && (
                       LegendOrientationThreshold == input.LegendOrientationThreshold ||
                       LegendOrientationThreshold != null &&
                       LegendOrientationThreshold.Equals(input.LegendOrientationThreshold)
                   );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();

                if (TimeFormat != null)
                {
                    hashCode = hashCode * 59 + TimeFormat.GetHashCode();
                }

                hashCode = hashCode * 59 + Type.GetHashCode();
                if (Queries != null)
                {
                    hashCode = hashCode * 59 + Queries.GetHashCode();
                }

                if (Colors != null)
                {
                    hashCode = hashCode * 59 + Colors.GetHashCode();
                }

                if (ColorMapping != null)
                {
                    hashCode = hashCode * 59 + ColorMapping.GetHashCode();
                }

                hashCode = hashCode * 59 + Shape.GetHashCode();
                if (Note != null)
                {
                    hashCode = hashCode * 59 + Note.GetHashCode();
                }

                if (ShowNoteWhenEmpty != null)
                {
                    hashCode = hashCode * 59 + ShowNoteWhenEmpty.GetHashCode();
                }

                if (Axes != null)
                {
                    hashCode = hashCode * 59 + Axes.GetHashCode();
                }

                if (StaticLegend != null)
                {
                    hashCode = hashCode * 59 + StaticLegend.GetHashCode();
                }

                if (XColumn != null)
                {
                    hashCode = hashCode * 59 + XColumn.GetHashCode();
                }

                if (GenerateXAxisTicks != null)
                {
                    hashCode = hashCode * 59 + GenerateXAxisTicks.GetHashCode();
                }

                if (XTotalTicks != null)
                {
                    hashCode = hashCode * 59 + XTotalTicks.GetHashCode();
                }

                if (XTickStart != null)
                {
                    hashCode = hashCode * 59 + XTickStart.GetHashCode();
                }

                if (XTickStep != null)
                {
                    hashCode = hashCode * 59 + XTickStep.GetHashCode();
                }

                if (YColumn != null)
                {
                    hashCode = hashCode * 59 + YColumn.GetHashCode();
                }

                if (GenerateYAxisTicks != null)
                {
                    hashCode = hashCode * 59 + GenerateYAxisTicks.GetHashCode();
                }

                if (YTotalTicks != null)
                {
                    hashCode = hashCode * 59 + YTotalTicks.GetHashCode();
                }

                if (YTickStart != null)
                {
                    hashCode = hashCode * 59 + YTickStart.GetHashCode();
                }

                if (YTickStep != null)
                {
                    hashCode = hashCode * 59 + YTickStep.GetHashCode();
                }

                if (ShadeBelow != null)
                {
                    hashCode = hashCode * 59 + ShadeBelow.GetHashCode();
                }

                hashCode = hashCode * 59 + HoverDimension.GetHashCode();
                hashCode = hashCode * 59 + Position.GetHashCode();
                hashCode = hashCode * 59 + Geom.GetHashCode();
                if (LegendColorizeRows != null)
                {
                    hashCode = hashCode * 59 + LegendColorizeRows.GetHashCode();
                }

                if (LegendHide != null)
                {
                    hashCode = hashCode * 59 + LegendHide.GetHashCode();
                }

                if (LegendOpacity != null)
                {
                    hashCode = hashCode * 59 + LegendOpacity.GetHashCode();
                }

                if (LegendOrientationThreshold != null)
                {
                    hashCode = hashCode * 59 + LegendOrientationThreshold.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}