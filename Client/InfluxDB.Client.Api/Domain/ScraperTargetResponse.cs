/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// ScraperTargetResponse
    /// </summary>
    [DataContract]
    public partial class ScraperTargetResponse : ScraperTargetRequest, IEquatable<ScraperTargetResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScraperTargetResponse" /> class.
        /// </summary>
        /// <param name="org">The name of the organization..</param>
        /// <param name="bucket">The bucket name..</param>
        /// <param name="links">links.</param>
        public ScraperTargetResponse(string org = default, string bucket = default,
            ScraperTargetResponseLinks links = default, string name = default, TypeEnum? type = default,
            string url = default, string orgID = default, string bucketID = default, bool? allowInsecure = false) :
            base(name, type, url, orgID, bucketID, allowInsecure)
        {
            Org = org;
            Bucket = bucket;
            Links = links;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// The name of the organization.
        /// </summary>
        /// <value>The name of the organization.</value>
        [DataMember(Name = "org", EmitDefaultValue = false)]
        public string Org { get; set; }

        /// <summary>
        /// The bucket name.
        /// </summary>
        /// <value>The bucket name.</value>
        [DataMember(Name = "bucket", EmitDefaultValue = false)]
        public string Bucket { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public ScraperTargetResponseLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScraperTargetResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Org: ").Append(Org).Append("\n");
            sb.Append("  Bucket: ").Append(Bucket).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ScraperTargetResponse);
        }

        /// <summary>
        /// Returns true if ScraperTargetResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ScraperTargetResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScraperTargetResponse input)
        {
            if (input == null)
            {
                return false;
            }

            return base.Equals(input) &&
                   (
                       Id == input.Id ||
                       Id != null && Id.Equals(input.Id)
                   ) && base.Equals(input) &&
                   (
                       Org == input.Org ||
                       Org != null && Org.Equals(input.Org)
                   ) && base.Equals(input) &&
                   (
                       Bucket == input.Bucket ||
                       Bucket != null && Bucket.Equals(input.Bucket)
                   ) && base.Equals(input) && Links != null && Links.Equals(input.Links);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();

                if (Id != null)
                {
                    hashCode = hashCode * 59 + Id.GetHashCode();
                }

                if (Org != null)
                {
                    hashCode = hashCode * 59 + Org.GetHashCode();
                }

                if (Bucket != null)
                {
                    hashCode = hashCode * 59 + Bucket.GetHashCode();
                }

                if (Links != null)
                {
                    hashCode = hashCode * 59 + Links.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}