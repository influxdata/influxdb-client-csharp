/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// BucketShardMapping
    /// </summary>
    [DataContract]
    public partial class BucketShardMapping : IEquatable<BucketShardMapping>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BucketShardMapping" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BucketShardMapping()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BucketShardMapping" /> class.
        /// </summary>
        /// <param name="oldId">oldId (required).</param>
        /// <param name="newId">newId (required).</param>
        public BucketShardMapping(long? oldId = default, long? newId = default)
        {
            // to ensure "oldId" is required (not null)
            if (oldId == null)
            {
                throw new InvalidDataException(
                    "oldId is a required property for BucketShardMapping and cannot be null");
            }

            OldId = oldId;
            // to ensure "newId" is required (not null)
            if (newId == null)
            {
                throw new InvalidDataException(
                    "newId is a required property for BucketShardMapping and cannot be null");
            }

            NewId = newId;
        }

        /// <summary>
        /// Gets or Sets OldId
        /// </summary>
        [DataMember(Name = "oldId", EmitDefaultValue = false)]
        public long? OldId { get; set; }

        /// <summary>
        /// Gets or Sets NewId
        /// </summary>
        [DataMember(Name = "newId", EmitDefaultValue = false)]
        public long? NewId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BucketShardMapping {\n");
            sb.Append("  OldId: ").Append(OldId).Append("\n");
            sb.Append("  NewId: ").Append(NewId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as BucketShardMapping);
        }

        /// <summary>
        /// Returns true if BucketShardMapping instances are equal
        /// </summary>
        /// <param name="input">Instance of BucketShardMapping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BucketShardMapping input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    OldId == input.OldId ||
                    OldId != null && OldId.Equals(input.OldId)
                ) &&
                (
                    NewId == input.NewId ||
                    NewId != null && NewId.Equals(input.NewId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                if (OldId != null)
                {
                    hashCode = hashCode * 59 + OldId.GetHashCode();
                }

                if (NewId != null)
                {
                    hashCode = hashCode * 59 + NewId.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}