/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// DeadmanCheck
    /// </summary>
    [DataContract]
    public partial class DeadmanCheck : Check,  IEquatable<DeadmanCheck>
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Deadman for value: deadman
            /// </summary>
            [EnumMember(Value = "deadman")]
            Deadman = 1

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeadmanCheck" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeadmanCheck() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeadmanCheck" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to TypeEnum.Deadman).</param>
        /// <param name="timeSince">String duration before deadman triggers..</param>
        /// <param name="staleTime">String duration for time that a series is considered stale and should not trigger deadman..</param>
        /// <param name="reportZero">If only zero values reported since time, trigger an alert.</param>
        /// <param name="level">level.</param>
        /// <param name="every">Check repetition interval..</param>
        /// <param name="offset">Duration to delay after the schedule, before executing check..</param>
        /// <param name="tags">List of tags to write to each status..</param>
        /// <param name="statusMessageTemplate">The template used to generate and write a status message..</param>
        public DeadmanCheck(TypeEnum type = TypeEnum.Deadman, string timeSince = default(string), string staleTime = default(string), bool? reportZero = default(bool?), CheckStatusLevel level = default(CheckStatusLevel), string every = default(string), string offset = default(string), List<ThresholdCheckTags> tags = default(List<ThresholdCheckTags>), string statusMessageTemplate = default(string), string name = default(string), string orgID = default(string), string taskID = default(string), DashboardQuery query = default(DashboardQuery), TaskStatusType? status = default(TaskStatusType?), string description = default(string), List<Label> labels = default(List<Label>), CheckBaseLinks links = default(CheckBaseLinks)) : base(name, orgID, taskID, query, status, description, labels, links)
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for DeadmanCheck and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.TimeSince = timeSince;
            this.StaleTime = staleTime;
            this.ReportZero = reportZero;
            this.Level = level;
            this.Every = every;
            this.Offset = offset;
            this.Tags = tags;
            this.StatusMessageTemplate = statusMessageTemplate;
        }


        /// <summary>
        /// String duration before deadman triggers.
        /// </summary>
        /// <value>String duration before deadman triggers.</value>
        [DataMember(Name="timeSince", EmitDefaultValue=false)]
        public string TimeSince { get; set; }

        /// <summary>
        /// String duration for time that a series is considered stale and should not trigger deadman.
        /// </summary>
        /// <value>String duration for time that a series is considered stale and should not trigger deadman.</value>
        [DataMember(Name="staleTime", EmitDefaultValue=false)]
        public string StaleTime { get; set; }

        /// <summary>
        /// If only zero values reported since time, trigger an alert
        /// </summary>
        /// <value>If only zero values reported since time, trigger an alert</value>
        [DataMember(Name="reportZero", EmitDefaultValue=false)]
        public bool? ReportZero { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public CheckStatusLevel Level { get; set; }

        /// <summary>
        /// Check repetition interval.
        /// </summary>
        /// <value>Check repetition interval.</value>
        [DataMember(Name="every", EmitDefaultValue=false)]
        public string Every { get; set; }

        /// <summary>
        /// Duration to delay after the schedule, before executing check.
        /// </summary>
        /// <value>Duration to delay after the schedule, before executing check.</value>
        [DataMember(Name="offset", EmitDefaultValue=false)]
        public string Offset { get; set; }

        /// <summary>
        /// List of tags to write to each status.
        /// </summary>
        /// <value>List of tags to write to each status.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<ThresholdCheckTags> Tags { get; set; }

        /// <summary>
        /// The template used to generate and write a status message.
        /// </summary>
        /// <value>The template used to generate and write a status message.</value>
        [DataMember(Name="statusMessageTemplate", EmitDefaultValue=false)]
        public string StatusMessageTemplate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeadmanCheck {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TimeSince: ").Append(TimeSince).Append("\n");
            sb.Append("  StaleTime: ").Append(StaleTime).Append("\n");
            sb.Append("  ReportZero: ").Append(ReportZero).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Every: ").Append(Every).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  StatusMessageTemplate: ").Append(StatusMessageTemplate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeadmanCheck);
        }

        /// <summary>
        /// Returns true if DeadmanCheck instances are equal
        /// </summary>
        /// <param name="input">Instance of DeadmanCheck to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeadmanCheck input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.TimeSince == input.TimeSince ||
                    (this.TimeSince != null &&
                    this.TimeSince.Equals(input.TimeSince))
                ) && base.Equals(input) && 
                (
                    this.StaleTime == input.StaleTime ||
                    (this.StaleTime != null &&
                    this.StaleTime.Equals(input.StaleTime))
                ) && base.Equals(input) && 
                (
                    this.ReportZero == input.ReportZero ||
                    (this.ReportZero != null &&
                    this.ReportZero.Equals(input.ReportZero))
                ) && base.Equals(input) && 
                (
                    
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && base.Equals(input) && 
                (
                    this.Every == input.Every ||
                    (this.Every != null &&
                    this.Every.Equals(input.Every))
                ) && base.Equals(input) && 
                (
                    this.Offset == input.Offset ||
                    (this.Offset != null &&
                    this.Offset.Equals(input.Offset))
                ) && base.Equals(input) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && base.Equals(input) && 
                (
                    this.StatusMessageTemplate == input.StatusMessageTemplate ||
                    (this.StatusMessageTemplate != null &&
                    this.StatusMessageTemplate.Equals(input.StatusMessageTemplate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TimeSince != null)
                    hashCode = hashCode * 59 + this.TimeSince.GetHashCode();
                if (this.StaleTime != null)
                    hashCode = hashCode * 59 + this.StaleTime.GetHashCode();
                if (this.ReportZero != null)
                    hashCode = hashCode * 59 + this.ReportZero.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.Every != null)
                    hashCode = hashCode * 59 + this.Every.GetHashCode();
                if (this.Offset != null)
                    hashCode = hashCode * 59 + this.Offset.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.StatusMessageTemplate != null)
                    hashCode = hashCode * 59 + this.StatusMessageTemplate.GetHashCode();
                return hashCode;
            }
        }

    }

}
