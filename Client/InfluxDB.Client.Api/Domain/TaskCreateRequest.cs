/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// TaskCreateRequest
    /// </summary>
    [DataContract]
    public partial class TaskCreateRequest :  IEquatable<TaskCreateRequest>
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public TaskStatusType? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaskCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskCreateRequest" /> class.
        /// </summary>
        /// <param name="orgID">The ID of the organization that owns this Task..</param>
        /// <param name="org">The name of the organization that owns this Task..</param>
        /// <param name="status">status.</param>
        /// <param name="flux">The Flux script to run for this task. (required).</param>
        /// <param name="description">An optional description of the task..</param>
        public TaskCreateRequest(string orgID = default(string), string org = default(string), TaskStatusType? status = default(TaskStatusType?), string flux = default(string), string description = default(string))
        {
            // to ensure "flux" is required (not null)
            if (flux == null)
            {
                throw new InvalidDataException("flux is a required property for TaskCreateRequest and cannot be null");
            }
            this.Flux = flux;
            this.OrgID = orgID;
            this.Org = org;
            this.Status = status;
            this.Description = description;
        }

        /// <summary>
        /// The ID of the organization that owns this Task.
        /// </summary>
        /// <value>The ID of the organization that owns this Task.</value>
        [DataMember(Name="orgID", EmitDefaultValue=false)]
        public string OrgID { get; set; }

        /// <summary>
        /// The name of the organization that owns this Task.
        /// </summary>
        /// <value>The name of the organization that owns this Task.</value>
        [DataMember(Name="org", EmitDefaultValue=false)]
        public string Org { get; set; }


        /// <summary>
        /// The Flux script to run for this task.
        /// </summary>
        /// <value>The Flux script to run for this task.</value>
        [DataMember(Name="flux", EmitDefaultValue=false)]
        public string Flux { get; set; }

        /// <summary>
        /// An optional description of the task.
        /// </summary>
        /// <value>An optional description of the task.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskCreateRequest {\n");
            sb.Append("  OrgID: ").Append(OrgID).Append("\n");
            sb.Append("  Org: ").Append(Org).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Flux: ").Append(Flux).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskCreateRequest);
        }

        /// <summary>
        /// Returns true if TaskCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskCreateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrgID == input.OrgID ||
                    (this.OrgID != null && this.OrgID.Equals(input.OrgID))
                ) && 
                (
                    this.Org == input.Org ||
                    (this.Org != null && this.Org.Equals(input.Org))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Flux == input.Flux ||
                    (this.Flux != null && this.Flux.Equals(input.Flux))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null && this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.OrgID != null)
                    hashCode = hashCode * 59 + this.OrgID.GetHashCode();
                if (this.Org != null)
                    hashCode = hashCode * 59 + this.Org.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Flux != null)
                    hashCode = hashCode * 59 + this.Flux.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

    }

}
