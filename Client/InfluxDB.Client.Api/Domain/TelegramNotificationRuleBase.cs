/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// TelegramNotificationRuleBase
    /// </summary>
    [DataContract]
    public partial class TelegramNotificationRuleBase : NotificationRule, IEquatable<TelegramNotificationRuleBase>
    {
        /// <summary>
        /// The discriminator between other types of notification rules is \&quot;telegram\&quot;.
        /// </summary>
        /// <value>The discriminator between other types of notification rules is \&quot;telegram\&quot;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Telegram for value: telegram
            /// </summary>
            [EnumMember(Value = "telegram")] Telegram = 1
        }

        /// <summary>
        /// The discriminator between other types of notification rules is \&quot;telegram\&quot;.
        /// </summary>
        /// <value>The discriminator between other types of notification rules is \&quot;telegram\&quot;.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \&quot;MarkdownV2\&quot; .
        /// </summary>
        /// <value>Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \&quot;MarkdownV2\&quot; .</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ParseModeEnum
        {
            /// <summary>
            /// Enum MarkdownV2 for value: MarkdownV2
            /// </summary>
            [EnumMember(Value = "MarkdownV2")] MarkdownV2 = 1,

            /// <summary>
            /// Enum HTML for value: HTML
            /// </summary>
            [EnumMember(Value = "HTML")] HTML = 2,

            /// <summary>
            /// Enum Markdown for value: Markdown
            /// </summary>
            [EnumMember(Value = "Markdown")] Markdown = 3
        }

        /// <summary>
        /// Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \&quot;MarkdownV2\&quot; .
        /// </summary>
        /// <value>Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \&quot;MarkdownV2\&quot; .</value>
        [DataMember(Name = "parseMode", EmitDefaultValue = false)]
        public ParseModeEnum? ParseMode { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TelegramNotificationRuleBase" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TelegramNotificationRuleBase()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TelegramNotificationRuleBase" /> class.
        /// </summary>
        /// <param name="type">The discriminator between other types of notification rules is \&quot;telegram\&quot;. (required) (default to TypeEnum.Telegram).</param>
        /// <param name="messageTemplate">The message template as a flux interpolated string. (required).</param>
        /// <param name="parseMode">Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \&quot;MarkdownV2\&quot; ..</param>
        /// <param name="disableWebPagePreview">Disables preview of web links in the sent messages when \&quot;true\&quot;. Defaults to \&quot;false\&quot; ..</param>
        public TelegramNotificationRuleBase(TypeEnum type = TypeEnum.Telegram, string messageTemplate = default,
            ParseModeEnum? parseMode = default, bool? disableWebPagePreview = default, string endpointID = default,
            string orgID = default, string taskID = default, TaskStatusType status = default, string name = default,
            string sleepUntil = default, string every = default, string offset = default, string runbookLink = default,
            int? limitEvery = default, int? limit = default, List<TagRule> tagRules = default,
            string description = default, List<StatusRule> statusRules = default, List<Label> labels = default,
            NotificationRuleBaseLinks links = default) : base(endpointID, orgID, taskID, status, name, sleepUntil,
            every, offset, runbookLink, limitEvery, limit, tagRules, description, statusRules, labels, links)
        {
            // to ensure "type" is required (not null)
            Type = type;
            // to ensure "messageTemplate" is required (not null)
            if (messageTemplate == null)
            {
                throw new InvalidDataException(
                    "messageTemplate is a required property for TelegramNotificationRuleBase and cannot be null");
            }

            MessageTemplate = messageTemplate;
            ParseMode = parseMode;
            DisableWebPagePreview = disableWebPagePreview;
        }


        /// <summary>
        /// The message template as a flux interpolated string.
        /// </summary>
        /// <value>The message template as a flux interpolated string.</value>
        [DataMember(Name = "messageTemplate", EmitDefaultValue = false)]
        public string MessageTemplate { get; set; }


        /// <summary>
        /// Disables preview of web links in the sent messages when \&quot;true\&quot;. Defaults to \&quot;false\&quot; .
        /// </summary>
        /// <value>Disables preview of web links in the sent messages when \&quot;true\&quot;. Defaults to \&quot;false\&quot; .</value>
        [DataMember(Name = "disableWebPagePreview", EmitDefaultValue = false)]
        public bool? DisableWebPagePreview { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TelegramNotificationRuleBase {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MessageTemplate: ").Append(MessageTemplate).Append("\n");
            sb.Append("  ParseMode: ").Append(ParseMode).Append("\n");
            sb.Append("  DisableWebPagePreview: ").Append(DisableWebPagePreview).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TelegramNotificationRuleBase);
        }

        /// <summary>
        /// Returns true if TelegramNotificationRuleBase instances are equal
        /// </summary>
        /// <param name="input">Instance of TelegramNotificationRuleBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TelegramNotificationRuleBase input)
        {
            if (input == null)
            {
                return false;
            }

            return base.Equals(input) &&
                   (
                       Type == input.Type ||
                       Type.Equals(input.Type)
                   ) && base.Equals(input) &&
                   (
                       MessageTemplate == input.MessageTemplate ||
                       MessageTemplate != null && MessageTemplate.Equals(input.MessageTemplate)
                   ) && base.Equals(input) &&
                   (
                       ParseMode == input.ParseMode ||
                       ParseMode.Equals(input.ParseMode)
                   ) && base.Equals(input) &&
                   (
                       DisableWebPagePreview == input.DisableWebPagePreview ||
                       DisableWebPagePreview != null && DisableWebPagePreview.Equals(input.DisableWebPagePreview)
                   );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();

                hashCode = hashCode * 59 + Type.GetHashCode();
                if (MessageTemplate != null)
                {
                    hashCode = hashCode * 59 + MessageTemplate.GetHashCode();
                }

                hashCode = hashCode * 59 + ParseMode.GetHashCode();
                if (DisableWebPagePreview != null)
                {
                    hashCode = hashCode * 59 + DisableWebPagePreview.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}