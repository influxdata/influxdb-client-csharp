/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// TemplateSummarySummaryStatusRules
    /// </summary>
    [DataContract]
    public partial class TemplateSummarySummaryStatusRules :  IEquatable<TemplateSummarySummaryStatusRules>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateSummarySummaryStatusRules" /> class.
        /// </summary>
        /// <param name="currentLevel">currentLevel.</param>
        /// <param name="previousLevel">previousLevel.</param>
        public TemplateSummarySummaryStatusRules(string currentLevel = default(string), string previousLevel = default(string))
        {
            this.CurrentLevel = currentLevel;
            this.PreviousLevel = previousLevel;
        }

        /// <summary>
        /// Gets or Sets CurrentLevel
        /// </summary>
        [DataMember(Name="currentLevel", EmitDefaultValue=false)]
        public string CurrentLevel { get; set; }

        /// <summary>
        /// Gets or Sets PreviousLevel
        /// </summary>
        [DataMember(Name="previousLevel", EmitDefaultValue=false)]
        public string PreviousLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemplateSummarySummaryStatusRules {\n");
            sb.Append("  CurrentLevel: ").Append(CurrentLevel).Append("\n");
            sb.Append("  PreviousLevel: ").Append(PreviousLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemplateSummarySummaryStatusRules);
        }

        /// <summary>
        /// Returns true if TemplateSummarySummaryStatusRules instances are equal
        /// </summary>
        /// <param name="input">Instance of TemplateSummarySummaryStatusRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplateSummarySummaryStatusRules input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentLevel == input.CurrentLevel ||
                    (this.CurrentLevel != null &&
                    this.CurrentLevel.Equals(input.CurrentLevel))
                ) && 
                (
                    this.PreviousLevel == input.PreviousLevel ||
                    (this.PreviousLevel != null &&
                    this.PreviousLevel.Equals(input.PreviousLevel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentLevel != null)
                    hashCode = hashCode * 59 + this.CurrentLevel.GetHashCode();
                if (this.PreviousLevel != null)
                    hashCode = hashCode * 59 + this.PreviousLevel.GetHashCode();
                return hashCode;
            }
        }

    }

}
