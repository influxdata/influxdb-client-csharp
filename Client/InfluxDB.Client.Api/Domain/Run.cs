/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// Run
    /// </summary>
    [DataContract]
    public partial class Run : IEquatable<Run>
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Scheduled for value: scheduled
            /// </summary>
            [EnumMember(Value = "scheduled")] Scheduled = 1,

            /// <summary>
            /// Enum Started for value: started
            /// </summary>
            [EnumMember(Value = "started")] Started = 2,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")] Failed = 3,

            /// <summary>
            /// Enum Success for value: success
            /// </summary>
            [EnumMember(Value = "success")] Success = 4,

            /// <summary>
            /// Enum Canceled for value: canceled
            /// </summary>
            [EnumMember(Value = "canceled")] Canceled = 5
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="Run" /> class.
        /// </summary>
        /// <param name="scheduledFor">Time used for run&#39;s \&quot;now\&quot; option, RFC3339..</param>
        /// <param name="links">links.</param>
        public Run(DateTime? scheduledFor = default, RunLinks links = default)
        {
            ScheduledFor = scheduledFor;
            Links = links;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or Sets TaskID
        /// </summary>
        [DataMember(Name = "taskID", EmitDefaultValue = false)]
        public string TaskID { get; private set; }


        /// <summary>
        /// Time used for run&#39;s \&quot;now\&quot; option, RFC3339.
        /// </summary>
        /// <value>Time used for run&#39;s \&quot;now\&quot; option, RFC3339.</value>
        [DataMember(Name = "scheduledFor", EmitDefaultValue = false)]
        public DateTime? ScheduledFor { get; set; }

        /// <summary>
        /// An array of logs associated with the run.
        /// </summary>
        /// <value>An array of logs associated with the run.</value>
        [DataMember(Name = "log", EmitDefaultValue = false)]
        public List<LogEvent> Log { get; private set; }

        /// <summary>
        /// Time run started executing, RFC3339Nano.
        /// </summary>
        /// <value>Time run started executing, RFC3339Nano.</value>
        [DataMember(Name = "startedAt", EmitDefaultValue = false)]
        public DateTime? StartedAt { get; private set; }

        /// <summary>
        /// Time run finished executing, RFC3339Nano.
        /// </summary>
        /// <value>Time run finished executing, RFC3339Nano.</value>
        [DataMember(Name = "finishedAt", EmitDefaultValue = false)]
        public DateTime? FinishedAt { get; private set; }

        /// <summary>
        /// Time run was manually requested, RFC3339Nano.
        /// </summary>
        /// <value>Time run was manually requested, RFC3339Nano.</value>
        [DataMember(Name = "requestedAt", EmitDefaultValue = false)]
        public DateTime? RequestedAt { get; private set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public RunLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Run {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TaskID: ").Append(TaskID).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ScheduledFor: ").Append(ScheduledFor).Append("\n");
            sb.Append("  Log: ").Append(Log).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  RequestedAt: ").Append(RequestedAt).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Run);
        }

        /// <summary>
        /// Returns true if Run instances are equal
        /// </summary>
        /// <param name="input">Instance of Run to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Run input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Id == input.Id ||
                    Id != null && Id.Equals(input.Id)
                ) &&
                (
                    TaskID == input.TaskID ||
                    TaskID != null && TaskID.Equals(input.TaskID)
                ) &&
                (
                    Status == input.Status ||
                    Status.Equals(input.Status)
                ) &&
                (
                    ScheduledFor == input.ScheduledFor ||
                    ScheduledFor != null && ScheduledFor.Equals(input.ScheduledFor)
                ) &&
                (
                    Log == input.Log ||
                    Log != null &&
                    Log.SequenceEqual(input.Log)
                ) &&
                (
                    StartedAt == input.StartedAt ||
                    StartedAt != null && StartedAt.Equals(input.StartedAt)
                ) &&
                (
                    FinishedAt == input.FinishedAt ||
                    FinishedAt != null && FinishedAt.Equals(input.FinishedAt)
                ) &&
                (
                    RequestedAt == input.RequestedAt ||
                    RequestedAt != null && RequestedAt.Equals(input.RequestedAt)
                ) && Links != null && Links.Equals(input.Links);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                if (Id != null)
                {
                    hashCode = hashCode * 59 + Id.GetHashCode();
                }

                if (TaskID != null)
                {
                    hashCode = hashCode * 59 + TaskID.GetHashCode();
                }

                hashCode = hashCode * 59 + Status.GetHashCode();
                if (ScheduledFor != null)
                {
                    hashCode = hashCode * 59 + ScheduledFor.GetHashCode();
                }

                if (Log != null)
                {
                    hashCode = hashCode * 59 + Log.GetHashCode();
                }

                if (StartedAt != null)
                {
                    hashCode = hashCode * 59 + StartedAt.GetHashCode();
                }

                if (FinishedAt != null)
                {
                    hashCode = hashCode * 59 + FinishedAt.GetHashCode();
                }

                if (RequestedAt != null)
                {
                    hashCode = hashCode * 59 + RequestedAt.GetHashCode();
                }

                if (Links != null)
                {
                    hashCode = hashCode * 59 + Links.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}