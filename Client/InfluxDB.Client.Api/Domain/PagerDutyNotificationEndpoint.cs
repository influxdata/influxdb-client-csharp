/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// PagerDutyNotificationEndpoint
    /// </summary>
    [DataContract]
    public partial class PagerDutyNotificationEndpoint : NotificationEndpoint, IEquatable<PagerDutyNotificationEndpoint>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PagerDutyNotificationEndpoint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PagerDutyNotificationEndpoint()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PagerDutyNotificationEndpoint" /> class.
        /// </summary>
        /// <param name="clientURL">clientURL.</param>
        /// <param name="routingKey">routingKey (required).</param>
        public PagerDutyNotificationEndpoint(string clientURL = default, string routingKey = default,
            string id = default, string orgID = default, string userID = default, string description = default,
            string name = default, StatusEnum? status = StatusEnum.Active, List<Label> labels = default,
            NotificationEndpointBaseLinks links = default,
            NotificationEndpointType type = NotificationEndpointType.Pagerduty) : base(id, orgID, userID, description,
            name, status, labels, links, type)
        {
            // to ensure "routingKey" is required (not null)
            if (routingKey == null)
            {
                throw new InvalidDataException(
                    "routingKey is a required property for PagerDutyNotificationEndpoint and cannot be null");
            }

            RoutingKey = routingKey;
            ClientURL = clientURL;
        }

        /// <summary>
        /// Gets or Sets ClientURL
        /// </summary>
        [DataMember(Name = "clientURL", EmitDefaultValue = false)]
        public string ClientURL { get; set; }

        /// <summary>
        /// Gets or Sets RoutingKey
        /// </summary>
        [DataMember(Name = "routingKey", EmitDefaultValue = false)]
        public string RoutingKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PagerDutyNotificationEndpoint {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ClientURL: ").Append(ClientURL).Append("\n");
            sb.Append("  RoutingKey: ").Append(RoutingKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as PagerDutyNotificationEndpoint);
        }

        /// <summary>
        /// Returns true if PagerDutyNotificationEndpoint instances are equal
        /// </summary>
        /// <param name="input">Instance of PagerDutyNotificationEndpoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PagerDutyNotificationEndpoint input)
        {
            if (input == null)
            {
                return false;
            }

            return base.Equals(input) &&
                   (
                       ClientURL == input.ClientURL ||
                       ClientURL != null && ClientURL.Equals(input.ClientURL)
                   ) && base.Equals(input) &&
                   (
                       RoutingKey == input.RoutingKey ||
                       RoutingKey != null && RoutingKey.Equals(input.RoutingKey)
                   );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();

                if (ClientURL != null)
                {
                    hashCode = hashCode * 59 + ClientURL.GetHashCode();
                }

                if (RoutingKey != null)
                {
                    hashCode = hashCode * 59 + RoutingKey.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}