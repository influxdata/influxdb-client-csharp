/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// Updates to an existing bucket resource.
    /// </summary>
    [DataContract]
    public partial class PatchBucketRequest :  IEquatable<PatchBucketRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatchBucketRequest" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="retentionRules">Updates to rules to expire or retain data. No rules means no updates..</param>
        public PatchBucketRequest(string name = default(string), string description = default(string), List<PatchRetentionRule> retentionRules = default(List<PatchRetentionRule>))
        {
            this.Name = name;
            this.Description = description;
            this.RetentionRules = retentionRules;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Updates to rules to expire or retain data. No rules means no updates.
        /// </summary>
        /// <value>Updates to rules to expire or retain data. No rules means no updates.</value>
        [DataMember(Name="retentionRules", EmitDefaultValue=false)]
        public List<PatchRetentionRule> RetentionRules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatchBucketRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RetentionRules: ").Append(RetentionRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatchBucketRequest);
        }

        /// <summary>
        /// Returns true if PatchBucketRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PatchBucketRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatchBucketRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null && this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null && this.Description.Equals(input.Description))
                ) && 
                (
                    this.RetentionRules == input.RetentionRules ||
                    this.RetentionRules != null &&
                    this.RetentionRules.SequenceEqual(input.RetentionRules)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.RetentionRules != null)
                    hashCode = hashCode * 59 + this.RetentionRules.GetHashCode();
                return hashCode;
            }
        }

    }

}
