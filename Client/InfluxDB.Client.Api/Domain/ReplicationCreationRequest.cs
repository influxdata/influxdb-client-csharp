/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// ReplicationCreationRequest
    /// </summary>
    [DataContract]
    public partial class ReplicationCreationRequest :  IEquatable<ReplicationCreationRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationCreationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReplicationCreationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationCreationRequest" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="orgID">orgID (required).</param>
        /// <param name="remoteID">remoteID (required).</param>
        /// <param name="localBucketID">localBucketID (required).</param>
        /// <param name="remoteBucketID">remoteBucketID (required).</param>
        /// <param name="maxQueueSizeBytes">maxQueueSizeBytes (required) (default to 67108860).</param>
        /// <param name="dropNonRetryableData">dropNonRetryableData (default to false).</param>
        public ReplicationCreationRequest(string name = default(string), string description = default(string), string orgID = default(string), string remoteID = default(string), string localBucketID = default(string), string remoteBucketID = default(string), long? maxQueueSizeBytes = 67108860, bool? dropNonRetryableData = false)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ReplicationCreationRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "orgID" is required (not null)
            if (orgID == null)
            {
                throw new InvalidDataException("orgID is a required property for ReplicationCreationRequest and cannot be null");
            }
            this.OrgID = orgID;
            // to ensure "remoteID" is required (not null)
            if (remoteID == null)
            {
                throw new InvalidDataException("remoteID is a required property for ReplicationCreationRequest and cannot be null");
            }
            this.RemoteID = remoteID;
            // to ensure "localBucketID" is required (not null)
            if (localBucketID == null)
            {
                throw new InvalidDataException("localBucketID is a required property for ReplicationCreationRequest and cannot be null");
            }
            this.LocalBucketID = localBucketID;
            // to ensure "remoteBucketID" is required (not null)
            if (remoteBucketID == null)
            {
                throw new InvalidDataException("remoteBucketID is a required property for ReplicationCreationRequest and cannot be null");
            }
            this.RemoteBucketID = remoteBucketID;
            // to ensure "maxQueueSizeBytes" is required (not null)
            if (maxQueueSizeBytes == null)
            {
                throw new InvalidDataException("maxQueueSizeBytes is a required property for ReplicationCreationRequest and cannot be null");
            }
            this.MaxQueueSizeBytes = maxQueueSizeBytes;
            this.Description = description;
            // use default value if no "dropNonRetryableData" provided
            if (dropNonRetryableData == null)
            {
                this.DropNonRetryableData = false;
            }
            else
            {
                this.DropNonRetryableData = dropNonRetryableData;
            }
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets OrgID
        /// </summary>
        [DataMember(Name="orgID", EmitDefaultValue=false)]
        public string OrgID { get; set; }

        /// <summary>
        /// Gets or Sets RemoteID
        /// </summary>
        [DataMember(Name="remoteID", EmitDefaultValue=false)]
        public string RemoteID { get; set; }

        /// <summary>
        /// Gets or Sets LocalBucketID
        /// </summary>
        [DataMember(Name="localBucketID", EmitDefaultValue=false)]
        public string LocalBucketID { get; set; }

        /// <summary>
        /// Gets or Sets RemoteBucketID
        /// </summary>
        [DataMember(Name="remoteBucketID", EmitDefaultValue=false)]
        public string RemoteBucketID { get; set; }

        /// <summary>
        /// Gets or Sets MaxQueueSizeBytes
        /// </summary>
        [DataMember(Name="maxQueueSizeBytes", EmitDefaultValue=false)]
        public long? MaxQueueSizeBytes { get; set; }

        /// <summary>
        /// Gets or Sets DropNonRetryableData
        /// </summary>
        [DataMember(Name="dropNonRetryableData", EmitDefaultValue=false)]
        public bool? DropNonRetryableData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplicationCreationRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  OrgID: ").Append(OrgID).Append("\n");
            sb.Append("  RemoteID: ").Append(RemoteID).Append("\n");
            sb.Append("  LocalBucketID: ").Append(LocalBucketID).Append("\n");
            sb.Append("  RemoteBucketID: ").Append(RemoteBucketID).Append("\n");
            sb.Append("  MaxQueueSizeBytes: ").Append(MaxQueueSizeBytes).Append("\n");
            sb.Append("  DropNonRetryableData: ").Append(DropNonRetryableData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReplicationCreationRequest);
        }

        /// <summary>
        /// Returns true if ReplicationCreationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReplicationCreationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplicationCreationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null && this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null && this.Description.Equals(input.Description))
                ) && 
                (
                    this.OrgID == input.OrgID ||
                    (this.OrgID != null && this.OrgID.Equals(input.OrgID))
                ) && 
                (
                    this.RemoteID == input.RemoteID ||
                    (this.RemoteID != null && this.RemoteID.Equals(input.RemoteID))
                ) && 
                (
                    this.LocalBucketID == input.LocalBucketID ||
                    (this.LocalBucketID != null && this.LocalBucketID.Equals(input.LocalBucketID))
                ) && 
                (
                    this.RemoteBucketID == input.RemoteBucketID ||
                    (this.RemoteBucketID != null && this.RemoteBucketID.Equals(input.RemoteBucketID))
                ) && 
                (
                    this.MaxQueueSizeBytes == input.MaxQueueSizeBytes ||
                    (this.MaxQueueSizeBytes != null && this.MaxQueueSizeBytes.Equals(input.MaxQueueSizeBytes))
                ) && 
                (
                    this.DropNonRetryableData == input.DropNonRetryableData ||
                    (this.DropNonRetryableData != null && this.DropNonRetryableData.Equals(input.DropNonRetryableData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.OrgID != null)
                    hashCode = hashCode * 59 + this.OrgID.GetHashCode();
                if (this.RemoteID != null)
                    hashCode = hashCode * 59 + this.RemoteID.GetHashCode();
                if (this.LocalBucketID != null)
                    hashCode = hashCode * 59 + this.LocalBucketID.GetHashCode();
                if (this.RemoteBucketID != null)
                    hashCode = hashCode * 59 + this.RemoteBucketID.GetHashCode();
                if (this.MaxQueueSizeBytes != null)
                    hashCode = hashCode * 59 + this.MaxQueueSizeBytes.GetHashCode();
                if (this.DropNonRetryableData != null)
                    hashCode = hashCode * 59 + this.DropNonRetryableData.GetHashCode();
                return hashCode;
            }
        }

    }

}
