/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// HealthCheck
    /// </summary>
    [DataContract]
    public partial class HealthCheck : IEquatable<HealthCheck>
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pass for value: pass
            /// </summary>
            [EnumMember(Value = "pass")] Pass = 1,

            /// <summary>
            /// Enum Fail for value: fail
            /// </summary>
            [EnumMember(Value = "fail")] Fail = 2
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="HealthCheck" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HealthCheck()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HealthCheck" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="message">message.</param>
        /// <param name="checks">checks.</param>
        /// <param name="status">status (required).</param>
        /// <param name="version">version.</param>
        /// <param name="commit">commit.</param>
        public HealthCheck(string name = default, string message = default, List<HealthCheck> checks = default,
            StatusEnum status = default, string version = default, string commit = default)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for HealthCheck and cannot be null");
            }

            Name = name;
            // to ensure "status" is required (not null)
            Status = status;
            Message = message;
            Checks = checks;
            Version = version;
            Commit = commit;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Checks
        /// </summary>
        [DataMember(Name = "checks", EmitDefaultValue = false)]
        public List<HealthCheck> Checks { get; set; }


        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets Commit
        /// </summary>
        [DataMember(Name = "commit", EmitDefaultValue = false)]
        public string Commit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HealthCheck {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Checks: ").Append(Checks).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Commit: ").Append(Commit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as HealthCheck);
        }

        /// <summary>
        /// Returns true if HealthCheck instances are equal
        /// </summary>
        /// <param name="input">Instance of HealthCheck to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HealthCheck input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Name == input.Name ||
                    Name != null && Name.Equals(input.Name)
                ) &&
                (
                    Message == input.Message ||
                    Message != null && Message.Equals(input.Message)
                ) &&
                (
                    Checks == input.Checks ||
                    Checks != null &&
                    Checks.SequenceEqual(input.Checks)
                ) &&
                (
                    Status == input.Status ||
                    Status.Equals(input.Status)
                ) &&
                (
                    Version == input.Version ||
                    Version != null && Version.Equals(input.Version)
                ) &&
                (
                    Commit == input.Commit ||
                    Commit != null && Commit.Equals(input.Commit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                if (Name != null)
                {
                    hashCode = hashCode * 59 + Name.GetHashCode();
                }

                if (Message != null)
                {
                    hashCode = hashCode * 59 + Message.GetHashCode();
                }

                if (Checks != null)
                {
                    hashCode = hashCode * 59 + Checks.GetHashCode();
                }

                hashCode = hashCode * 59 + Status.GetHashCode();
                if (Version != null)
                {
                    hashCode = hashCode * 59 + Version.GetHashCode();
                }

                if (Commit != null)
                {
                    hashCode = hashCode * 59 + Commit.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}