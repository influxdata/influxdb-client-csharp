/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// RemoteConnectionUpdateRequest
    /// </summary>
    [DataContract]
    public partial class RemoteConnectionUpdateRequest :  IEquatable<RemoteConnectionUpdateRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteConnectionUpdateRequest" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="remoteURL">remoteURL.</param>
        /// <param name="remoteAPIToken">remoteAPIToken.</param>
        /// <param name="remoteOrgID">remoteOrgID.</param>
        /// <param name="allowInsecureTLS">allowInsecureTLS (default to false).</param>
        public RemoteConnectionUpdateRequest(string name = default(string), string description = default(string), string remoteURL = default(string), string remoteAPIToken = default(string), string remoteOrgID = default(string), bool? allowInsecureTLS = false)
        {
            this.Name = name;
            this.Description = description;
            this.RemoteURL = remoteURL;
            this.RemoteAPIToken = remoteAPIToken;
            this.RemoteOrgID = remoteOrgID;
            // use default value if no "allowInsecureTLS" provided
            if (allowInsecureTLS == null)
            {
                this.AllowInsecureTLS = false;
            }
            else
            {
                this.AllowInsecureTLS = allowInsecureTLS;
            }
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets RemoteURL
        /// </summary>
        [DataMember(Name="remoteURL", EmitDefaultValue=false)]
        public string RemoteURL { get; set; }

        /// <summary>
        /// Gets or Sets RemoteAPIToken
        /// </summary>
        [DataMember(Name="remoteAPIToken", EmitDefaultValue=false)]
        public string RemoteAPIToken { get; set; }

        /// <summary>
        /// Gets or Sets RemoteOrgID
        /// </summary>
        [DataMember(Name="remoteOrgID", EmitDefaultValue=false)]
        public string RemoteOrgID { get; set; }

        /// <summary>
        /// Gets or Sets AllowInsecureTLS
        /// </summary>
        [DataMember(Name="allowInsecureTLS", EmitDefaultValue=false)]
        public bool? AllowInsecureTLS { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteConnectionUpdateRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RemoteURL: ").Append(RemoteURL).Append("\n");
            sb.Append("  RemoteAPIToken: ").Append(RemoteAPIToken).Append("\n");
            sb.Append("  RemoteOrgID: ").Append(RemoteOrgID).Append("\n");
            sb.Append("  AllowInsecureTLS: ").Append(AllowInsecureTLS).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RemoteConnectionUpdateRequest);
        }

        /// <summary>
        /// Returns true if RemoteConnectionUpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RemoteConnectionUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteConnectionUpdateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.RemoteURL == input.RemoteURL ||
                    (this.RemoteURL != null &&
                    this.RemoteURL.Equals(input.RemoteURL))
                ) && 
                (
                    this.RemoteAPIToken == input.RemoteAPIToken ||
                    (this.RemoteAPIToken != null &&
                    this.RemoteAPIToken.Equals(input.RemoteAPIToken))
                ) && 
                (
                    this.RemoteOrgID == input.RemoteOrgID ||
                    (this.RemoteOrgID != null &&
                    this.RemoteOrgID.Equals(input.RemoteOrgID))
                ) && 
                (
                    this.AllowInsecureTLS == input.AllowInsecureTLS ||
                    (this.AllowInsecureTLS != null &&
                    this.AllowInsecureTLS.Equals(input.AllowInsecureTLS))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.RemoteURL != null)
                    hashCode = hashCode * 59 + this.RemoteURL.GetHashCode();
                if (this.RemoteAPIToken != null)
                    hashCode = hashCode * 59 + this.RemoteAPIToken.GetHashCode();
                if (this.RemoteOrgID != null)
                    hashCode = hashCode * 59 + this.RemoteOrgID.GetHashCode();
                if (this.AllowInsecureTLS != null)
                    hashCode = hashCode * 59 + this.AllowInsecureTLS.GetHashCode();
                return hashCode;
            }
        }

    }

}
