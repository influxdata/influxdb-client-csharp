/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// LegacyAuthorizationPostRequest
    /// </summary>
    [DataContract]
    public partial class LegacyAuthorizationPostRequest : AuthorizationUpdateRequest,
        IEquatable<LegacyAuthorizationPostRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LegacyAuthorizationPostRequest" /> class.
        /// </summary>
        /// <param name="orgID">ID of org that authorization is scoped to..</param>
        /// <param name="userID">ID of user that authorization is scoped to..</param>
        /// <param name="token">Token (name) of the authorization.</param>
        /// <param name="permissions">List of permissions for an auth.  An auth must have at least one Permission..</param>
        public LegacyAuthorizationPostRequest(string orgID = default, string userID = default, string token = default,
            List<Permission> permissions = default, StatusEnum? status = StatusEnum.Active,
            string description = default) : base(status, description)
        {
            OrgID = orgID;
            UserID = userID;
            Token = token;
            Permissions = permissions;
        }

        /// <summary>
        /// ID of org that authorization is scoped to.
        /// </summary>
        /// <value>ID of org that authorization is scoped to.</value>
        [DataMember(Name = "orgID", EmitDefaultValue = false)]
        public string OrgID { get; set; }

        /// <summary>
        /// ID of user that authorization is scoped to.
        /// </summary>
        /// <value>ID of user that authorization is scoped to.</value>
        [DataMember(Name = "userID", EmitDefaultValue = false)]
        public string UserID { get; set; }

        /// <summary>
        /// Token (name) of the authorization
        /// </summary>
        /// <value>Token (name) of the authorization</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// List of permissions for an auth.  An auth must have at least one Permission.
        /// </summary>
        /// <value>List of permissions for an auth.  An auth must have at least one Permission.</value>
        [DataMember(Name = "permissions", EmitDefaultValue = false)]
        public List<Permission> Permissions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LegacyAuthorizationPostRequest {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  OrgID: ").Append(OrgID).Append("\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as LegacyAuthorizationPostRequest);
        }

        /// <summary>
        /// Returns true if LegacyAuthorizationPostRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of LegacyAuthorizationPostRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LegacyAuthorizationPostRequest input)
        {
            if (input == null)
            {
                return false;
            }

            return base.Equals(input) &&
                   (
                       OrgID == input.OrgID ||
                       OrgID != null && OrgID.Equals(input.OrgID)
                   ) && base.Equals(input) &&
                   (
                       UserID == input.UserID ||
                       UserID != null && UserID.Equals(input.UserID)
                   ) && base.Equals(input) &&
                   (
                       Token == input.Token ||
                       Token != null && Token.Equals(input.Token)
                   ) && base.Equals(input) &&
                   (
                       Permissions == input.Permissions ||
                       Permissions != null &&
                       Permissions.SequenceEqual(input.Permissions)
                   );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();

                if (OrgID != null)
                {
                    hashCode = hashCode * 59 + OrgID.GetHashCode();
                }

                if (UserID != null)
                {
                    hashCode = hashCode * 59 + UserID.GetHashCode();
                }

                if (Token != null)
                {
                    hashCode = hashCode * 59 + Token.GetHashCode();
                }

                if (Permissions != null)
                {
                    hashCode = hashCode * 59 + Permissions.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}