/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// AuthorizationPostRequest
    /// </summary>
    [DataContract]
    public partial class AuthorizationPostRequest : AuthorizationUpdateRequest,  IEquatable<AuthorizationPostRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationPostRequest" /> class.
        /// </summary>
        /// <param name="orgID">ID of org that authorization is scoped to..</param>
        /// <param name="userID">ID of user that authorization is scoped to..</param>
        /// <param name="permissions">List of permissions for an auth.  An auth must have at least one Permission..</param>
        public AuthorizationPostRequest(string orgID = default(string), string userID = default(string), List<Permission> permissions = default(List<Permission>), StatusEnum? status = StatusEnum.Active, string description = default(string)) : base(status, description)
        {
            this.OrgID = orgID;
            this.UserID = userID;
            this.Permissions = permissions;
        }

        /// <summary>
        /// ID of org that authorization is scoped to.
        /// </summary>
        /// <value>ID of org that authorization is scoped to.</value>
        [DataMember(Name="orgID", EmitDefaultValue=false)]
        public string OrgID { get; set; }

        /// <summary>
        /// ID of user that authorization is scoped to.
        /// </summary>
        /// <value>ID of user that authorization is scoped to.</value>
        [DataMember(Name="userID", EmitDefaultValue=false)]
        public string UserID { get; set; }

        /// <summary>
        /// List of permissions for an auth.  An auth must have at least one Permission.
        /// </summary>
        /// <value>List of permissions for an auth.  An auth must have at least one Permission.</value>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public List<Permission> Permissions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthorizationPostRequest {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  OrgID: ").Append(OrgID).Append("\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthorizationPostRequest);
        }

        /// <summary>
        /// Returns true if AuthorizationPostRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthorizationPostRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthorizationPostRequest input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.OrgID == input.OrgID ||
                    (this.OrgID != null && this.OrgID.Equals(input.OrgID))
                ) && base.Equals(input) && 
                (
                    this.UserID == input.UserID ||
                    (this.UserID != null && this.UserID.Equals(input.UserID))
                ) && base.Equals(input) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.SequenceEqual(input.Permissions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                
                if (this.OrgID != null)
                    hashCode = hashCode * 59 + this.OrgID.GetHashCode();
                if (this.UserID != null)
                    hashCode = hashCode * 59 + this.UserID.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                return hashCode;
            }
        }

    }

}
