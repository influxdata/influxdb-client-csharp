/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// NotificationEndpoints
    /// </summary>
    [DataContract]
    public partial class NotificationEndpoints : IEquatable<NotificationEndpoints>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationEndpoints" /> class.
        /// </summary>
        /// <param name="notificationEndpoints">notificationEndpoints.</param>
        /// <param name="links">links.</param>
        public NotificationEndpoints(List<NotificationEndpoint> notificationEndpoints = default, Links links = default)
        {
            _NotificationEndpoints = notificationEndpoints;
            Links = links;
        }

        /// <summary>
        /// Gets or Sets _NotificationEndpoints
        /// </summary>
        [DataMember(Name = "notificationEndpoints", EmitDefaultValue = false)]
        public List<NotificationEndpoint> _NotificationEndpoints { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public Links Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationEndpoints {\n");
            sb.Append("  _NotificationEndpoints: ").Append(_NotificationEndpoints).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as NotificationEndpoints);
        }

        /// <summary>
        /// Returns true if NotificationEndpoints instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationEndpoints to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationEndpoints input)
        {
            if (input == null)
            {
                return false;
            }

            return
            (
                _NotificationEndpoints == input._NotificationEndpoints ||
                _NotificationEndpoints != null &&
                _NotificationEndpoints.SequenceEqual(input._NotificationEndpoints)
            ) && Links != null && Links.Equals(input.Links);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;

                if (_NotificationEndpoints != null)
                {
                    hashCode = hashCode * 59 + _NotificationEndpoints.GetHashCode();
                }

                if (Links != null)
                {
                    hashCode = hashCode * 59 + Links.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}