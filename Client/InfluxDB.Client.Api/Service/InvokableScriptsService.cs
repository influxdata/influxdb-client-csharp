/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using InfluxDB.Client.Api.Client;
using InfluxDB.Client.Api.Domain;

namespace InfluxDB.Client.Api.Service
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvokableScriptsService : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// Delete a script
        /// </summary>
        /// <remarks>
        /// Deletes a script and all associated records.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The ID of the script to delete.</param>
        /// <returns></returns>
        void DeleteScriptsID(string scriptID);

        /// <summary>
        /// Delete a script
        /// </summary>
        /// <remarks>
        /// Deletes a script and all associated records.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The ID of the script to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> DeleteScriptsIDWithHttpInfo(string scriptID);

        /// <summary>
        /// List scripts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of scripts to return. (optional)</param>
        /// <param name="offset">The offset for pagination. (optional)</param>
        /// <returns>Scripts</returns>
        Scripts GetScripts(int? limit = null, int? offset = null);

        /// <summary>
        /// List scripts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of scripts to return. (optional)</param>
        /// <param name="offset">The offset for pagination. (optional)</param>
        /// <returns>ApiResponse of Scripts</returns>
        ApiResponse<Scripts> GetScriptsWithHttpInfo(int? limit = null, int? offset = null);

        /// <summary>
        /// Retrieve a script
        /// </summary>
        /// <remarks>
        /// Uses script ID to retrieve details of an invokable script.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <returns>Script</returns>
        Script GetScriptsID(string scriptID);

        /// <summary>
        /// Retrieve a script
        /// </summary>
        /// <remarks>
        /// Uses script ID to retrieve details of an invokable script.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <returns>ApiResponse of Script</returns>
        ApiResponse<Script> GetScriptsIDWithHttpInfo(string scriptID);

        /// <summary>
        /// Update a script
        /// </summary>
        /// <remarks>
        /// Updates properties (&#x60;name&#x60;, &#x60;description&#x60;, and &#x60;script&#x60;) of an invokable script.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <param name="scriptUpdateRequest">Script update to apply</param>
        /// <returns>Script</returns>
        Script PatchScriptsID(string scriptID, ScriptUpdateRequest scriptUpdateRequest);

        /// <summary>
        /// Update a script
        /// </summary>
        /// <remarks>
        /// Updates properties (&#x60;name&#x60;, &#x60;description&#x60;, and &#x60;script&#x60;) of an invokable script.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <param name="scriptUpdateRequest">Script update to apply</param>
        /// <returns>ApiResponse of Script</returns>
        ApiResponse<Script> PatchScriptsIDWithHttpInfo(string scriptID, ScriptUpdateRequest scriptUpdateRequest);

        /// <summary>
        /// Create a script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptCreateRequest">The script to create.</param>
        /// <returns>Script</returns>
        Script PostScripts(ScriptCreateRequest scriptCreateRequest);

        /// <summary>
        /// Create a script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptCreateRequest">The script to create.</param>
        /// <returns>ApiResponse of Script</returns>
        ApiResponse<Script> PostScriptsWithHttpInfo(ScriptCreateRequest scriptCreateRequest);

        /// <summary>
        /// Invoke a script
        /// </summary>
        /// <remarks>
        /// Invokes a script and substitutes &#x60;params&#x60; keys referenced in the script with &#x60;params&#x60; key-values sent in the request body.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID"></param>
        /// <param name="scriptInvocationParams"> (optional)</param>
        /// <returns>string</returns>
        string PostScriptsIDInvoke(string scriptID, ScriptInvocationParams scriptInvocationParams = null);

        /// <summary>
        /// Invoke a script
        /// </summary>
        /// <remarks>
        /// Invokes a script and substitutes &#x60;params&#x60; keys referenced in the script with &#x60;params&#x60; key-values sent in the request body.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID"></param>
        /// <param name="scriptInvocationParams"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostScriptsIDInvokeWithHttpInfo(string scriptID,
            ScriptInvocationParams scriptInvocationParams = null);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        /// Delete a script
        /// </summary>
        /// <remarks>
        /// Deletes a script and all associated records.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The ID of the script to delete.</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task
            DeleteScriptsIDAsync(string scriptID, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a script
        /// </summary>
        /// <remarks>
        /// Deletes a script and all associated records.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The ID of the script to delete.</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> DeleteScriptsIDAsyncWithHttpInfo(string scriptID,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// List scripts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of scripts to return. (optional)</param>
        /// <param name="offset">The offset for pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of Scripts</returns>
        System.Threading.Tasks.Task<Scripts> GetScriptsAsync(int? limit = null, int? offset = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// List scripts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of scripts to return. (optional)</param>
        /// <param name="offset">The offset for pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (Scripts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Scripts>> GetScriptsAsyncWithHttpInfo(int? limit = null,
            int? offset = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve a script
        /// </summary>
        /// <remarks>
        /// Uses script ID to retrieve details of an invokable script.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of Script</returns>
        System.Threading.Tasks.Task<Script> GetScriptsIDAsync(string scriptID,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve a script
        /// </summary>
        /// <remarks>
        /// Uses script ID to retrieve details of an invokable script.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (Script)</returns>
        System.Threading.Tasks.Task<ApiResponse<Script>> GetScriptsIDAsyncWithHttpInfo(string scriptID,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a script
        /// </summary>
        /// <remarks>
        /// Updates properties (&#x60;name&#x60;, &#x60;description&#x60;, and &#x60;script&#x60;) of an invokable script.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <param name="scriptUpdateRequest">Script update to apply</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of Script</returns>
        System.Threading.Tasks.Task<Script> PatchScriptsIDAsync(string scriptID,
            ScriptUpdateRequest scriptUpdateRequest, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a script
        /// </summary>
        /// <remarks>
        /// Updates properties (&#x60;name&#x60;, &#x60;description&#x60;, and &#x60;script&#x60;) of an invokable script.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <param name="scriptUpdateRequest">Script update to apply</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (Script)</returns>
        System.Threading.Tasks.Task<ApiResponse<Script>> PatchScriptsIDAsyncWithHttpInfo(string scriptID,
            ScriptUpdateRequest scriptUpdateRequest, CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptCreateRequest">The script to create.</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of Script</returns>
        System.Threading.Tasks.Task<Script> PostScriptsAsync(ScriptCreateRequest scriptCreateRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a script
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptCreateRequest">The script to create.</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (Script)</returns>
        System.Threading.Tasks.Task<ApiResponse<Script>> PostScriptsAsyncWithHttpInfo(
            ScriptCreateRequest scriptCreateRequest, CancellationToken cancellationToken = default);

        /// <summary>
        /// Invoke a script
        /// </summary>
        /// <remarks>
        /// Invokes a script and substitutes &#x60;params&#x60; keys referenced in the script with &#x60;params&#x60; key-values sent in the request body.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID"></param>
        /// <param name="scriptInvocationParams"> (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostScriptsIDInvokeAsync(string scriptID,
            ScriptInvocationParams scriptInvocationParams = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Invoke a script
        /// </summary>
        /// <remarks>
        /// Invokes a script and substitutes &#x60;params&#x60; keys referenced in the script with &#x60;params&#x60; key-values sent in the request body.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID"></param>
        /// <param name="scriptInvocationParams"> (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostScriptsIDInvokeAsyncWithHttpInfo(string scriptID,
            ScriptInvocationParams scriptInvocationParams = null, CancellationToken cancellationToken = default);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InvokableScriptsService : IInvokableScriptsService
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InvokableScriptsService"/> class.
        /// </summary>
        /// <returns></returns>
        public InvokableScriptsService(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvokableScriptsService"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InvokableScriptsService(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
            {
                Configuration = Configuration.Default;
            }
            else
            {
                Configuration = configuration;
            }

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClientOptions.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete(
            "SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }

                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a script Deletes a script and all associated records.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The ID of the script to delete.</param>
        /// <returns></returns>
        public void DeleteScriptsID(string scriptID)
        {
            DeleteScriptsIDWithHttpInfo(scriptID);
        }

        /// <summary>
        /// Delete a script Deletes a script and all associated records.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The ID of the script to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> DeleteScriptsIDWithHttpInfo(string scriptID)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->DeleteScriptsID");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("DeleteScriptsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a script Deletes a script and all associated records.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The ID of the script to delete.</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public async System.Threading.Tasks.Task<RestResponse> DeleteScriptsIDWithIRestResponseAsync(string scriptID,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->DeleteScriptsID");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("DeleteScriptsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a script Deletes a script and all associated records.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The ID of the script to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public RestResponse DeleteScriptsIDWithIRestResponse(string scriptID)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->DeleteScriptsID");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("DeleteScriptsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a script Deletes a script and all associated records.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The ID of the script to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public RestRequest DeleteScriptsIDWithRestRequest(string scriptID)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->DeleteScriptsID");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            return Configuration.ApiClient.PrepareRequest(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);
        }

        /// <summary>
        /// Delete a script Deletes a script and all associated records.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The ID of the script to delete.</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of void</returns>
        public System.Threading.Tasks.Task DeleteScriptsIDAsync(string scriptID,
            CancellationToken cancellationToken = default)
        {
            return DeleteScriptsIDAsyncWithHttpInfo(scriptID, cancellationToken);
        }

        /// <summary>
        /// Delete a script Deletes a script and all associated records.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The ID of the script to delete.</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> DeleteScriptsIDAsyncWithHttpInfo(string scriptID,
            CancellationToken cancellationToken = default)
        {
            // make the HTTP request
            var localVarResponse = await DeleteScriptsIDAsyncWithIRestResponse(scriptID, cancellationToken)
                .ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("DeleteScriptsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a script Deletes a script and all associated records.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The ID of the script to delete.</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of RestResponse</returns>
        public async System.Threading.Tasks.Task<RestResponse> DeleteScriptsIDAsyncWithIRestResponse(string scriptID,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->DeleteScriptsID");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("DeleteScriptsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List scripts 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of scripts to return. (optional)</param>
        /// <param name="offset">The offset for pagination. (optional)</param>
        /// <returns>Scripts</returns>
        public Scripts GetScripts(int? limit = null, int? offset = null)
        {
            var localVarResponse = GetScriptsWithHttpInfo(limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List scripts 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of scripts to return. (optional)</param>
        /// <param name="offset">The offset for pagination. (optional)</param>
        /// <returns>ApiResponse of Scripts</returns>
        public ApiResponse<Scripts> GetScriptsWithHttpInfo(int? limit = null, int? offset = null)
        {
            var localVarPath = "/api/v2/scripts";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (limit != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            }

            if (offset != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetScripts", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<Scripts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Scripts)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Scripts)));
        }

        /// <summary>
        /// List scripts 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of scripts to return. (optional)</param>
        /// <param name="offset">The offset for pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>ApiResponse of Scripts</returns>
        public async System.Threading.Tasks.Task<RestResponse> GetScriptsWithIRestResponseAsync(int? limit = null,
            int? offset = null, CancellationToken cancellationToken = default)
        {
            var localVarPath = "/api/v2/scripts";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (limit != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            }

            if (offset != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetScripts", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List scripts 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of scripts to return. (optional)</param>
        /// <param name="offset">The offset for pagination. (optional)</param>
        /// <returns>ApiResponse of Scripts</returns>
        public RestResponse GetScriptsWithIRestResponse(int? limit = null, int? offset = null)
        {
            var localVarPath = "/api/v2/scripts";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (limit != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            }

            if (offset != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetScripts", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List scripts 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of scripts to return. (optional)</param>
        /// <param name="offset">The offset for pagination. (optional)</param>
        /// <returns>ApiResponse of Scripts</returns>
        public RestRequest GetScriptsWithRestRequest(int? limit = null, int? offset = null)
        {
            var localVarPath = "/api/v2/scripts";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (limit != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            }

            if (offset != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            return Configuration.ApiClient.PrepareRequest(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);
        }

        /// <summary>
        /// List scripts 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of scripts to return. (optional)</param>
        /// <param name="offset">The offset for pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of Scripts</returns>
        public async System.Threading.Tasks.Task<Scripts> GetScriptsAsync(int? limit = null, int? offset = null,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetScriptsAsyncWithHttpInfo(limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List scripts 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of scripts to return. (optional)</param>
        /// <param name="offset">The offset for pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (Scripts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Scripts>> GetScriptsAsyncWithHttpInfo(int? limit = null,
            int? offset = null, CancellationToken cancellationToken = default)
        {
            // make the HTTP request
            var localVarResponse = await GetScriptsAsyncWithIRestResponse(limit, offset, cancellationToken)
                .ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetScripts", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<Scripts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Scripts)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Scripts)));
        }

        /// <summary>
        /// List scripts 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of scripts to return. (optional)</param>
        /// <param name="offset">The offset for pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of RestResponse (Scripts)</returns>
        public async System.Threading.Tasks.Task<RestResponse> GetScriptsAsyncWithIRestResponse(int? limit = null,
            int? offset = null, CancellationToken cancellationToken = default)
        {
            var localVarPath = "/api/v2/scripts";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (limit != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            }

            if (offset != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetScripts", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a script Uses script ID to retrieve details of an invokable script.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <returns>Script</returns>
        public Script GetScriptsID(string scriptID)
        {
            var localVarResponse = GetScriptsIDWithHttpInfo(scriptID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a script Uses script ID to retrieve details of an invokable script.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <returns>ApiResponse of Script</returns>
        public ApiResponse<Script> GetScriptsIDWithHttpInfo(string scriptID)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->GetScriptsID");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetScriptsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<Script>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Script)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Script)));
        }

        /// <summary>
        /// Retrieve a script Uses script ID to retrieve details of an invokable script.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>ApiResponse of Script</returns>
        public async System.Threading.Tasks.Task<RestResponse> GetScriptsIDWithIRestResponseAsync(string scriptID,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->GetScriptsID");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetScriptsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a script Uses script ID to retrieve details of an invokable script.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <returns>ApiResponse of Script</returns>
        public RestResponse GetScriptsIDWithIRestResponse(string scriptID)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->GetScriptsID");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetScriptsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a script Uses script ID to retrieve details of an invokable script.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <returns>ApiResponse of Script</returns>
        public RestRequest GetScriptsIDWithRestRequest(string scriptID)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->GetScriptsID");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            return Configuration.ApiClient.PrepareRequest(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);
        }

        /// <summary>
        /// Retrieve a script Uses script ID to retrieve details of an invokable script.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of Script</returns>
        public async System.Threading.Tasks.Task<Script> GetScriptsIDAsync(string scriptID,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetScriptsIDAsyncWithHttpInfo(scriptID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a script Uses script ID to retrieve details of an invokable script.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (Script)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Script>> GetScriptsIDAsyncWithHttpInfo(string scriptID,
            CancellationToken cancellationToken = default)
        {
            // make the HTTP request
            var localVarResponse =
                await GetScriptsIDAsyncWithIRestResponse(scriptID, cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetScriptsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<Script>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Script)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Script)));
        }

        /// <summary>
        /// Retrieve a script Uses script ID to retrieve details of an invokable script.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of RestResponse (Script)</returns>
        public async System.Threading.Tasks.Task<RestResponse> GetScriptsIDAsyncWithIRestResponse(string scriptID,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->GetScriptsID");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetScriptsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a script Updates properties (&#x60;name&#x60;, &#x60;description&#x60;, and &#x60;script&#x60;) of an invokable script.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <param name="scriptUpdateRequest">Script update to apply</param>
        /// <returns>Script</returns>
        public Script PatchScriptsID(string scriptID, ScriptUpdateRequest scriptUpdateRequest)
        {
            var localVarResponse = PatchScriptsIDWithHttpInfo(scriptID, scriptUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a script Updates properties (&#x60;name&#x60;, &#x60;description&#x60;, and &#x60;script&#x60;) of an invokable script.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <param name="scriptUpdateRequest">Script update to apply</param>
        /// <returns>ApiResponse of Script</returns>
        public ApiResponse<Script> PatchScriptsIDWithHttpInfo(string scriptID, ScriptUpdateRequest scriptUpdateRequest)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->PatchScriptsID");
            }

            // verify the required parameter 'scriptUpdateRequest' is set
            if (scriptUpdateRequest == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptUpdateRequest' when calling InvokableScriptsService->PatchScriptsID");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            if (scriptUpdateRequest != null && scriptUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    Configuration.ApiClient.Serialize(scriptUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scriptUpdateRequest; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchScriptsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<Script>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Script)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Script)));
        }

        /// <summary>
        /// Update a script Updates properties (&#x60;name&#x60;, &#x60;description&#x60;, and &#x60;script&#x60;) of an invokable script.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <param name="scriptUpdateRequest">Script update to apply</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>ApiResponse of Script</returns>
        public async System.Threading.Tasks.Task<RestResponse> PatchScriptsIDWithIRestResponseAsync(string scriptID,
            ScriptUpdateRequest scriptUpdateRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->PatchScriptsID");
            }

            // verify the required parameter 'scriptUpdateRequest' is set
            if (scriptUpdateRequest == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptUpdateRequest' when calling InvokableScriptsService->PatchScriptsID");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            if (scriptUpdateRequest != null && scriptUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    Configuration.ApiClient.Serialize(scriptUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scriptUpdateRequest; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchScriptsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a script Updates properties (&#x60;name&#x60;, &#x60;description&#x60;, and &#x60;script&#x60;) of an invokable script.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <param name="scriptUpdateRequest">Script update to apply</param>
        /// <returns>ApiResponse of Script</returns>
        public RestResponse PatchScriptsIDWithIRestResponse(string scriptID, ScriptUpdateRequest scriptUpdateRequest)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->PatchScriptsID");
            }

            // verify the required parameter 'scriptUpdateRequest' is set
            if (scriptUpdateRequest == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptUpdateRequest' when calling InvokableScriptsService->PatchScriptsID");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            if (scriptUpdateRequest != null && scriptUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    Configuration.ApiClient.Serialize(scriptUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scriptUpdateRequest; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchScriptsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a script Updates properties (&#x60;name&#x60;, &#x60;description&#x60;, and &#x60;script&#x60;) of an invokable script.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <param name="scriptUpdateRequest">Script update to apply</param>
        /// <returns>ApiResponse of Script</returns>
        public RestRequest PatchScriptsIDWithRestRequest(string scriptID, ScriptUpdateRequest scriptUpdateRequest)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->PatchScriptsID");
            }

            // verify the required parameter 'scriptUpdateRequest' is set
            if (scriptUpdateRequest == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptUpdateRequest' when calling InvokableScriptsService->PatchScriptsID");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            if (scriptUpdateRequest != null && scriptUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    Configuration.ApiClient.Serialize(scriptUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scriptUpdateRequest; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            return Configuration.ApiClient.PrepareRequest(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);
        }

        /// <summary>
        /// Update a script Updates properties (&#x60;name&#x60;, &#x60;description&#x60;, and &#x60;script&#x60;) of an invokable script.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <param name="scriptUpdateRequest">Script update to apply</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of Script</returns>
        public async System.Threading.Tasks.Task<Script> PatchScriptsIDAsync(string scriptID,
            ScriptUpdateRequest scriptUpdateRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await PatchScriptsIDAsyncWithHttpInfo(scriptID, scriptUpdateRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a script Updates properties (&#x60;name&#x60;, &#x60;description&#x60;, and &#x60;script&#x60;) of an invokable script.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <param name="scriptUpdateRequest">Script update to apply</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (Script)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Script>> PatchScriptsIDAsyncWithHttpInfo(string scriptID,
            ScriptUpdateRequest scriptUpdateRequest, CancellationToken cancellationToken = default)
        {
            // make the HTTP request
            var localVarResponse =
                await PatchScriptsIDAsyncWithIRestResponse(scriptID, scriptUpdateRequest, cancellationToken)
                    .ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchScriptsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<Script>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Script)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Script)));
        }

        /// <summary>
        /// Update a script Updates properties (&#x60;name&#x60;, &#x60;description&#x60;, and &#x60;script&#x60;) of an invokable script.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID">The script ID.</param>
        /// <param name="scriptUpdateRequest">Script update to apply</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of RestResponse (Script)</returns>
        public async System.Threading.Tasks.Task<RestResponse> PatchScriptsIDAsyncWithIRestResponse(string scriptID,
            ScriptUpdateRequest scriptUpdateRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->PatchScriptsID");
            }

            // verify the required parameter 'scriptUpdateRequest' is set
            if (scriptUpdateRequest == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptUpdateRequest' when calling InvokableScriptsService->PatchScriptsID");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            if (scriptUpdateRequest != null && scriptUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    Configuration.ApiClient.Serialize(scriptUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scriptUpdateRequest; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchScriptsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a script 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptCreateRequest">The script to create.</param>
        /// <returns>Script</returns>
        public Script PostScripts(ScriptCreateRequest scriptCreateRequest)
        {
            var localVarResponse = PostScriptsWithHttpInfo(scriptCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a script 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptCreateRequest">The script to create.</param>
        /// <returns>ApiResponse of Script</returns>
        public ApiResponse<Script> PostScriptsWithHttpInfo(ScriptCreateRequest scriptCreateRequest)
        {
            // verify the required parameter 'scriptCreateRequest' is set
            if (scriptCreateRequest == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptCreateRequest' when calling InvokableScriptsService->PostScripts");
            }

            var localVarPath = "/api/v2/scripts";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptCreateRequest != null && scriptCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    Configuration.ApiClient.Serialize(scriptCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scriptCreateRequest; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostScripts", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<Script>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Script)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Script)));
        }

        /// <summary>
        /// Create a script 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptCreateRequest">The script to create.</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>ApiResponse of Script</returns>
        public async System.Threading.Tasks.Task<RestResponse> PostScriptsWithIRestResponseAsync(
            ScriptCreateRequest scriptCreateRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'scriptCreateRequest' is set
            if (scriptCreateRequest == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptCreateRequest' when calling InvokableScriptsService->PostScripts");
            }

            var localVarPath = "/api/v2/scripts";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptCreateRequest != null && scriptCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    Configuration.ApiClient.Serialize(scriptCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scriptCreateRequest; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostScripts", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a script 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptCreateRequest">The script to create.</param>
        /// <returns>ApiResponse of Script</returns>
        public RestResponse PostScriptsWithIRestResponse(ScriptCreateRequest scriptCreateRequest)
        {
            // verify the required parameter 'scriptCreateRequest' is set
            if (scriptCreateRequest == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptCreateRequest' when calling InvokableScriptsService->PostScripts");
            }

            var localVarPath = "/api/v2/scripts";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptCreateRequest != null && scriptCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    Configuration.ApiClient.Serialize(scriptCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scriptCreateRequest; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostScripts", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a script 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptCreateRequest">The script to create.</param>
        /// <returns>ApiResponse of Script</returns>
        public RestRequest PostScriptsWithRestRequest(ScriptCreateRequest scriptCreateRequest)
        {
            // verify the required parameter 'scriptCreateRequest' is set
            if (scriptCreateRequest == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptCreateRequest' when calling InvokableScriptsService->PostScripts");
            }

            var localVarPath = "/api/v2/scripts";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptCreateRequest != null && scriptCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    Configuration.ApiClient.Serialize(scriptCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scriptCreateRequest; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            return Configuration.ApiClient.PrepareRequest(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);
        }

        /// <summary>
        /// Create a script 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptCreateRequest">The script to create.</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of Script</returns>
        public async System.Threading.Tasks.Task<Script> PostScriptsAsync(ScriptCreateRequest scriptCreateRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await PostScriptsAsyncWithHttpInfo(scriptCreateRequest, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a script 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptCreateRequest">The script to create.</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (Script)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Script>> PostScriptsAsyncWithHttpInfo(
            ScriptCreateRequest scriptCreateRequest, CancellationToken cancellationToken = default)
        {
            // make the HTTP request
            var localVarResponse = await PostScriptsAsyncWithIRestResponse(scriptCreateRequest, cancellationToken)
                .ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostScripts", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<Script>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Script)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Script)));
        }

        /// <summary>
        /// Create a script 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptCreateRequest">The script to create.</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of RestResponse (Script)</returns>
        public async System.Threading.Tasks.Task<RestResponse> PostScriptsAsyncWithIRestResponse(
            ScriptCreateRequest scriptCreateRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'scriptCreateRequest' is set
            if (scriptCreateRequest == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptCreateRequest' when calling InvokableScriptsService->PostScripts");
            }

            var localVarPath = "/api/v2/scripts";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptCreateRequest != null && scriptCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    Configuration.ApiClient.Serialize(scriptCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scriptCreateRequest; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostScripts", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invoke a script Invokes a script and substitutes &#x60;params&#x60; keys referenced in the script with &#x60;params&#x60; key-values sent in the request body.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID"></param>
        /// <param name="scriptInvocationParams"> (optional)</param>
        /// <returns>string</returns>
        public string PostScriptsIDInvoke(string scriptID, ScriptInvocationParams scriptInvocationParams = null)
        {
            var localVarResponse = PostScriptsIDInvokeWithHttpInfo(scriptID, scriptInvocationParams);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invoke a script Invokes a script and substitutes &#x60;params&#x60; keys referenced in the script with &#x60;params&#x60; key-values sent in the request body.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID"></param>
        /// <param name="scriptInvocationParams"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> PostScriptsIDInvokeWithHttpInfo(string scriptID,
            ScriptInvocationParams scriptInvocationParams = null)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->PostScriptsIDInvoke");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}/invoke";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            if (scriptInvocationParams != null && scriptInvocationParams.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    Configuration.ApiClient.Serialize(scriptInvocationParams); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scriptInvocationParams; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostScriptsIDInvoke", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string)Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Invoke a script Invokes a script and substitutes &#x60;params&#x60; keys referenced in the script with &#x60;params&#x60; key-values sent in the request body.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID"></param>
        /// <param name="scriptInvocationParams"> (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>ApiResponse of string</returns>
        public async System.Threading.Tasks.Task<RestResponse> PostScriptsIDInvokeWithIRestResponseAsync(
            string scriptID, ScriptInvocationParams scriptInvocationParams = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->PostScriptsIDInvoke");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}/invoke";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            if (scriptInvocationParams != null && scriptInvocationParams.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    Configuration.ApiClient.Serialize(scriptInvocationParams); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scriptInvocationParams; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostScriptsIDInvoke", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invoke a script Invokes a script and substitutes &#x60;params&#x60; keys referenced in the script with &#x60;params&#x60; key-values sent in the request body.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID"></param>
        /// <param name="scriptInvocationParams"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public RestResponse PostScriptsIDInvokeWithIRestResponse(string scriptID,
            ScriptInvocationParams scriptInvocationParams = null)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->PostScriptsIDInvoke");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}/invoke";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            if (scriptInvocationParams != null && scriptInvocationParams.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    Configuration.ApiClient.Serialize(scriptInvocationParams); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scriptInvocationParams; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostScriptsIDInvoke", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invoke a script Invokes a script and substitutes &#x60;params&#x60; keys referenced in the script with &#x60;params&#x60; key-values sent in the request body.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID"></param>
        /// <param name="scriptInvocationParams"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public RestRequest PostScriptsIDInvokeWithRestRequest(string scriptID,
            ScriptInvocationParams scriptInvocationParams = null)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->PostScriptsIDInvoke");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}/invoke";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            if (scriptInvocationParams != null && scriptInvocationParams.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    Configuration.ApiClient.Serialize(scriptInvocationParams); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scriptInvocationParams; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            return Configuration.ApiClient.PrepareRequest(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);
        }

        /// <summary>
        /// Invoke a script Invokes a script and substitutes &#x60;params&#x60; keys referenced in the script with &#x60;params&#x60; key-values sent in the request body.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID"></param>
        /// <param name="scriptInvocationParams"> (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostScriptsIDInvokeAsync(string scriptID,
            ScriptInvocationParams scriptInvocationParams = null, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await PostScriptsIDInvokeAsyncWithHttpInfo(scriptID, scriptInvocationParams, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invoke a script Invokes a script and substitutes &#x60;params&#x60; keys referenced in the script with &#x60;params&#x60; key-values sent in the request body.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID"></param>
        /// <param name="scriptInvocationParams"> (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostScriptsIDInvokeAsyncWithHttpInfo(
            string scriptID, ScriptInvocationParams scriptInvocationParams = null,
            CancellationToken cancellationToken = default)
        {
            // make the HTTP request
            var localVarResponse =
                await PostScriptsIDInvokeAsyncWithIRestResponse(scriptID, scriptInvocationParams, cancellationToken)
                    .ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostScriptsIDInvoke", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string)Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Invoke a script Invokes a script and substitutes &#x60;params&#x60; keys referenced in the script with &#x60;params&#x60; key-values sent in the request body.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scriptID"></param>
        /// <param name="scriptInvocationParams"> (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of RestResponse (string)</returns>
        public async System.Threading.Tasks.Task<RestResponse> PostScriptsIDInvokeAsyncWithIRestResponse(
            string scriptID, ScriptInvocationParams scriptInvocationParams = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'scriptID' is set
            if (scriptID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'scriptID' when calling InvokableScriptsService->PostScriptsIDInvoke");
            }

            var localVarPath = "/api/v2/scripts/{scriptID}/invoke";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (scriptID != null)
            {
                localVarPathParams.Add("scriptID",
                    Configuration.ApiClient.ParameterToString(scriptID)); // path parameter
            }

            if (scriptInvocationParams != null && scriptInvocationParams.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    Configuration.ApiClient.Serialize(scriptInvocationParams); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scriptInvocationParams; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostScriptsIDInvoke", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }
    }
}