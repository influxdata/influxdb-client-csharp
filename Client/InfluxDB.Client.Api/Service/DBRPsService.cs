/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using InfluxDB.Client.Api.Client;
using InfluxDB.Client.Api.Domain;

namespace InfluxDB.Client.Api.Service
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDBRPsService : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// Delete a database retention policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <returns></returns>
        void DeleteDBRPID(string dbrpID, string zapTraceSpan = null, string orgID = null, string org = null);

        /// <summary>
        /// Delete a database retention policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> DeleteDBRPIDWithHttpInfo(string dbrpID, string zapTraceSpan = null, string orgID = null,
            string org = null);

        /// <summary>
        /// List database retention policy mappings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID to filter on (optional)</param>
        /// <param name="org">Specifies the organization name to filter on (optional)</param>
        /// <param name="id">Specifies the mapping ID to filter on (optional)</param>
        /// <param name="bucketID">Specifies the bucket ID to filter on (optional)</param>
        /// <param name="_default">Specifies filtering on default (optional)</param>
        /// <param name="db">Specifies the database to filter on (optional)</param>
        /// <param name="rp">Specifies the retention policy to filter on (optional)</param>
        /// <returns>DBRPs</returns>
        DBRPs GetDBRPs(string zapTraceSpan = null, string orgID = null, string org = null, string id = null,
            string bucketID = null, bool? _default = null, string db = null, string rp = null);

        /// <summary>
        /// List database retention policy mappings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID to filter on (optional)</param>
        /// <param name="org">Specifies the organization name to filter on (optional)</param>
        /// <param name="id">Specifies the mapping ID to filter on (optional)</param>
        /// <param name="bucketID">Specifies the bucket ID to filter on (optional)</param>
        /// <param name="_default">Specifies filtering on default (optional)</param>
        /// <param name="db">Specifies the database to filter on (optional)</param>
        /// <param name="rp">Specifies the retention policy to filter on (optional)</param>
        /// <returns>ApiResponse of DBRPs</returns>
        ApiResponse<DBRPs> GetDBRPsWithHttpInfo(string zapTraceSpan = null, string orgID = null, string org = null,
            string id = null, string bucketID = null, bool? _default = null, string db = null, string rp = null);

        /// <summary>
        /// Retrieve a database retention policy mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <returns>DBRPGet</returns>
        DBRPGet GetDBRPsID(string dbrpID, string zapTraceSpan = null, string orgID = null, string org = null);

        /// <summary>
        /// Retrieve a database retention policy mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <returns>ApiResponse of DBRPGet</returns>
        ApiResponse<DBRPGet> GetDBRPsIDWithHttpInfo(string dbrpID, string zapTraceSpan = null, string orgID = null,
            string org = null);

        /// <summary>
        /// Update a database retention policy mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping.</param>
        /// <param name="dBRPUpdate">Database retention policy update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <returns>DBRPGet</returns>
        DBRPGet PatchDBRPID(string dbrpID, DBRPUpdate dBRPUpdate, string zapTraceSpan = null, string orgID = null,
            string org = null);

        /// <summary>
        /// Update a database retention policy mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping.</param>
        /// <param name="dBRPUpdate">Database retention policy update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <returns>ApiResponse of DBRPGet</returns>
        ApiResponse<DBRPGet> PatchDBRPIDWithHttpInfo(string dbrpID, DBRPUpdate dBRPUpdate, string zapTraceSpan = null,
            string orgID = null, string org = null);

        /// <summary>
        /// Add a database retention policy mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dBRPCreate">The database retention policy mapping to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>DBRP</returns>
        DBRP PostDBRP(DBRPCreate dBRPCreate, string zapTraceSpan = null);

        /// <summary>
        /// Add a database retention policy mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dBRPCreate">The database retention policy mapping to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of DBRP</returns>
        ApiResponse<DBRP> PostDBRPWithHttpInfo(DBRPCreate dBRPCreate, string zapTraceSpan = null);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        /// Delete a database retention policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDBRPIDAsync(string dbrpID, string zapTraceSpan = null, string orgID = null,
            string org = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a database retention policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> DeleteDBRPIDAsyncWithHttpInfo(string dbrpID,
            string zapTraceSpan = null, string orgID = null, string org = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// List database retention policy mappings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID to filter on (optional)</param>
        /// <param name="org">Specifies the organization name to filter on (optional)</param>
        /// <param name="id">Specifies the mapping ID to filter on (optional)</param>
        /// <param name="bucketID">Specifies the bucket ID to filter on (optional)</param>
        /// <param name="_default">Specifies filtering on default (optional)</param>
        /// <param name="db">Specifies the database to filter on (optional)</param>
        /// <param name="rp">Specifies the retention policy to filter on (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of DBRPs</returns>
        System.Threading.Tasks.Task<DBRPs> GetDBRPsAsync(string zapTraceSpan = null, string orgID = null,
            string org = null, string id = null, string bucketID = null, bool? _default = null, string db = null,
            string rp = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// List database retention policy mappings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID to filter on (optional)</param>
        /// <param name="org">Specifies the organization name to filter on (optional)</param>
        /// <param name="id">Specifies the mapping ID to filter on (optional)</param>
        /// <param name="bucketID">Specifies the bucket ID to filter on (optional)</param>
        /// <param name="_default">Specifies filtering on default (optional)</param>
        /// <param name="db">Specifies the database to filter on (optional)</param>
        /// <param name="rp">Specifies the retention policy to filter on (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (DBRPs)</returns>
        System.Threading.Tasks.Task<ApiResponse<DBRPs>> GetDBRPsAsyncWithHttpInfo(string zapTraceSpan = null,
            string orgID = null, string org = null, string id = null, string bucketID = null, bool? _default = null,
            string db = null, string rp = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve a database retention policy mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of DBRPGet</returns>
        System.Threading.Tasks.Task<DBRPGet> GetDBRPsIDAsync(string dbrpID, string zapTraceSpan = null,
            string orgID = null, string org = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve a database retention policy mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (DBRPGet)</returns>
        System.Threading.Tasks.Task<ApiResponse<DBRPGet>> GetDBRPsIDAsyncWithHttpInfo(string dbrpID,
            string zapTraceSpan = null, string orgID = null, string org = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a database retention policy mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping.</param>
        /// <param name="dBRPUpdate">Database retention policy update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of DBRPGet</returns>
        System.Threading.Tasks.Task<DBRPGet> PatchDBRPIDAsync(string dbrpID, DBRPUpdate dBRPUpdate,
            string zapTraceSpan = null, string orgID = null, string org = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a database retention policy mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping.</param>
        /// <param name="dBRPUpdate">Database retention policy update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (DBRPGet)</returns>
        System.Threading.Tasks.Task<ApiResponse<DBRPGet>> PatchDBRPIDAsyncWithHttpInfo(string dbrpID,
            DBRPUpdate dBRPUpdate, string zapTraceSpan = null, string orgID = null, string org = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a database retention policy mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dBRPCreate">The database retention policy mapping to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of DBRP</returns>
        System.Threading.Tasks.Task<DBRP> PostDBRPAsync(DBRPCreate dBRPCreate, string zapTraceSpan = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a database retention policy mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dBRPCreate">The database retention policy mapping to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (DBRP)</returns>
        System.Threading.Tasks.Task<ApiResponse<DBRP>> PostDBRPAsyncWithHttpInfo(DBRPCreate dBRPCreate,
            string zapTraceSpan = null, CancellationToken cancellationToken = default);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DBRPsService : IDBRPsService
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DBRPsService"/> class.
        /// </summary>
        /// <returns></returns>
        public DBRPsService(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DBRPsService"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DBRPsService(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
            {
                Configuration = Configuration.Default;
            }
            else
            {
                Configuration = configuration;
            }

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClientOptions.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete(
            "SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }

                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a database retention policy 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <returns></returns>
        public void DeleteDBRPID(string dbrpID, string zapTraceSpan = null, string orgID = null, string org = null)
        {
            DeleteDBRPIDWithHttpInfo(dbrpID, zapTraceSpan, orgID, org);
        }

        /// <summary>
        /// Delete a database retention policy 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> DeleteDBRPIDWithHttpInfo(string dbrpID, string zapTraceSpan = null,
            string orgID = null, string org = null)
        {
            // verify the required parameter 'dbrpID' is set
            if (dbrpID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dbrpID' when calling DBRPsService->DeleteDBRPID");
            }

            var localVarPath = "/api/v2/dbrps/{dbrpID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dbrpID != null)
            {
                localVarPathParams.Add("dbrpID", Configuration.ApiClient.ParameterToString(dbrpID)); // path parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("DeleteDBRPID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a database retention policy 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public async System.Threading.Tasks.Task<RestResponse> DeleteDBRPIDWithIRestResponseAsync(string dbrpID,
            string zapTraceSpan = null, string orgID = null, string org = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dbrpID' is set
            if (dbrpID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dbrpID' when calling DBRPsService->DeleteDBRPID");
            }

            var localVarPath = "/api/v2/dbrps/{dbrpID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dbrpID != null)
            {
                localVarPathParams.Add("dbrpID", Configuration.ApiClient.ParameterToString(dbrpID)); // path parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("DeleteDBRPID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a database retention policy 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public RestResponse DeleteDBRPIDWithIRestResponse(string dbrpID, string zapTraceSpan = null,
            string orgID = null, string org = null)
        {
            // verify the required parameter 'dbrpID' is set
            if (dbrpID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dbrpID' when calling DBRPsService->DeleteDBRPID");
            }

            var localVarPath = "/api/v2/dbrps/{dbrpID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dbrpID != null)
            {
                localVarPathParams.Add("dbrpID", Configuration.ApiClient.ParameterToString(dbrpID)); // path parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("DeleteDBRPID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a database retention policy 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public RestRequest DeleteDBRPIDWithRestRequest(string dbrpID, string zapTraceSpan = null, string orgID = null,
            string org = null)
        {
            // verify the required parameter 'dbrpID' is set
            if (dbrpID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dbrpID' when calling DBRPsService->DeleteDBRPID");
            }

            var localVarPath = "/api/v2/dbrps/{dbrpID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dbrpID != null)
            {
                localVarPathParams.Add("dbrpID", Configuration.ApiClient.ParameterToString(dbrpID)); // path parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            return Configuration.ApiClient.PrepareRequest(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);
        }

        /// <summary>
        /// Delete a database retention policy 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of void</returns>
        public System.Threading.Tasks.Task DeleteDBRPIDAsync(string dbrpID, string zapTraceSpan = null,
            string orgID = null, string org = null, CancellationToken cancellationToken = default)
        {
            return DeleteDBRPIDAsyncWithHttpInfo(dbrpID, zapTraceSpan, orgID, org, cancellationToken);
        }

        /// <summary>
        /// Delete a database retention policy 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> DeleteDBRPIDAsyncWithHttpInfo(string dbrpID,
            string zapTraceSpan = null, string orgID = null, string org = null,
            CancellationToken cancellationToken = default)
        {
            // make the HTTP request
            var localVarResponse =
                await DeleteDBRPIDAsyncWithIRestResponse(dbrpID, zapTraceSpan, orgID, org, cancellationToken)
                    .ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("DeleteDBRPID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a database retention policy 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of RestResponse</returns>
        public async System.Threading.Tasks.Task<RestResponse> DeleteDBRPIDAsyncWithIRestResponse(string dbrpID,
            string zapTraceSpan = null, string orgID = null, string org = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dbrpID' is set
            if (dbrpID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dbrpID' when calling DBRPsService->DeleteDBRPID");
            }

            var localVarPath = "/api/v2/dbrps/{dbrpID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dbrpID != null)
            {
                localVarPathParams.Add("dbrpID", Configuration.ApiClient.ParameterToString(dbrpID)); // path parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("DeleteDBRPID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List database retention policy mappings 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID to filter on (optional)</param>
        /// <param name="org">Specifies the organization name to filter on (optional)</param>
        /// <param name="id">Specifies the mapping ID to filter on (optional)</param>
        /// <param name="bucketID">Specifies the bucket ID to filter on (optional)</param>
        /// <param name="_default">Specifies filtering on default (optional)</param>
        /// <param name="db">Specifies the database to filter on (optional)</param>
        /// <param name="rp">Specifies the retention policy to filter on (optional)</param>
        /// <returns>DBRPs</returns>
        public DBRPs GetDBRPs(string zapTraceSpan = null, string orgID = null, string org = null, string id = null,
            string bucketID = null, bool? _default = null, string db = null, string rp = null)
        {
            var localVarResponse = GetDBRPsWithHttpInfo(zapTraceSpan, orgID, org, id, bucketID, _default, db, rp);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List database retention policy mappings 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID to filter on (optional)</param>
        /// <param name="org">Specifies the organization name to filter on (optional)</param>
        /// <param name="id">Specifies the mapping ID to filter on (optional)</param>
        /// <param name="bucketID">Specifies the bucket ID to filter on (optional)</param>
        /// <param name="_default">Specifies filtering on default (optional)</param>
        /// <param name="db">Specifies the database to filter on (optional)</param>
        /// <param name="rp">Specifies the retention policy to filter on (optional)</param>
        /// <returns>ApiResponse of DBRPs</returns>
        public ApiResponse<DBRPs> GetDBRPsWithHttpInfo(string zapTraceSpan = null, string orgID = null,
            string org = null, string id = null, string bucketID = null, bool? _default = null, string db = null,
            string rp = null)
        {
            var localVarPath = "/api/v2/dbrps";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (id != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            }

            if (bucketID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "bucketID", bucketID)); // query parameter
            }

            if (_default != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "default", _default)); // query parameter
            }

            if (db != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "db", db)); // query parameter
            }

            if (rp != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "rp", rp)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetDBRPs", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<DBRPs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DBRPs)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DBRPs)));
        }

        /// <summary>
        /// List database retention policy mappings 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID to filter on (optional)</param>
        /// <param name="org">Specifies the organization name to filter on (optional)</param>
        /// <param name="id">Specifies the mapping ID to filter on (optional)</param>
        /// <param name="bucketID">Specifies the bucket ID to filter on (optional)</param>
        /// <param name="_default">Specifies filtering on default (optional)</param>
        /// <param name="db">Specifies the database to filter on (optional)</param>
        /// <param name="rp">Specifies the retention policy to filter on (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>ApiResponse of DBRPs</returns>
        public async System.Threading.Tasks.Task<RestResponse> GetDBRPsWithIRestResponseAsync(
            string zapTraceSpan = null, string orgID = null, string org = null, string id = null,
            string bucketID = null, bool? _default = null, string db = null, string rp = null,
            CancellationToken cancellationToken = default)
        {
            var localVarPath = "/api/v2/dbrps";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (id != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            }

            if (bucketID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "bucketID", bucketID)); // query parameter
            }

            if (_default != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "default", _default)); // query parameter
            }

            if (db != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "db", db)); // query parameter
            }

            if (rp != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "rp", rp)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetDBRPs", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List database retention policy mappings 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID to filter on (optional)</param>
        /// <param name="org">Specifies the organization name to filter on (optional)</param>
        /// <param name="id">Specifies the mapping ID to filter on (optional)</param>
        /// <param name="bucketID">Specifies the bucket ID to filter on (optional)</param>
        /// <param name="_default">Specifies filtering on default (optional)</param>
        /// <param name="db">Specifies the database to filter on (optional)</param>
        /// <param name="rp">Specifies the retention policy to filter on (optional)</param>
        /// <returns>ApiResponse of DBRPs</returns>
        public RestResponse GetDBRPsWithIRestResponse(string zapTraceSpan = null, string orgID = null,
            string org = null, string id = null, string bucketID = null, bool? _default = null, string db = null,
            string rp = null)
        {
            var localVarPath = "/api/v2/dbrps";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (id != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            }

            if (bucketID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "bucketID", bucketID)); // query parameter
            }

            if (_default != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "default", _default)); // query parameter
            }

            if (db != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "db", db)); // query parameter
            }

            if (rp != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "rp", rp)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetDBRPs", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List database retention policy mappings 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID to filter on (optional)</param>
        /// <param name="org">Specifies the organization name to filter on (optional)</param>
        /// <param name="id">Specifies the mapping ID to filter on (optional)</param>
        /// <param name="bucketID">Specifies the bucket ID to filter on (optional)</param>
        /// <param name="_default">Specifies filtering on default (optional)</param>
        /// <param name="db">Specifies the database to filter on (optional)</param>
        /// <param name="rp">Specifies the retention policy to filter on (optional)</param>
        /// <returns>ApiResponse of DBRPs</returns>
        public RestRequest GetDBRPsWithRestRequest(string zapTraceSpan = null, string orgID = null, string org = null,
            string id = null, string bucketID = null, bool? _default = null, string db = null, string rp = null)
        {
            var localVarPath = "/api/v2/dbrps";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (id != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            }

            if (bucketID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "bucketID", bucketID)); // query parameter
            }

            if (_default != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "default", _default)); // query parameter
            }

            if (db != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "db", db)); // query parameter
            }

            if (rp != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "rp", rp)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            return Configuration.ApiClient.PrepareRequest(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);
        }

        /// <summary>
        /// List database retention policy mappings 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID to filter on (optional)</param>
        /// <param name="org">Specifies the organization name to filter on (optional)</param>
        /// <param name="id">Specifies the mapping ID to filter on (optional)</param>
        /// <param name="bucketID">Specifies the bucket ID to filter on (optional)</param>
        /// <param name="_default">Specifies filtering on default (optional)</param>
        /// <param name="db">Specifies the database to filter on (optional)</param>
        /// <param name="rp">Specifies the retention policy to filter on (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of DBRPs</returns>
        public async System.Threading.Tasks.Task<DBRPs> GetDBRPsAsync(string zapTraceSpan = null, string orgID = null,
            string org = null, string id = null, string bucketID = null, bool? _default = null, string db = null,
            string rp = null, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetDBRPsAsyncWithHttpInfo(zapTraceSpan, orgID, org, id, bucketID, _default, db, rp,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List database retention policy mappings 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID to filter on (optional)</param>
        /// <param name="org">Specifies the organization name to filter on (optional)</param>
        /// <param name="id">Specifies the mapping ID to filter on (optional)</param>
        /// <param name="bucketID">Specifies the bucket ID to filter on (optional)</param>
        /// <param name="_default">Specifies filtering on default (optional)</param>
        /// <param name="db">Specifies the database to filter on (optional)</param>
        /// <param name="rp">Specifies the retention policy to filter on (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (DBRPs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DBRPs>> GetDBRPsAsyncWithHttpInfo(
            string zapTraceSpan = null, string orgID = null, string org = null, string id = null,
            string bucketID = null, bool? _default = null, string db = null, string rp = null,
            CancellationToken cancellationToken = default)
        {
            // make the HTTP request
            var localVarResponse =
                await GetDBRPsAsyncWithIRestResponse(zapTraceSpan, orgID, org, id, bucketID, _default, db, rp,
                    cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetDBRPs", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<DBRPs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DBRPs)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DBRPs)));
        }

        /// <summary>
        /// List database retention policy mappings 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID to filter on (optional)</param>
        /// <param name="org">Specifies the organization name to filter on (optional)</param>
        /// <param name="id">Specifies the mapping ID to filter on (optional)</param>
        /// <param name="bucketID">Specifies the bucket ID to filter on (optional)</param>
        /// <param name="_default">Specifies filtering on default (optional)</param>
        /// <param name="db">Specifies the database to filter on (optional)</param>
        /// <param name="rp">Specifies the retention policy to filter on (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of RestResponse (DBRPs)</returns>
        public async System.Threading.Tasks.Task<RestResponse> GetDBRPsAsyncWithIRestResponse(
            string zapTraceSpan = null, string orgID = null, string org = null, string id = null,
            string bucketID = null, bool? _default = null, string db = null, string rp = null,
            CancellationToken cancellationToken = default)
        {
            var localVarPath = "/api/v2/dbrps";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (id != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            }

            if (bucketID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "bucketID", bucketID)); // query parameter
            }

            if (_default != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "default", _default)); // query parameter
            }

            if (db != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "db", db)); // query parameter
            }

            if (rp != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "rp", rp)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetDBRPs", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <returns>DBRPGet</returns>
        public DBRPGet GetDBRPsID(string dbrpID, string zapTraceSpan = null, string orgID = null, string org = null)
        {
            var localVarResponse = GetDBRPsIDWithHttpInfo(dbrpID, zapTraceSpan, orgID, org);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <returns>ApiResponse of DBRPGet</returns>
        public ApiResponse<DBRPGet> GetDBRPsIDWithHttpInfo(string dbrpID, string zapTraceSpan = null,
            string orgID = null, string org = null)
        {
            // verify the required parameter 'dbrpID' is set
            if (dbrpID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dbrpID' when calling DBRPsService->GetDBRPsID");
            }

            var localVarPath = "/api/v2/dbrps/{dbrpID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dbrpID != null)
            {
                localVarPathParams.Add("dbrpID", Configuration.ApiClient.ParameterToString(dbrpID)); // path parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetDBRPsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<DBRPGet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DBRPGet)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DBRPGet)));
        }

        /// <summary>
        /// Retrieve a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>ApiResponse of DBRPGet</returns>
        public async System.Threading.Tasks.Task<RestResponse> GetDBRPsIDWithIRestResponseAsync(string dbrpID,
            string zapTraceSpan = null, string orgID = null, string org = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dbrpID' is set
            if (dbrpID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dbrpID' when calling DBRPsService->GetDBRPsID");
            }

            var localVarPath = "/api/v2/dbrps/{dbrpID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dbrpID != null)
            {
                localVarPathParams.Add("dbrpID", Configuration.ApiClient.ParameterToString(dbrpID)); // path parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetDBRPsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <returns>ApiResponse of DBRPGet</returns>
        public RestResponse GetDBRPsIDWithIRestResponse(string dbrpID, string zapTraceSpan = null, string orgID = null,
            string org = null)
        {
            // verify the required parameter 'dbrpID' is set
            if (dbrpID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dbrpID' when calling DBRPsService->GetDBRPsID");
            }

            var localVarPath = "/api/v2/dbrps/{dbrpID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dbrpID != null)
            {
                localVarPathParams.Add("dbrpID", Configuration.ApiClient.ParameterToString(dbrpID)); // path parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetDBRPsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <returns>ApiResponse of DBRPGet</returns>
        public RestRequest GetDBRPsIDWithRestRequest(string dbrpID, string zapTraceSpan = null, string orgID = null,
            string org = null)
        {
            // verify the required parameter 'dbrpID' is set
            if (dbrpID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dbrpID' when calling DBRPsService->GetDBRPsID");
            }

            var localVarPath = "/api/v2/dbrps/{dbrpID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dbrpID != null)
            {
                localVarPathParams.Add("dbrpID", Configuration.ApiClient.ParameterToString(dbrpID)); // path parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            return Configuration.ApiClient.PrepareRequest(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);
        }

        /// <summary>
        /// Retrieve a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of DBRPGet</returns>
        public async System.Threading.Tasks.Task<DBRPGet> GetDBRPsIDAsync(string dbrpID, string zapTraceSpan = null,
            string orgID = null, string org = null, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetDBRPsIDAsyncWithHttpInfo(dbrpID, zapTraceSpan, orgID, org, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (DBRPGet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DBRPGet>> GetDBRPsIDAsyncWithHttpInfo(string dbrpID,
            string zapTraceSpan = null, string orgID = null, string org = null,
            CancellationToken cancellationToken = default)
        {
            // make the HTTP request
            var localVarResponse =
                await GetDBRPsIDAsyncWithIRestResponse(dbrpID, zapTraceSpan, orgID, org, cancellationToken)
                    .ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetDBRPsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<DBRPGet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DBRPGet)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DBRPGet)));
        }

        /// <summary>
        /// Retrieve a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping ID</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of RestResponse (DBRPGet)</returns>
        public async System.Threading.Tasks.Task<RestResponse> GetDBRPsIDAsyncWithIRestResponse(string dbrpID,
            string zapTraceSpan = null, string orgID = null, string org = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dbrpID' is set
            if (dbrpID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dbrpID' when calling DBRPsService->GetDBRPsID");
            }

            var localVarPath = "/api/v2/dbrps/{dbrpID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dbrpID != null)
            {
                localVarPathParams.Add("dbrpID", Configuration.ApiClient.ParameterToString(dbrpID)); // path parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetDBRPsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping.</param>
        /// <param name="dBRPUpdate">Database retention policy update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <returns>DBRPGet</returns>
        public DBRPGet PatchDBRPID(string dbrpID, DBRPUpdate dBRPUpdate, string zapTraceSpan = null,
            string orgID = null, string org = null)
        {
            var localVarResponse = PatchDBRPIDWithHttpInfo(dbrpID, dBRPUpdate, zapTraceSpan, orgID, org);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping.</param>
        /// <param name="dBRPUpdate">Database retention policy update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <returns>ApiResponse of DBRPGet</returns>
        public ApiResponse<DBRPGet> PatchDBRPIDWithHttpInfo(string dbrpID, DBRPUpdate dBRPUpdate,
            string zapTraceSpan = null, string orgID = null, string org = null)
        {
            // verify the required parameter 'dbrpID' is set
            if (dbrpID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dbrpID' when calling DBRPsService->PatchDBRPID");
            }

            // verify the required parameter 'dBRPUpdate' is set
            if (dBRPUpdate == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dBRPUpdate' when calling DBRPsService->PatchDBRPID");
            }

            var localVarPath = "/api/v2/dbrps/{dbrpID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dbrpID != null)
            {
                localVarPathParams.Add("dbrpID", Configuration.ApiClient.ParameterToString(dbrpID)); // path parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (dBRPUpdate != null && dBRPUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dBRPUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dBRPUpdate; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchDBRPID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<DBRPGet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DBRPGet)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DBRPGet)));
        }

        /// <summary>
        /// Update a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping.</param>
        /// <param name="dBRPUpdate">Database retention policy update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>ApiResponse of DBRPGet</returns>
        public async System.Threading.Tasks.Task<RestResponse> PatchDBRPIDWithIRestResponseAsync(string dbrpID,
            DBRPUpdate dBRPUpdate, string zapTraceSpan = null, string orgID = null, string org = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dbrpID' is set
            if (dbrpID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dbrpID' when calling DBRPsService->PatchDBRPID");
            }

            // verify the required parameter 'dBRPUpdate' is set
            if (dBRPUpdate == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dBRPUpdate' when calling DBRPsService->PatchDBRPID");
            }

            var localVarPath = "/api/v2/dbrps/{dbrpID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dbrpID != null)
            {
                localVarPathParams.Add("dbrpID", Configuration.ApiClient.ParameterToString(dbrpID)); // path parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (dBRPUpdate != null && dBRPUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dBRPUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dBRPUpdate; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchDBRPID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping.</param>
        /// <param name="dBRPUpdate">Database retention policy update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <returns>ApiResponse of DBRPGet</returns>
        public RestResponse PatchDBRPIDWithIRestResponse(string dbrpID, DBRPUpdate dBRPUpdate,
            string zapTraceSpan = null, string orgID = null, string org = null)
        {
            // verify the required parameter 'dbrpID' is set
            if (dbrpID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dbrpID' when calling DBRPsService->PatchDBRPID");
            }

            // verify the required parameter 'dBRPUpdate' is set
            if (dBRPUpdate == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dBRPUpdate' when calling DBRPsService->PatchDBRPID");
            }

            var localVarPath = "/api/v2/dbrps/{dbrpID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dbrpID != null)
            {
                localVarPathParams.Add("dbrpID", Configuration.ApiClient.ParameterToString(dbrpID)); // path parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (dBRPUpdate != null && dBRPUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dBRPUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dBRPUpdate; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchDBRPID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping.</param>
        /// <param name="dBRPUpdate">Database retention policy update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <returns>ApiResponse of DBRPGet</returns>
        public RestRequest PatchDBRPIDWithRestRequest(string dbrpID, DBRPUpdate dBRPUpdate, string zapTraceSpan = null,
            string orgID = null, string org = null)
        {
            // verify the required parameter 'dbrpID' is set
            if (dbrpID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dbrpID' when calling DBRPsService->PatchDBRPID");
            }

            // verify the required parameter 'dBRPUpdate' is set
            if (dBRPUpdate == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dBRPUpdate' when calling DBRPsService->PatchDBRPID");
            }

            var localVarPath = "/api/v2/dbrps/{dbrpID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dbrpID != null)
            {
                localVarPathParams.Add("dbrpID", Configuration.ApiClient.ParameterToString(dbrpID)); // path parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (dBRPUpdate != null && dBRPUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dBRPUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dBRPUpdate; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            return Configuration.ApiClient.PrepareRequest(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);
        }

        /// <summary>
        /// Update a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping.</param>
        /// <param name="dBRPUpdate">Database retention policy update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of DBRPGet</returns>
        public async System.Threading.Tasks.Task<DBRPGet> PatchDBRPIDAsync(string dbrpID, DBRPUpdate dBRPUpdate,
            string zapTraceSpan = null, string orgID = null, string org = null,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await PatchDBRPIDAsyncWithHttpInfo(dbrpID, dBRPUpdate, zapTraceSpan, orgID, org, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping.</param>
        /// <param name="dBRPUpdate">Database retention policy update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (DBRPGet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DBRPGet>> PatchDBRPIDAsyncWithHttpInfo(string dbrpID,
            DBRPUpdate dBRPUpdate, string zapTraceSpan = null, string orgID = null, string org = null,
            CancellationToken cancellationToken = default)
        {
            // make the HTTP request
            var localVarResponse =
                await PatchDBRPIDAsyncWithIRestResponse(dbrpID, dBRPUpdate, zapTraceSpan, orgID, org, cancellationToken)
                    .ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchDBRPID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<DBRPGet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DBRPGet)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DBRPGet)));
        }

        /// <summary>
        /// Update a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbrpID">The database retention policy mapping.</param>
        /// <param name="dBRPUpdate">Database retention policy update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">Specifies the organization ID of the mapping (optional)</param>
        /// <param name="org">Specifies the organization name of the mapping (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of RestResponse (DBRPGet)</returns>
        public async System.Threading.Tasks.Task<RestResponse> PatchDBRPIDAsyncWithIRestResponse(string dbrpID,
            DBRPUpdate dBRPUpdate, string zapTraceSpan = null, string orgID = null, string org = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dbrpID' is set
            if (dbrpID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dbrpID' when calling DBRPsService->PatchDBRPID");
            }

            // verify the required parameter 'dBRPUpdate' is set
            if (dBRPUpdate == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dBRPUpdate' when calling DBRPsService->PatchDBRPID");
            }

            var localVarPath = "/api/v2/dbrps/{dbrpID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dbrpID != null)
            {
                localVarPathParams.Add("dbrpID", Configuration.ApiClient.ParameterToString(dbrpID)); // path parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (dBRPUpdate != null && dBRPUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dBRPUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dBRPUpdate; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchDBRPID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dBRPCreate">The database retention policy mapping to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>DBRP</returns>
        public DBRP PostDBRP(DBRPCreate dBRPCreate, string zapTraceSpan = null)
        {
            var localVarResponse = PostDBRPWithHttpInfo(dBRPCreate, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dBRPCreate">The database retention policy mapping to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of DBRP</returns>
        public ApiResponse<DBRP> PostDBRPWithHttpInfo(DBRPCreate dBRPCreate, string zapTraceSpan = null)
        {
            // verify the required parameter 'dBRPCreate' is set
            if (dBRPCreate == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dBRPCreate' when calling DBRPsService->PostDBRP");
            }

            var localVarPath = "/api/v2/dbrps";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (dBRPCreate != null && dBRPCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dBRPCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dBRPCreate; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostDBRP", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<DBRP>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DBRP)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DBRP)));
        }

        /// <summary>
        /// Add a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dBRPCreate">The database retention policy mapping to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>ApiResponse of DBRP</returns>
        public async System.Threading.Tasks.Task<RestResponse> PostDBRPWithIRestResponseAsync(DBRPCreate dBRPCreate,
            string zapTraceSpan = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dBRPCreate' is set
            if (dBRPCreate == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dBRPCreate' when calling DBRPsService->PostDBRP");
            }

            var localVarPath = "/api/v2/dbrps";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (dBRPCreate != null && dBRPCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dBRPCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dBRPCreate; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostDBRP", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dBRPCreate">The database retention policy mapping to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of DBRP</returns>
        public RestResponse PostDBRPWithIRestResponse(DBRPCreate dBRPCreate, string zapTraceSpan = null)
        {
            // verify the required parameter 'dBRPCreate' is set
            if (dBRPCreate == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dBRPCreate' when calling DBRPsService->PostDBRP");
            }

            var localVarPath = "/api/v2/dbrps";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (dBRPCreate != null && dBRPCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dBRPCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dBRPCreate; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostDBRP", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dBRPCreate">The database retention policy mapping to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of DBRP</returns>
        public RestRequest PostDBRPWithRestRequest(DBRPCreate dBRPCreate, string zapTraceSpan = null)
        {
            // verify the required parameter 'dBRPCreate' is set
            if (dBRPCreate == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dBRPCreate' when calling DBRPsService->PostDBRP");
            }

            var localVarPath = "/api/v2/dbrps";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (dBRPCreate != null && dBRPCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dBRPCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dBRPCreate; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            return Configuration.ApiClient.PrepareRequest(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);
        }

        /// <summary>
        /// Add a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dBRPCreate">The database retention policy mapping to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of DBRP</returns>
        public async System.Threading.Tasks.Task<DBRP> PostDBRPAsync(DBRPCreate dBRPCreate, string zapTraceSpan = null,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await PostDBRPAsyncWithHttpInfo(dBRPCreate, zapTraceSpan, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dBRPCreate">The database retention policy mapping to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (DBRP)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DBRP>> PostDBRPAsyncWithHttpInfo(DBRPCreate dBRPCreate,
            string zapTraceSpan = null, CancellationToken cancellationToken = default)
        {
            // make the HTTP request
            var localVarResponse = await PostDBRPAsyncWithIRestResponse(dBRPCreate, zapTraceSpan, cancellationToken)
                .ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostDBRP", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<DBRP>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DBRP)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DBRP)));
        }

        /// <summary>
        /// Add a database retention policy mapping 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dBRPCreate">The database retention policy mapping to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of RestResponse (DBRP)</returns>
        public async System.Threading.Tasks.Task<RestResponse> PostDBRPAsyncWithIRestResponse(DBRPCreate dBRPCreate,
            string zapTraceSpan = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dBRPCreate' is set
            if (dBRPCreate == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dBRPCreate' when calling DBRPsService->PostDBRP");
            }

            var localVarPath = "/api/v2/dbrps";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (dBRPCreate != null && dBRPCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dBRPCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dBRPCreate; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostDBRP", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }
    }
}