/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using InfluxDB.Client.Api.Client;
using InfluxDB.Client.Api.Domain;

namespace InfluxDB.Client.Api.Service
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWriteService : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// Write data
        /// </summary>
        /// <remarks>
        /// Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header. (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <returns></returns>
        void PostWrite(string org, string bucket, byte[] body, string zapTraceSpan = null,
            string contentEncoding = null, string contentType = null, int? contentLength = null, string accept = null,
            string orgID = null, WritePrecision? precision = null);

        /// <summary>
        /// Write data
        /// </summary>
        /// <remarks>
        /// Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header. (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> PostWriteWithHttpInfo(string org, string bucket, byte[] body, string zapTraceSpan = null,
            string contentEncoding = null, string contentType = null, int? contentLength = null, string accept = null,
            string orgID = null, WritePrecision? precision = null);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        /// Write data
        /// </summary>
        /// <remarks>
        /// Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header. (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostWriteAsync(string org, string bucket, byte[] body, string zapTraceSpan = null,
            string contentEncoding = null, string contentType = null, int? contentLength = null, string accept = null,
            string orgID = null, WritePrecision? precision = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Write data
        /// </summary>
        /// <remarks>
        /// Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header. (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> PostWriteAsyncWithHttpInfo(string org, string bucket,
            byte[] body, string zapTraceSpan = null, string contentEncoding = null, string contentType = null,
            int? contentLength = null, string accept = null, string orgID = null, WritePrecision? precision = null,
            CancellationToken cancellationToken = default);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WriteService : IWriteService
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WriteService"/> class.
        /// </summary>
        /// <returns></returns>
        public WriteService(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WriteService"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WriteService(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
            {
                Configuration = Configuration.Default;
            }
            else
            {
                Configuration = configuration;
            }

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClientOptions.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete(
            "SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }

                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Write data Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header. (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <returns></returns>
        public void PostWrite(string org, string bucket, byte[] body, string zapTraceSpan = null,
            string contentEncoding = null, string contentType = null, int? contentLength = null, string accept = null,
            string orgID = null, WritePrecision? precision = null)
        {
            PostWriteWithHttpInfo(org, bucket, body, zapTraceSpan, contentEncoding, contentType, contentLength, accept,
                orgID, precision);
        }

        /// <summary>
        /// Write data Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header. (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> PostWriteWithHttpInfo(string org, string bucket, byte[] body,
            string zapTraceSpan = null, string contentEncoding = null, string contentType = null,
            int? contentLength = null, string accept = null, string orgID = null, WritePrecision? precision = null)
        {
            // verify the required parameter 'org' is set
            if (org == null)
            {
                throw new ApiException(400, "Missing required parameter 'org' when calling WriteService->PostWrite");
            }

            // verify the required parameter 'bucket' is set
            if (bucket == null)
            {
                throw new ApiException(400, "Missing required parameter 'bucket' when calling WriteService->PostWrite");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException(400, "Missing required parameter 'body' when calling WriteService->PostWrite");
            }

            var localVarPath = "/api/v2/write";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "text/plain"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (bucket != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "bucket", bucket)); // query parameter
            }

            if (precision != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "precision", precision)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (contentEncoding != null)
            {
                localVarHeaderParams.Add("Content-Encoding",
                    Configuration.ApiClient.ParameterToString(contentEncoding)); // header parameter
            }

            if (contentType != null)
            {
                localVarHeaderParams.Add("Content-Type",
                    Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            }

            if (contentLength != null)
            {
                localVarHeaderParams.Add("Content-Length",
                    Configuration.ApiClient.ParameterToString(contentLength)); // header parameter
            }

            if (accept != null)
            {
                localVarHeaderParams.Add("Accept",
                    Configuration.ApiClient.ParameterToString(accept)); // header parameter
            }

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
                "text/html"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostWrite", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Write data Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header. (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public async System.Threading.Tasks.Task<RestResponse> PostWriteWithIRestResponseAsync(string org,
            string bucket, byte[] body, string zapTraceSpan = null, string contentEncoding = null,
            string contentType = null, int? contentLength = null, string accept = null, string orgID = null,
            WritePrecision? precision = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'org' is set
            if (org == null)
            {
                throw new ApiException(400, "Missing required parameter 'org' when calling WriteService->PostWrite");
            }

            // verify the required parameter 'bucket' is set
            if (bucket == null)
            {
                throw new ApiException(400, "Missing required parameter 'bucket' when calling WriteService->PostWrite");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException(400, "Missing required parameter 'body' when calling WriteService->PostWrite");
            }

            var localVarPath = "/api/v2/write";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "text/plain"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (bucket != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "bucket", bucket)); // query parameter
            }

            if (precision != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "precision", precision)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (contentEncoding != null)
            {
                localVarHeaderParams.Add("Content-Encoding",
                    Configuration.ApiClient.ParameterToString(contentEncoding)); // header parameter
            }

            if (contentType != null)
            {
                localVarHeaderParams.Add("Content-Type",
                    Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            }

            if (contentLength != null)
            {
                localVarHeaderParams.Add("Content-Length",
                    Configuration.ApiClient.ParameterToString(contentLength)); // header parameter
            }

            if (accept != null)
            {
                localVarHeaderParams.Add("Accept",
                    Configuration.ApiClient.ParameterToString(accept)); // header parameter
            }

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
                "text/html"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostWrite", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Write data Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header. (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public RestResponse PostWriteWithIRestResponse(string org, string bucket, byte[] body,
            string zapTraceSpan = null, string contentEncoding = null, string contentType = null,
            int? contentLength = null, string accept = null, string orgID = null, WritePrecision? precision = null)
        {
            // verify the required parameter 'org' is set
            if (org == null)
            {
                throw new ApiException(400, "Missing required parameter 'org' when calling WriteService->PostWrite");
            }

            // verify the required parameter 'bucket' is set
            if (bucket == null)
            {
                throw new ApiException(400, "Missing required parameter 'bucket' when calling WriteService->PostWrite");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException(400, "Missing required parameter 'body' when calling WriteService->PostWrite");
            }

            var localVarPath = "/api/v2/write";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "text/plain"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (bucket != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "bucket", bucket)); // query parameter
            }

            if (precision != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "precision", precision)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (contentEncoding != null)
            {
                localVarHeaderParams.Add("Content-Encoding",
                    Configuration.ApiClient.ParameterToString(contentEncoding)); // header parameter
            }

            if (contentType != null)
            {
                localVarHeaderParams.Add("Content-Type",
                    Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            }

            if (contentLength != null)
            {
                localVarHeaderParams.Add("Content-Length",
                    Configuration.ApiClient.ParameterToString(contentLength)); // header parameter
            }

            if (accept != null)
            {
                localVarHeaderParams.Add("Accept",
                    Configuration.ApiClient.ParameterToString(accept)); // header parameter
            }

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
                "text/html"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostWrite", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Write data Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header. (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public RestRequest PostWriteWithRestRequest(string org, string bucket, byte[] body, string zapTraceSpan = null,
            string contentEncoding = null, string contentType = null, int? contentLength = null, string accept = null,
            string orgID = null, WritePrecision? precision = null)
        {
            // verify the required parameter 'org' is set
            if (org == null)
            {
                throw new ApiException(400, "Missing required parameter 'org' when calling WriteService->PostWrite");
            }

            // verify the required parameter 'bucket' is set
            if (bucket == null)
            {
                throw new ApiException(400, "Missing required parameter 'bucket' when calling WriteService->PostWrite");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException(400, "Missing required parameter 'body' when calling WriteService->PostWrite");
            }

            var localVarPath = "/api/v2/write";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "text/plain"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (bucket != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "bucket", bucket)); // query parameter
            }

            if (precision != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "precision", precision)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (contentEncoding != null)
            {
                localVarHeaderParams.Add("Content-Encoding",
                    Configuration.ApiClient.ParameterToString(contentEncoding)); // header parameter
            }

            if (contentType != null)
            {
                localVarHeaderParams.Add("Content-Type",
                    Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            }

            if (contentLength != null)
            {
                localVarHeaderParams.Add("Content-Length",
                    Configuration.ApiClient.ParameterToString(contentLength)); // header parameter
            }

            if (accept != null)
            {
                localVarHeaderParams.Add("Accept",
                    Configuration.ApiClient.ParameterToString(accept)); // header parameter
            }

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
                "text/html"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            return Configuration.ApiClient.PrepareRequest(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);
        }

        /// <summary>
        /// Write data Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header. (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of void</returns>
        public System.Threading.Tasks.Task PostWriteAsync(string org, string bucket, byte[] body,
            string zapTraceSpan = null, string contentEncoding = null, string contentType = null,
            int? contentLength = null, string accept = null, string orgID = null, WritePrecision? precision = null,
            CancellationToken cancellationToken = default)
        {
            return PostWriteAsyncWithHttpInfo(org, bucket, body, zapTraceSpan, contentEncoding, contentType,
                contentLength, accept, orgID, precision, cancellationToken);
        }

        /// <summary>
        /// Write data Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header. (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> PostWriteAsyncWithHttpInfo(string org,
            string bucket, byte[] body, string zapTraceSpan = null, string contentEncoding = null,
            string contentType = null, int? contentLength = null, string accept = null, string orgID = null,
            WritePrecision? precision = null, CancellationToken cancellationToken = default)
        {
            // make the HTTP request
            var localVarResponse = await PostWriteAsyncWithIRestResponse(org, bucket, body, zapTraceSpan,
                    contentEncoding, contentType, contentLength, accept, orgID, precision, cancellationToken)
                .ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostWrite", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Write data Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header. (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of RestResponse</returns>
        public async System.Threading.Tasks.Task<RestResponse> PostWriteAsyncWithIRestResponse(string org,
            string bucket, byte[] body, string zapTraceSpan = null, string contentEncoding = null,
            string contentType = null, int? contentLength = null, string accept = null, string orgID = null,
            WritePrecision? precision = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'org' is set
            if (org == null)
            {
                throw new ApiException(400, "Missing required parameter 'org' when calling WriteService->PostWrite");
            }

            // verify the required parameter 'bucket' is set
            if (bucket == null)
            {
                throw new ApiException(400, "Missing required parameter 'bucket' when calling WriteService->PostWrite");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException(400, "Missing required parameter 'body' when calling WriteService->PostWrite");
            }

            var localVarPath = "/api/v2/write";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "text/plain"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (org != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "org", org)); // query parameter
            }

            if (orgID != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "orgID", orgID)); // query parameter
            }

            if (bucket != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "bucket", bucket)); // query parameter
            }

            if (precision != null)
            {
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "precision", precision)); // query parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (contentEncoding != null)
            {
                localVarHeaderParams.Add("Content-Encoding",
                    Configuration.ApiClient.ParameterToString(contentEncoding)); // header parameter
            }

            if (contentType != null)
            {
                localVarHeaderParams.Add("Content-Type",
                    Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            }

            if (contentLength != null)
            {
                localVarHeaderParams.Add("Content-Length",
                    Configuration.ApiClient.ParameterToString(contentLength)); // header parameter
            }

            if (accept != null)
            {
                localVarHeaderParams.Add("Accept",
                    Configuration.ApiClient.ParameterToString(accept)); // header parameter
            }

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
                "text/html"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostWrite", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }
    }
}