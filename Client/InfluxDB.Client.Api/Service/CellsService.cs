/* 
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using InfluxDB.Client.Api.Client;
using InfluxDB.Client.Api.Domain;

namespace InfluxDB.Client.Api.Service
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsService : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// Delete a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void DeleteDashboardsIDCellsID(string dashboardID, string cellID, string zapTraceSpan = null);

        /// <summary>
        /// Delete a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> DeleteDashboardsIDCellsIDWithHttpInfo(string dashboardID, string cellID,
            string zapTraceSpan = null);

        /// <summary>
        /// Retrieve the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>View</returns>
        View GetDashboardsIDCellsIDView(string dashboardID, string cellID, string zapTraceSpan = null);

        /// <summary>
        /// Retrieve the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> GetDashboardsIDCellsIDViewWithHttpInfo(string dashboardID, string cellID,
            string zapTraceSpan = null);

        /// <summary>
        /// Update the non-positional information related to a cell
        /// </summary>
        /// <remarks>
        /// Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Cell</returns>
        Cell PatchDashboardsIDCellsID(string dashboardID, string cellID, CellUpdate cellUpdate,
            string zapTraceSpan = null);

        /// <summary>
        /// Update the non-positional information related to a cell
        /// </summary>
        /// <remarks>
        /// Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Cell</returns>
        ApiResponse<Cell> PatchDashboardsIDCellsIDWithHttpInfo(string dashboardID, string cellID, CellUpdate cellUpdate,
            string zapTraceSpan = null);

        /// <summary>
        /// Update the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>View</returns>
        View PatchDashboardsIDCellsIDView(string dashboardID, string cellID, View view, string zapTraceSpan = null);

        /// <summary>
        /// Update the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> PatchDashboardsIDCellsIDViewWithHttpInfo(string dashboardID, string cellID, View view,
            string zapTraceSpan = null);

        /// <summary>
        /// Create a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Cell</returns>
        Cell PostDashboardsIDCells(string dashboardID, CreateCell createCell, string zapTraceSpan = null);

        /// <summary>
        /// Create a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Cell</returns>
        ApiResponse<Cell> PostDashboardsIDCellsWithHttpInfo(string dashboardID, CreateCell createCell,
            string zapTraceSpan = null);

        /// <summary>
        /// Replace cells in a dashboard
        /// </summary>
        /// <remarks>
        /// Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Dashboard</returns>
        Dashboard PutDashboardsIDCells(string dashboardID, List<Cell> cell, string zapTraceSpan = null);

        /// <summary>
        /// Replace cells in a dashboard
        /// </summary>
        /// <remarks>
        /// Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Dashboard</returns>
        ApiResponse<Dashboard> PutDashboardsIDCellsWithHttpInfo(string dashboardID, List<Cell> cell,
            string zapTraceSpan = null);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        /// Delete a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDashboardsIDCellsIDAsync(string dashboardID, string cellID,
            string zapTraceSpan = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> DeleteDashboardsIDCellsIDAsyncWithHttpInfo(string dashboardID,
            string cellID, string zapTraceSpan = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> GetDashboardsIDCellsIDViewAsync(string dashboardID, string cellID,
            string zapTraceSpan = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> GetDashboardsIDCellsIDViewAsyncWithHttpInfo(string dashboardID,
            string cellID, string zapTraceSpan = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update the non-positional information related to a cell
        /// </summary>
        /// <remarks>
        /// Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of Cell</returns>
        System.Threading.Tasks.Task<Cell> PatchDashboardsIDCellsIDAsync(string dashboardID, string cellID,
            CellUpdate cellUpdate, string zapTraceSpan = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update the non-positional information related to a cell
        /// </summary>
        /// <remarks>
        /// Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (Cell)</returns>
        System.Threading.Tasks.Task<ApiResponse<Cell>> PatchDashboardsIDCellsIDAsyncWithHttpInfo(string dashboardID,
            string cellID, CellUpdate cellUpdate, string zapTraceSpan = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// Update the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> PatchDashboardsIDCellsIDViewAsync(string dashboardID, string cellID,
            View view, string zapTraceSpan = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> PatchDashboardsIDCellsIDViewAsyncWithHttpInfo(string dashboardID,
            string cellID, View view, string zapTraceSpan = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of Cell</returns>
        System.Threading.Tasks.Task<Cell> PostDashboardsIDCellsAsync(string dashboardID, CreateCell createCell,
            string zapTraceSpan = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (Cell)</returns>
        System.Threading.Tasks.Task<ApiResponse<Cell>> PostDashboardsIDCellsAsyncWithHttpInfo(string dashboardID,
            CreateCell createCell, string zapTraceSpan = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Replace cells in a dashboard
        /// </summary>
        /// <remarks>
        /// Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of Dashboard</returns>
        System.Threading.Tasks.Task<Dashboard> PutDashboardsIDCellsAsync(string dashboardID, List<Cell> cell,
            string zapTraceSpan = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Replace cells in a dashboard
        /// </summary>
        /// <remarks>
        /// Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (Dashboard)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dashboard>> PutDashboardsIDCellsAsyncWithHttpInfo(string dashboardID,
            List<Cell> cell, string zapTraceSpan = null, CancellationToken cancellationToken = default);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CellsService : ICellsService
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsService"/> class.
        /// </summary>
        /// <returns></returns>
        public CellsService(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsService"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CellsService(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
            {
                Configuration = Configuration.Default;
            }
            else
            {
                Configuration = configuration;
            }

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClientOptions.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete(
            "SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }

                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void DeleteDashboardsIDCellsID(string dashboardID, string cellID, string zapTraceSpan = null)
        {
            DeleteDashboardsIDCellsIDWithHttpInfo(dashboardID, cellID, zapTraceSpan);
        }

        /// <summary>
        /// Delete a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> DeleteDashboardsIDCellsIDWithHttpInfo(string dashboardID, string cellID,
            string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->DeleteDashboardsIDCellsID");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->DeleteDashboardsIDCellsID");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("DeleteDashboardsIDCellsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public async System.Threading.Tasks.Task<RestResponse> DeleteDashboardsIDCellsIDWithIRestResponseAsync(
            string dashboardID, string cellID, string zapTraceSpan = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->DeleteDashboardsIDCellsID");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->DeleteDashboardsIDCellsID");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("DeleteDashboardsIDCellsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public RestResponse DeleteDashboardsIDCellsIDWithIRestResponse(string dashboardID, string cellID,
            string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->DeleteDashboardsIDCellsID");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->DeleteDashboardsIDCellsID");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("DeleteDashboardsIDCellsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public RestRequest DeleteDashboardsIDCellsIDWithRestRequest(string dashboardID, string cellID,
            string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->DeleteDashboardsIDCellsID");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->DeleteDashboardsIDCellsID");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            return Configuration.ApiClient.PrepareRequest(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);
        }

        /// <summary>
        /// Delete a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of void</returns>
        public System.Threading.Tasks.Task DeleteDashboardsIDCellsIDAsync(string dashboardID, string cellID,
            string zapTraceSpan = null, CancellationToken cancellationToken = default)
        {
            return DeleteDashboardsIDCellsIDAsyncWithHttpInfo(dashboardID, cellID, zapTraceSpan, cancellationToken);
        }

        /// <summary>
        /// Delete a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> DeleteDashboardsIDCellsIDAsyncWithHttpInfo(
            string dashboardID, string cellID, string zapTraceSpan = null,
            CancellationToken cancellationToken = default)
        {
            // make the HTTP request
            var localVarResponse =
                await DeleteDashboardsIDCellsIDAsyncWithIRestResponse(dashboardID, cellID, zapTraceSpan,
                    cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("DeleteDashboardsIDCellsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of RestResponse</returns>
        public async System.Threading.Tasks.Task<RestResponse> DeleteDashboardsIDCellsIDAsyncWithIRestResponse(
            string dashboardID, string cellID, string zapTraceSpan = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->DeleteDashboardsIDCellsID");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->DeleteDashboardsIDCellsID");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("DeleteDashboardsIDCellsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>View</returns>
        public View GetDashboardsIDCellsIDView(string dashboardID, string cellID, string zapTraceSpan = null)
        {
            var localVarResponse = GetDashboardsIDCellsIDViewWithHttpInfo(dashboardID, cellID, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of View</returns>
        public ApiResponse<View> GetDashboardsIDCellsIDViewWithHttpInfo(string dashboardID, string cellID,
            string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->GetDashboardsIDCellsIDView");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->GetDashboardsIDCellsIDView");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}/view";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetDashboardsIDCellsIDView", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View)Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Retrieve the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>ApiResponse of View</returns>
        public async System.Threading.Tasks.Task<RestResponse> GetDashboardsIDCellsIDViewWithIRestResponseAsync(
            string dashboardID, string cellID, string zapTraceSpan = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->GetDashboardsIDCellsIDView");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->GetDashboardsIDCellsIDView");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}/view";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetDashboardsIDCellsIDView", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of View</returns>
        public RestResponse GetDashboardsIDCellsIDViewWithIRestResponse(string dashboardID, string cellID,
            string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->GetDashboardsIDCellsIDView");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->GetDashboardsIDCellsIDView");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}/view";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetDashboardsIDCellsIDView", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of View</returns>
        public RestRequest GetDashboardsIDCellsIDViewWithRestRequest(string dashboardID, string cellID,
            string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->GetDashboardsIDCellsIDView");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->GetDashboardsIDCellsIDView");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}/view";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            return Configuration.ApiClient.PrepareRequest(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);
        }

        /// <summary>
        /// Retrieve the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> GetDashboardsIDCellsIDViewAsync(string dashboardID,
            string cellID, string zapTraceSpan = null, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetDashboardsIDCellsIDViewAsyncWithHttpInfo(dashboardID, cellID, zapTraceSpan, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<View>> GetDashboardsIDCellsIDViewAsyncWithHttpInfo(
            string dashboardID, string cellID, string zapTraceSpan = null,
            CancellationToken cancellationToken = default)
        {
            // make the HTTP request
            var localVarResponse =
                await GetDashboardsIDCellsIDViewAsyncWithIRestResponse(dashboardID, cellID, zapTraceSpan,
                    cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetDashboardsIDCellsIDView", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View)Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Retrieve the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of RestResponse (View)</returns>
        public async System.Threading.Tasks.Task<RestResponse> GetDashboardsIDCellsIDViewAsyncWithIRestResponse(
            string dashboardID, string cellID, string zapTraceSpan = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->GetDashboardsIDCellsIDView");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->GetDashboardsIDCellsIDView");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}/view";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("GetDashboardsIDCellsIDView", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the non-positional information related to a cell Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Cell</returns>
        public Cell PatchDashboardsIDCellsID(string dashboardID, string cellID, CellUpdate cellUpdate,
            string zapTraceSpan = null)
        {
            var localVarResponse = PatchDashboardsIDCellsIDWithHttpInfo(dashboardID, cellID, cellUpdate, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the non-positional information related to a cell Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Cell</returns>
        public ApiResponse<Cell> PatchDashboardsIDCellsIDWithHttpInfo(string dashboardID, string cellID,
            CellUpdate cellUpdate, string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PatchDashboardsIDCellsID");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->PatchDashboardsIDCellsID");
            }

            // verify the required parameter 'cellUpdate' is set
            if (cellUpdate == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellUpdate' when calling CellsService->PatchDashboardsIDCellsID");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (cellUpdate != null && cellUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cellUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cellUpdate; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchDashboardsIDCellsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<Cell>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Cell)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Cell)));
        }

        /// <summary>
        /// Update the non-positional information related to a cell Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>ApiResponse of Cell</returns>
        public async System.Threading.Tasks.Task<RestResponse> PatchDashboardsIDCellsIDWithIRestResponseAsync(
            string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PatchDashboardsIDCellsID");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->PatchDashboardsIDCellsID");
            }

            // verify the required parameter 'cellUpdate' is set
            if (cellUpdate == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellUpdate' when calling CellsService->PatchDashboardsIDCellsID");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (cellUpdate != null && cellUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cellUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cellUpdate; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchDashboardsIDCellsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the non-positional information related to a cell Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Cell</returns>
        public RestResponse PatchDashboardsIDCellsIDWithIRestResponse(string dashboardID, string cellID,
            CellUpdate cellUpdate, string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PatchDashboardsIDCellsID");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->PatchDashboardsIDCellsID");
            }

            // verify the required parameter 'cellUpdate' is set
            if (cellUpdate == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellUpdate' when calling CellsService->PatchDashboardsIDCellsID");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (cellUpdate != null && cellUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cellUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cellUpdate; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchDashboardsIDCellsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the non-positional information related to a cell Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Cell</returns>
        public RestRequest PatchDashboardsIDCellsIDWithRestRequest(string dashboardID, string cellID,
            CellUpdate cellUpdate, string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PatchDashboardsIDCellsID");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->PatchDashboardsIDCellsID");
            }

            // verify the required parameter 'cellUpdate' is set
            if (cellUpdate == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellUpdate' when calling CellsService->PatchDashboardsIDCellsID");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (cellUpdate != null && cellUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cellUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cellUpdate; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            return Configuration.ApiClient.PrepareRequest(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);
        }

        /// <summary>
        /// Update the non-positional information related to a cell Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of Cell</returns>
        public async System.Threading.Tasks.Task<Cell> PatchDashboardsIDCellsIDAsync(string dashboardID, string cellID,
            CellUpdate cellUpdate, string zapTraceSpan = null, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await PatchDashboardsIDCellsIDAsyncWithHttpInfo(dashboardID, cellID, cellUpdate, zapTraceSpan,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the non-positional information related to a cell Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (Cell)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Cell>> PatchDashboardsIDCellsIDAsyncWithHttpInfo(
            string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = null,
            CancellationToken cancellationToken = default)
        {
            // make the HTTP request
            var localVarResponse =
                await PatchDashboardsIDCellsIDAsyncWithIRestResponse(dashboardID, cellID, cellUpdate, zapTraceSpan,
                    cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchDashboardsIDCellsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<Cell>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Cell)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Cell)));
        }

        /// <summary>
        /// Update the non-positional information related to a cell Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of RestResponse (Cell)</returns>
        public async System.Threading.Tasks.Task<RestResponse> PatchDashboardsIDCellsIDAsyncWithIRestResponse(
            string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PatchDashboardsIDCellsID");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->PatchDashboardsIDCellsID");
            }

            // verify the required parameter 'cellUpdate' is set
            if (cellUpdate == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellUpdate' when calling CellsService->PatchDashboardsIDCellsID");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (cellUpdate != null && cellUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cellUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cellUpdate; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchDashboardsIDCellsID", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>View</returns>
        public View PatchDashboardsIDCellsIDView(string dashboardID, string cellID, View view,
            string zapTraceSpan = null)
        {
            var localVarResponse = PatchDashboardsIDCellsIDViewWithHttpInfo(dashboardID, cellID, view, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of View</returns>
        public ApiResponse<View> PatchDashboardsIDCellsIDViewWithHttpInfo(string dashboardID, string cellID, View view,
            string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PatchDashboardsIDCellsIDView");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->PatchDashboardsIDCellsIDView");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'view' when calling CellsService->PatchDashboardsIDCellsIDView");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}/view";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (view != null && view.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(view); // http body (model) parameter
            }
            else
            {
                localVarPostBody = view; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchDashboardsIDCellsIDView", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View)Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Update the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>ApiResponse of View</returns>
        public async System.Threading.Tasks.Task<RestResponse> PatchDashboardsIDCellsIDViewWithIRestResponseAsync(
            string dashboardID, string cellID, View view, string zapTraceSpan = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PatchDashboardsIDCellsIDView");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->PatchDashboardsIDCellsIDView");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'view' when calling CellsService->PatchDashboardsIDCellsIDView");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}/view";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (view != null && view.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(view); // http body (model) parameter
            }
            else
            {
                localVarPostBody = view; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchDashboardsIDCellsIDView", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of View</returns>
        public RestResponse PatchDashboardsIDCellsIDViewWithIRestResponse(string dashboardID, string cellID, View view,
            string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PatchDashboardsIDCellsIDView");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->PatchDashboardsIDCellsIDView");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'view' when calling CellsService->PatchDashboardsIDCellsIDView");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}/view";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (view != null && view.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(view); // http body (model) parameter
            }
            else
            {
                localVarPostBody = view; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchDashboardsIDCellsIDView", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of View</returns>
        public RestRequest PatchDashboardsIDCellsIDViewWithRestRequest(string dashboardID, string cellID, View view,
            string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PatchDashboardsIDCellsIDView");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->PatchDashboardsIDCellsIDView");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'view' when calling CellsService->PatchDashboardsIDCellsIDView");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}/view";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (view != null && view.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(view); // http body (model) parameter
            }
            else
            {
                localVarPostBody = view; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            return Configuration.ApiClient.PrepareRequest(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);
        }

        /// <summary>
        /// Update the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> PatchDashboardsIDCellsIDViewAsync(string dashboardID,
            string cellID, View view, string zapTraceSpan = null, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await PatchDashboardsIDCellsIDViewAsyncWithHttpInfo(dashboardID, cellID, view, zapTraceSpan,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<View>> PatchDashboardsIDCellsIDViewAsyncWithHttpInfo(
            string dashboardID, string cellID, View view, string zapTraceSpan = null,
            CancellationToken cancellationToken = default)
        {
            // make the HTTP request
            var localVarResponse =
                await PatchDashboardsIDCellsIDViewAsyncWithIRestResponse(dashboardID, cellID, view, zapTraceSpan,
                    cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchDashboardsIDCellsIDView", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View)Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Update the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of RestResponse (View)</returns>
        public async System.Threading.Tasks.Task<RestResponse> PatchDashboardsIDCellsIDViewAsyncWithIRestResponse(
            string dashboardID, string cellID, View view, string zapTraceSpan = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PatchDashboardsIDCellsIDView");
            }

            // verify the required parameter 'cellID' is set
            if (cellID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cellID' when calling CellsService->PatchDashboardsIDCellsIDView");
            }

            // verify the required parameter 'view' is set
            if (view == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'view' when calling CellsService->PatchDashboardsIDCellsIDView");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells/{cellID}/view";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (cellID != null)
            {
                localVarPathParams.Add("cellID", Configuration.ApiClient.ParameterToString(cellID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (view != null && view.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(view); // http body (model) parameter
            }
            else
            {
                localVarPostBody = view; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PatchDashboardsIDCellsIDView", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Cell</returns>
        public Cell PostDashboardsIDCells(string dashboardID, CreateCell createCell, string zapTraceSpan = null)
        {
            var localVarResponse = PostDashboardsIDCellsWithHttpInfo(dashboardID, createCell, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Cell</returns>
        public ApiResponse<Cell> PostDashboardsIDCellsWithHttpInfo(string dashboardID, CreateCell createCell,
            string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PostDashboardsIDCells");
            }

            // verify the required parameter 'createCell' is set
            if (createCell == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'createCell' when calling CellsService->PostDashboardsIDCells");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (createCell != null && createCell.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createCell); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCell; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostDashboardsIDCells", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<Cell>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Cell)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Cell)));
        }

        /// <summary>
        /// Create a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>ApiResponse of Cell</returns>
        public async System.Threading.Tasks.Task<RestResponse> PostDashboardsIDCellsWithIRestResponseAsync(
            string dashboardID, CreateCell createCell, string zapTraceSpan = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PostDashboardsIDCells");
            }

            // verify the required parameter 'createCell' is set
            if (createCell == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'createCell' when calling CellsService->PostDashboardsIDCells");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (createCell != null && createCell.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createCell); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCell; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostDashboardsIDCells", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Cell</returns>
        public RestResponse PostDashboardsIDCellsWithIRestResponse(string dashboardID, CreateCell createCell,
            string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PostDashboardsIDCells");
            }

            // verify the required parameter 'createCell' is set
            if (createCell == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'createCell' when calling CellsService->PostDashboardsIDCells");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (createCell != null && createCell.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createCell); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCell; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostDashboardsIDCells", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Cell</returns>
        public RestRequest PostDashboardsIDCellsWithRestRequest(string dashboardID, CreateCell createCell,
            string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PostDashboardsIDCells");
            }

            // verify the required parameter 'createCell' is set
            if (createCell == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'createCell' when calling CellsService->PostDashboardsIDCells");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (createCell != null && createCell.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createCell); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCell; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            return Configuration.ApiClient.PrepareRequest(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);
        }

        /// <summary>
        /// Create a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of Cell</returns>
        public async System.Threading.Tasks.Task<Cell> PostDashboardsIDCellsAsync(string dashboardID,
            CreateCell createCell, string zapTraceSpan = null, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await PostDashboardsIDCellsAsyncWithHttpInfo(dashboardID, createCell, zapTraceSpan, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (Cell)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Cell>> PostDashboardsIDCellsAsyncWithHttpInfo(
            string dashboardID, CreateCell createCell, string zapTraceSpan = null,
            CancellationToken cancellationToken = default)
        {
            // make the HTTP request
            var localVarResponse =
                await PostDashboardsIDCellsAsyncWithIRestResponse(dashboardID, createCell, zapTraceSpan,
                    cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostDashboardsIDCells", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<Cell>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Cell)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Cell)));
        }

        /// <summary>
        /// Create a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of RestResponse (Cell)</returns>
        public async System.Threading.Tasks.Task<RestResponse> PostDashboardsIDCellsAsyncWithIRestResponse(
            string dashboardID, CreateCell createCell, string zapTraceSpan = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PostDashboardsIDCells");
            }

            // verify the required parameter 'createCell' is set
            if (createCell == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'createCell' when calling CellsService->PostDashboardsIDCells");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (createCell != null && createCell.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createCell); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCell; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PostDashboardsIDCells", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace cells in a dashboard Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Dashboard</returns>
        public Dashboard PutDashboardsIDCells(string dashboardID, List<Cell> cell, string zapTraceSpan = null)
        {
            var localVarResponse = PutDashboardsIDCellsWithHttpInfo(dashboardID, cell, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace cells in a dashboard Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Dashboard</returns>
        public ApiResponse<Dashboard> PutDashboardsIDCellsWithHttpInfo(string dashboardID, List<Cell> cell,
            string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PutDashboardsIDCells");
            }

            // verify the required parameter 'cell' is set
            if (cell == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cell' when calling CellsService->PutDashboardsIDCells");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (cell != null && cell.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cell); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cell; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PutDashboardsIDCells", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<Dashboard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dashboard)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dashboard)));
        }

        /// <summary>
        /// Replace cells in a dashboard Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>ApiResponse of Dashboard</returns>
        public async System.Threading.Tasks.Task<RestResponse> PutDashboardsIDCellsWithIRestResponseAsync(
            string dashboardID, List<Cell> cell, string zapTraceSpan = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PutDashboardsIDCells");
            }

            // verify the required parameter 'cell' is set
            if (cell == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cell' when calling CellsService->PutDashboardsIDCells");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (cell != null && cell.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cell); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cell; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PutDashboardsIDCells", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace cells in a dashboard Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Dashboard</returns>
        public RestResponse PutDashboardsIDCellsWithIRestResponse(string dashboardID, List<Cell> cell,
            string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PutDashboardsIDCells");
            }

            // verify the required parameter 'cell' is set
            if (cell == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cell' when calling CellsService->PutDashboardsIDCells");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (cell != null && cell.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cell); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cell; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PutDashboardsIDCells", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace cells in a dashboard Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Dashboard</returns>
        public RestRequest PutDashboardsIDCellsWithRestRequest(string dashboardID, List<Cell> cell,
            string zapTraceSpan = null)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PutDashboardsIDCells");
            }

            // verify the required parameter 'cell' is set
            if (cell == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cell' when calling CellsService->PutDashboardsIDCells");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (cell != null && cell.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cell); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cell; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            return Configuration.ApiClient.PrepareRequest(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);
        }

        /// <summary>
        /// Replace cells in a dashboard Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of Dashboard</returns>
        public async System.Threading.Tasks.Task<Dashboard> PutDashboardsIDCellsAsync(string dashboardID,
            List<Cell> cell, string zapTraceSpan = null, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await PutDashboardsIDCellsAsyncWithHttpInfo(dashboardID, cell, zapTraceSpan, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace cells in a dashboard Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of ApiResponse (Dashboard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dashboard>> PutDashboardsIDCellsAsyncWithHttpInfo(
            string dashboardID, List<Cell> cell, string zapTraceSpan = null,
            CancellationToken cancellationToken = default)
        {
            // make the HTTP request
            var localVarResponse =
                await PutDashboardsIDCellsAsyncWithIRestResponse(dashboardID, cell, zapTraceSpan, cancellationToken)
                    .ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PutDashboardsIDCells", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<Dashboard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dashboard)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dashboard)));
        }

        /// <summary>
        /// Replace cells in a dashboard Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task of RestResponse (Dashboard)</returns>
        public async System.Threading.Tasks.Task<RestResponse> PutDashboardsIDCellsAsyncWithIRestResponse(
            string dashboardID, List<Cell> cell, string zapTraceSpan = null,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'dashboardID' when calling CellsService->PutDashboardsIDCells");
            }

            // verify the required parameter 'cell' is set
            if (cell == null)
            {
                throw new ApiException(400,
                    "Missing required parameter 'cell' when calling CellsService->PutDashboardsIDCells");
            }

            var localVarPath = "/api/v2/dashboards/{dashboardID}/cells";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            if (dashboardID != null)
            {
                localVarPathParams.Add("dashboardID",
                    Configuration.ApiClient.ParameterToString(dashboardID)); // path parameter
            }

            if (zapTraceSpan != null)
            {
                localVarHeaderParams.Add("Zap-Trace-Span",
                    Configuration.ApiClient.ParameterToString(zapTraceSpan)); // header parameter
            }

            if (cell != null && cell.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cell); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cell; // byte array
            }

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[]
            {
                "application/json"
            };

            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null && !localVarHeaderParams.ContainsKey("Accept"))
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }


            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("PutDashboardsIDCells", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return localVarResponse;
        }
    }
}